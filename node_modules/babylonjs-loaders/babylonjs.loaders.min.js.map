{"version":3,"file":"babylonjs.loaders.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,cACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,oBAAqB,CAAC,aAAcJ,GACjB,iBAAZC,QACdA,QAAQ,qBAAuBD,EAAQG,QAAQ,cAE/CJ,EAAc,QAAIC,EAAQD,EAAc,QACzC,CATD,CASoB,oBAATO,KAAuBA,KAAyB,oBAAXC,OAAyBA,OAASC,MAAQC,G,uBCRtFC,EADAC,E,uFCsBJ,cAaI,WAAYC,G,QACR,IAAK,YAAE,KACDC,EAAOD,EAAOC,KACdC,GAAiC,QAAf,EAAAD,EAAKE,kBAAU,eAAEC,KAAI,SAACC,GAAM,OAAAA,EAAEC,sBAAF,MAA6B,GACjF,EAAKJ,gBAAkB,EAAKK,mBAAmB,kBAAmB,EAAAC,YAAaN,GAC/E,IAAMO,GAAkB,QAAV,EAAAR,EAAKQ,aAAK,eAAEL,KAAI,SAACM,GAAM,OAAAA,EAAEC,qBAAF,MAA4B,G,OACjE,EAAKF,MAAQ,EAAKF,mBAAmB,QAAS,EAAAC,YAAaC,G,CAC/D,CAKJ,OAzB+C,aAsB3B,YAAAG,aAAhB,WACI,MAAO,2BACX,EACJ,EAzBA,CAA+C,EAAAC,e,6DCN/C,IAAIC,EAAgB,SAASC,EAAGC,GAI9B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FP,EAAcC,EAAGC,EAC1B,EAEO,SAASS,EAAUV,EAAGC,GAC3B,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIU,UAAU,uBAAyBC,OAAOX,GAAK,iCAE7D,SAASY,IAAOhC,KAAKiC,YAAcd,CAAG,CADtCD,EAAcC,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMY,EAAGN,UAAYN,EAAEM,UAAW,IAAIM,EACjF,CAEO,IAAIG,EAAW,WAQpB,OAPAA,EAAWd,OAAOe,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGzB,EAAI0B,UAAUC,OAAQF,EAAIzB,EAAGyB,IAE5C,IAAK,IAAId,KADTa,EAAIE,UAAUD,GACOlB,OAAOK,UAAUC,eAAeC,KAAKU,EAAGb,KAAIY,EAAEZ,GAAKa,EAAEb,IAE9E,OAAOY,CACX,EACOF,EAASO,MAAM1C,KAAMwC,UAC9B,EA0EO,SAASG,EAAUC,EAASC,EAAYC,EAAGC,GAEhD,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,OAClE,GACF,CAEO,SAASM,EAAYhB,EAASiB,GACnC,IAAsGC,EAAGC,EAAG1B,EAAxG2B,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP7B,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAI,EAAG8B,KAAM,GAAIC,IAAK,IAAeC,EAAIhD,OAAOa,QAA4B,mBAAboC,SAA0BA,SAAWjD,QAAQK,WACtL,OAAO2C,EAAEf,KAAOiB,EAAK,GAAIF,EAAS,MAAIE,EAAK,GAAIF,EAAU,OAAIE,EAAK,GAAsB,mBAAXC,SAA0BH,EAAEG,OAAOC,UAAY,WAAa,OAAOzE,IAAM,GAAIqE,EAC1J,SAASE,EAAKzD,GAAK,OAAO,SAAU4D,GAAK,OACzC,SAAcC,GACV,GAAIb,EAAG,MAAM,IAAIhC,UAAU,mCAC3B,KAAOuC,IAAMA,EAAI,EAAGM,EAAG,KAAOX,EAAI,IAAKA,OACnC,GAAIF,EAAI,EAAGC,IAAM1B,EAAY,EAARsC,EAAG,GAASZ,EAAU,OAAIY,EAAG,GAAKZ,EAAS,SAAO1B,EAAI0B,EAAU,SAAM1B,EAAET,KAAKmC,GAAI,GAAKA,EAAET,SAAWjB,EAAIA,EAAET,KAAKmC,EAAGY,EAAG,KAAKjB,KAAM,OAAOrB,EAE3J,OADI0B,EAAI,EAAG1B,IAAGsC,EAAK,CAAS,EAARA,EAAG,GAAQtC,EAAEe,QACzBuB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGtC,EAAIsC,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEb,MAAOuB,EAAG,GAAIjB,MAAM,GAChD,KAAK,EAAGM,EAAEC,QAASF,EAAIY,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIQ,MAAOZ,EAAEG,KAAKS,MAAO,SACxC,QACI,MAAkBvC,GAAZA,EAAI2B,EAAEG,MAAY1B,OAAS,GAAKJ,EAAEA,EAAEI,OAAS,KAAkB,IAAVkC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,QAAU,CAC3G,GAAc,IAAVW,EAAG,MAActC,GAAMsC,EAAG,GAAKtC,EAAE,IAAMsC,EAAG,GAAKtC,EAAE,IAAM,CAAE2B,EAAEC,MAAQU,EAAG,GAAI,KAAO,CACrF,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQ5B,EAAE,GAAI,CAAE2B,EAAEC,MAAQ5B,EAAE,GAAIA,EAAIsC,EAAI,KAAO,CACpE,GAAItC,GAAK2B,EAAEC,MAAQ5B,EAAE,GAAI,CAAE2B,EAAEC,MAAQ5B,EAAE,GAAI2B,EAAEI,IAAIS,KAAKF,GAAK,KAAO,CAC9DtC,EAAE,IAAI2B,EAAEI,IAAIQ,MAChBZ,EAAEG,KAAKS,MAAO,SAEtBD,EAAKd,EAAKjC,KAAKgB,EAASoB,EAC5B,CAAE,MAAOT,GAAKoB,EAAK,CAAC,EAAGpB,GAAIQ,EAAI,CAAG,CAAE,QAAUD,EAAIzB,EAAI,CAAG,CACzD,GAAY,EAARsC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEvB,MAAOuB,EAAG,GAAKA,EAAG,QAAK,EAAQjB,MAAM,EAC9E,CAtBgDL,CAAK,CAACvC,EAAG4D,GAAK,CAAG,CAuBnE,CAE6BrD,OAAOa,OA2GXb,OAAOa,OAoEkB,mBAApB4C,iBAAiCA,e,UCvU/DpF,EAAOD,QAAUQ,C,0ECUjB,aACI,WACY8E,EACAC,GADA,KAAAD,MAAAA,EACA,KAAAC,UAAAA,CACT,CAgFP,OAxDW,YAAAC,QAAP,SAAeC,GACX,IAAIC,EAAkBnF,KAAK+E,MACvBK,EAAgBpF,KAAKgF,UACrBK,OAAcC,EAElB,IAAKJ,EAAKK,WAAW,KACjB,MAAM,IAAIC,MAAM,4BAEpB,IAAMC,EAAQP,EAAKQ,MAAM,KAIzB,GAHAD,EAAME,QAGFF,EAAMA,EAAMhD,OAAS,GAAGmD,SAAS,WAAY,CAC7C,IACMF,EADWD,EAAMA,EAAMhD,OAAS,GACfiD,MAAM,KAC7BD,EAAMb,MACNa,EAAMZ,KAAI,MAAVY,EAAcC,EAClB,CAIA,IAFA,IAAIG,GAAmB,EAEJ,MAAAJ,EAAA,eAAO,CAArB,IAAMK,EAAI,KACLC,EAAoB,WAATD,EACjB,GAAIC,IAAaX,EAASY,UACtB,MAAM,IAAIR,MAAM,eAAQN,EAAI,gBAKhC,GAHIE,EAASa,uBACTJ,GAAmB,GAEnBT,EAASY,YAAcD,EACvBX,EAAWA,EAASY,eAGpB,KADAZ,EAAWA,EAASU,IAEhB,MAAM,IAAIN,MAAM,eAAQN,EAAI,gBAGpC,IAAKW,EAAkB,CACnB,QAAmBP,IAAfH,EACA,MAAM,IAAIK,MAAM,eAAQN,EAAI,gBAE3Ba,IACDZ,EAAaA,aAAU,EAAVA,EAAaW,GAElC,EAEIV,EAASc,YAAcH,KACvBV,EAASF,EAEjB,CAEA,MAAO,CACHgB,OAAQd,EACRe,KAAMhB,EAEd,EACJ,EApFA,GC+6BA,SAASiB,EAAYC,EAAqBC,EAAcC,EAAgCC,GACpF,IAAMC,EAAkBC,EAAaL,GACrC,OAAOG,EAAkBC,EAAgBF,GAAaC,GAAmBC,EAAgBF,EAC7F,CACA,SAASG,EAAaL,EAAqBM,EAAiBL,G,UACxD,OAAiF,QAA1E,EAAc,QAAd,EAAAD,EAASO,aAAK,eAAoB,QAAjB,EAAAN,aAAO,EAAPA,EAASO,gBAAQ,QAAI,EAAAC,UAAUC,kCAA0B,eAAEN,eACvF,CACA,SAASO,EAAoBT,EAAgCC,GACzD,MAAO,CACHS,OAAQ,CACJC,gBAAiB,EAEjBC,KAAM,UACNC,IAAK,SAACf,EAAUM,EAASL,GACrB,IAAMe,EAAUjB,EAAYC,EAAUC,EAASC,EAAaC,GAC5D,OAAO,IAAI,EAAAc,QAAQD,aAAO,EAAPA,EAASE,QAASF,aAAO,EAAPA,EAASG,QAClD,EACAC,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAUM,EAASL,GAC5B,IAAMe,EAAUjB,EAAYC,EAAUC,EAASC,EAAaC,GAC3Da,EAAQE,QAAUpE,EAAMwE,EAAKN,EAAQG,QAAUrE,EAAMW,CAC1D,EACA8D,gBAAiB,CACb,WAAM,gBAAGrB,GAAW,OAAGC,EAAkB,IAAMA,EAAkB,GAAE,WAA7D,EACN,WAAM,gBAAGD,GAAW,OAAGC,EAAkB,IAAMA,EAAkB,GAAE,WAA7D,IAGdqB,SAAU,CACNV,KAAM,SACNC,IAAK,SAACf,EAAUM,EAASL,GAAQ,MAAK,OAA4D,QAA5D,EAAAF,EAAYC,EAAUC,EAASC,EAAaC,UAAgB,eAAEsB,IAAI,EACxGL,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAUM,EAASL,GAAa,OAACF,EAAYC,EAAUC,EAASC,EAAaC,GAAiBsB,KAAO3E,CAArE,EAC7CyE,gBAAiB,CAAC,WAAM,gBAAGrB,GAAW,OAAGC,EAAkB,IAAMA,EAAkB,GAAE,QAA7D,IAE5BuB,MAAO,CACHb,gBAAiB,EACjBC,KAAM,UACNC,IAAK,SAACf,EAAUM,EAASL,GACrB,IAAMe,EAAUjB,EAAYC,EAAUC,EAASC,EAAaC,GAC5D,OAAO,IAAI,EAAAc,QAAQD,aAAO,EAAPA,EAASW,OAAQX,aAAO,EAAPA,EAASY,OACjD,EACAR,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAQ5B,GAC3B,IAAMe,EAAUjB,EAAYC,EAAUC,EAASC,EAAaC,GAC3Da,EAAQW,OAAS7E,EAAMwE,EAAKN,EAAQY,OAAS9E,EAAMW,CACxD,EACA8D,gBAAiB,CACb,WAAM,gBAAGrB,GAAW,OAAGC,EAAkB,IAAMA,EAAkB,GAAE,UAA7D,EACN,WAAM,gBAAGD,GAAW,OAAGC,EAAkB,IAAMA,EAAkB,GAAE,UAA7D,IAItB,CAEA,IAAM2B,EAA2C,CAC7CC,QAplBmD,CACnDrC,UAAW,CACPE,YAAY,EACZoC,aAAc,CACVC,KAAM,CACFpB,gBAAiB,EACjBC,KAAM,UACNC,IAAK,SAACmB,GAAM,YAAK,WAAI,EAAAjB,QAAwC,QAAhC,EAAqB,QAArB,EAAAiB,EAAOC,sBAAc,eAAEC,iBAAS,QAAI,EAAoC,QAAjC,EAAqB,QAArB,EAAAF,EAAOC,sBAAc,eAAEE,kBAAU,QAAI,EAAE,EAC3GhB,IAAK,SAACvE,EAAOoF,GACLA,EAAOC,iBACPD,EAAOC,eAAeC,UAAYtF,EAAMwE,EACxCY,EAAOC,eAAeE,WAAavF,EAAMW,EAEjD,EACA2D,UAAW,SAACc,GAAW,OAAAA,CAAA,EACvBX,gBAAiB,CAAC,WAAM,mBAAa,WAAM,sBAE/Ce,KAAM,CACFzB,gBAAiB,EACjBC,KAAM,UACNC,IAAK,SAACmB,GAAe,YAAK,WAAI,EAAAjB,QAA0C,QAAlC,EAAqB,QAArB,EAAAiB,EAAOC,sBAAc,eAAEI,mBAAW,QAAI,EAAkC,QAA/B,EAAqB,QAArB,EAAAL,EAAOC,sBAAc,eAAEK,gBAAQ,QAAI,EAAE,EACpHnB,IAAK,SAACvE,EAAgBoF,GACdA,EAAOC,iBACPD,EAAOC,eAAeI,YAAczF,EAAMwE,EAC1CY,EAAOC,eAAeK,SAAW1F,EAAMW,EAE/C,EACA2D,UAAW,SAACc,GAAW,OAAAA,CAAA,EACvBX,gBAAiB,CAAC,WAAM,qBAAe,WAAM,oBAEjDkB,KAAM,CACF3B,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAEO,IAAI,EACrDrB,IAAK,SAACvE,EAAeoF,GACbA,EAAOC,iBACPD,EAAOC,eAAeO,KAAO5F,EAErC,EACAsE,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,gBAE5BoB,MAAO,CACH7B,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAES,IAAI,EACrDvB,IAAK,SAACvE,EAAeoF,GACbA,EAAOC,iBACPD,EAAOC,eAAeS,KAAO9F,EAErC,EACAsE,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,iBAGhCsB,YAAa,CACTC,YAAa,CACThC,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAEY,YAAYC,eAAed,EAAOC,eAAe,EAClGf,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,sBACxB0B,YAAY,GAEhBC,KAAM,CACFpC,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAEgB,GAAG,EACpD9B,IAAK,SAACvE,EAAeoF,GACbA,EAAOC,iBACPD,EAAOC,eAAegB,IAAMrG,EAEpC,EACAsE,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,eAE5BkB,KAAM,CACF3B,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAEO,IAAI,EACrDrB,IAAK,SAACvE,EAAeoF,GACbA,EAAOC,iBACPD,EAAOC,eAAeO,KAAO5F,EAErC,EACAsE,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,gBAE5BoB,MAAO,CACH7B,KAAM,SACNC,IAAK,SAACmB,GAAe,MAAK,OAAqB,QAArB,EAAAA,EAAOC,sBAAc,eAAES,IAAI,EACrDvB,IAAK,SAACvE,EAAeoF,GACbA,EAAOC,iBACPD,EAAOC,eAAeS,KAAO9F,EAErC,EACAsE,UAAW,SAACc,GAAoB,OAAAA,CAAA,EAChCX,gBAAiB,CAAC,WAAM,mBAyfpChH,MAluB+C,CAC/C4B,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACxG,GAAmB,OAAAA,EAAM4B,MAAN,EACzBiF,UAAW,SAAC7G,GAAmB,OAAAA,EAAML,KAAI,SAACkJ,GAAS,OAAAA,EAAK3I,qBAAL,GAApB,EAC/B8G,gBAAiB,CAAC,WAAM,kBAE5B7B,UAAW,CACPE,YAAY,EACZyD,YAAa,CACTvC,KAAM,UACNC,IAAK,SAACqC,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAE6I,QAAQ,EAC1DjC,IAAK,SAACvE,EAAgBsG,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAE6I,SAASC,SAASzG,EAAM,EAC1FsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,oBAE5BC,SAAU,CACNV,KAAM,aACNC,IAAK,SAACqC,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAE+I,kBAAmB,EACrEnC,IAAK,SAACvE,EAAmBsG,GAAW,QAAK,OAA8C,QAA9C,EAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAE+I,0BAAkB,eAAED,SAASzG,EAAM,EACxGsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,8BAE5BG,MAAO,CACHZ,KAAM,UACNC,IAAK,SAACqC,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEgJ,OAAO,EACzDpC,IAAK,SAACvE,EAAgBsG,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEgJ,QAAQF,SAASzG,EAAM,EACzFsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,mBAE5BmC,QAAS,CACLvH,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACqC,GAAgB,OAAAA,EAAKO,gBAAL,EACtBvC,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,qBAE5B7B,UAAW,CACPE,YAAY,EACZkB,KAAM,SACNC,IAAK,SAACqC,EAAavB,GAAc,QAAK,YAAW7C,IAAV6C,EAA0E,QAApD,EAA4B,QAA5B,EAAAuB,EAAKQ,+BAAuB,eAAG,GAAGC,0BAAkB,eAAEzC,UAAUS,GAAOiC,eAAY9E,CAAU,EAE1JoC,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,qBAE5BT,KAAM,WACNC,IAAK,SAACqC,EAAavB,GAAmB,OAAC,EAAD,EAEtCT,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,qBAG5BwC,OAAQ,CACJjD,KAAM,SACNC,IAAK,SAACqC,GAAW,UAAK,SAAAY,OAAOC,QAAkC,QAA1B,EAAAb,EAAK3I,6BAAqB,eAAEgJ,QAAoC,QAA1B,EAAAL,EAAK3I,6BAAqB,eAAE+I,mBAA+C,QAA1B,EAAAJ,EAAK3I,6BAAqB,eAAE6I,SAAU,EAClKlC,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5BwI,YAAY,GAEhBiB,aAAc,CACVpD,KAAM,SACNC,IAAK,SAACqC,GAIF,I,kBAHMW,EAAS,EAAAC,OAAOG,WAElBC,EAAWhB,EAAKiB,OACbD,GAAYA,EAASC,QACxBD,EAAWA,EAASC,OAExB,IAAMC,GACwB,QAA1B,EAAAlB,EAAK3I,6BAAqB,eAAE6I,SAASiB,YAA0D,QAA9C,EAA0B,QAA1B,EAAAnB,EAAK3I,6BAAqB,eAAE+I,0BAAkB,eAAEe,YAAsC,QAA1B,EAAAnB,EAAK3I,6BAAqB,eAAEgJ,QAAQc,UACrJ,GAAIH,EAAU,CAGV,IAAMI,EAA2C,QAA9B,EAAAJ,EAAS3J,6BAAqB,eAAEgK,oBAAmB,GAAMC,SACxEF,IAC2D,QAA3D,EAA0B,QAA1B,EAAApB,EAAK3I,6BAAqB,eAAEgK,mBAAmBH,UAAY,SAAEK,cAAcH,EAAYT,GAE/F,MAAWX,EAAK3I,uBACZsJ,EAAOR,SAASH,EAAK3I,sBAAsBgK,mBAAmBH,IAElE,OAAOP,CACX,EACA3C,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5BwI,YAAY,GAEhB2B,WAAY,CACRC,eAAgB,CACZC,WAAY,CACRhE,KAAM,SACNC,IAAK,SAACqC,G,QACF,OAA8F,QAAvF,EAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,UAAE,eAAEC,SACpG,EACA9D,UAAW,SAACgC,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,EAAE,EACnH5D,IAAK,SAACvE,EAAOsG,GACT,GAAIA,EAAK3I,sBAAuB,CAC5B,IAAM0K,EAAQ/B,EAAK3I,sBAAsBsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,GAC9FE,IACAA,EAAMD,UAAYpI,EAE1B,CACJ,GAEJsI,MAAO,CACHtE,KAAM,SACNC,IAAK,SAACqC,G,QACF,OAA8F,QAAvF,EAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,UAAE,eAAEI,OACpG,EACAjE,UAAW,SAACgC,GAAW,MAAK,OAA0B,QAA1B,EAAAA,EAAK3I,6BAAqB,eAAEsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,EAAE,EACnH5D,IAAK,SAACvE,EAAOsG,GACT,GAAIA,EAAK3I,sBAAuB,CAC5B,IAAM0K,EAAQ/B,EAAK3I,sBAAsBsK,aAAY,SAACC,GAAU,OAAAA,aAAiB,EAAAC,SAAjB,IAA4B,GAAM,GAC9FE,IACAA,EAAME,QAAUvI,EAExB,CACJ,OAinBhBwI,UApfuD,CACvD5F,UAAW,CACPE,YAAY,EACZ2F,eAAgB,CACZzE,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASuF,aAAvC,EACrCnE,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASuF,cAAcjC,SAASzG,EAA9D,EACpDsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,yBAE5BkE,gBAAiB,CACbb,WAAY,CACRc,sBAAuB/E,EAAoB,qBAGnDgF,cAAe,CACXjE,MAAO,CACHZ,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAQ,MAAK,OAA6C,QAA7C,EAAAF,EAAYC,EAAUC,EAAS,sBAAc,eAAE2F,KAAK,EACzFvE,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GACnC,IAAMe,EAAUjB,EAAYC,EAAUC,EAAS,eAC3Ce,IACAA,EAAQ4E,MAAQ9I,EAExB,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,iBAE5BqD,WAAY,CACRc,sBAAuB/E,EAAoB,iBAGnDkF,iBAAkB,CACdC,SAAU,CACNhF,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS8F,sBAAvC,EACrC1E,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GACnC,IAAM+F,EAAM3F,EAAaL,EAAU6B,EAAO5B,GACtC+F,IACAA,EAAID,uBAAyBjJ,EAErC,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,kCAE5BqD,WAAY,CACRc,sBAAuB/E,EAAoB,oBAGnDsF,qBAAsB,CAClBC,gBAAiB,CACbpF,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GACpB,IAAM+F,EAAM3F,EAAaL,EAAU6B,EAAO5B,GAC1C,OAAO,EAAAkG,OAAOC,WAAWJ,EAAIK,YAAaL,EAAIM,MAClD,EACAjF,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GACnC,IAAM+F,EAAM3F,EAAaL,EAAU6B,EAAO5B,GAC1C+F,EAAIK,YAAYhF,IAAIvE,EAAMyJ,EAAGzJ,EAAMiB,EAAGjB,EAAMhC,GAC5CkL,EAAIM,MAAQxJ,EAAM3C,CACtB,EACAiH,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAE3CsB,gBAAiB,CAAC,WAAM,qBAAe,WAAM,iBAEjDiF,iBAAkB,CACd5B,WAAY,CACRc,sBAAuB/E,EAAoB,mBAGnD8F,eAAgB,CACZ3F,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASyG,QAAvC,EACrCrF,IAAK,SAACvE,EAAOkD,EAAU6B,EAAQ5B,GAC3B,IAAM+F,EAAM3F,EAAaL,EAAU6B,EAAO5B,GACtC+F,IACAA,EAAIU,SAAW5J,EAEvB,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,oBAE5BoF,gBAAiB,CACb7F,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS2G,SAAvC,EACrCvF,IAAK,SAACvE,EAAOkD,EAAU6B,EAAQ5B,GAC3B,IAAM+F,EAAM3F,EAAaL,EAAU6B,EAAO5B,GACtC+F,IACAA,EAAIY,UAAY9J,EAExB,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,qBAE5BsF,yBAA0B,CACtBjC,WAAY,CACRc,sBAAuB/E,EAAoB,sBAIvDiE,WAAY,CACRkC,yBAA0B,CACtBC,mBAAoB,CAChBjG,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS+G,WAAW9B,SAAlD,EACrC7D,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GACnCI,EAAaL,EAAU6B,EAAO5B,GAAS+G,WAAW9B,UAAYpI,CAClE,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,gCAE5B0F,mBAAoB,CAChBnG,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS+G,WAAWE,KAAlD,EACrC7F,IAAK,SAACvE,EAAekD,EAAU6B,EAAQ5B,GACnCI,EAAaL,EAAU6B,EAAO5B,GAAS+G,WAAWE,MAAQpK,CAC9D,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,4BAE5B4F,kBAAmB,CACfvC,WAAY,CACRc,sBAAuB/E,EAAoB,aAAc,cAIrEyG,wBAAyB,CACrBC,gBAAiB,CACbvG,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUpC,SAAjD,EACrC7D,IAAK,SAACvE,EAAOkD,EAAU6B,EAAQ5B,GAC3BI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUpC,UAAYpI,CACjE,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,+BAE5BgG,yBAA0B,CACtBzG,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUV,SAAjD,EACrCvF,IAAK,SAACvE,EAAOkD,EAAU6B,EAAQ5B,GAC3BI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUV,UAAY9J,CACjE,EACAsE,UAAW,SAACpB,EAAU6B,EAAQ5B,GAAa,OAAAI,EAAaL,EAAU6B,EAAO5B,EAA9B,EAC3CsB,gBAAiB,CAAC,WAAM,+BAE5BiG,iBAAkB,CACd5C,WAAY,CACRc,sBAAuB/E,EAAoB,YAAa,aAGhE8G,uBAAwB,CACpB/F,MAAO,CACHZ,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAO,MAAK,OAA4D,QAA5D,EAAAI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUI,mBAAW,eAAE9B,KAAK,EACtGxE,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASqH,UAAUI,YAAa9B,MAAQ9I,CAAvE,GAE9C8H,WAAY,CACRc,sBAAuB/E,EAAoB,YAAa,iBAGhEgH,0BAA2B,CACvB/C,WAAY,CACRc,sBAAuB/E,EAAoB,YAAa,uBAIpEiH,yBAA0B,CACtBC,WAAY,CACR/G,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWD,UAAlD,EACnCzG,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWD,WAAa/K,CAAhE,IAGlDiL,gCAAiC,CAC7BC,iBAAkB,CACdlH,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASgI,iBAAvC,EACnC7G,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASgI,kBAAoBnL,CAA5D,IAGlDoL,kBAAmB,CACfC,IAAK,CACDrH,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASmI,iBAAvC,EACnChH,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASmI,kBAAoBtL,CAA5D,IAGlDuL,0BAA2B,CACvBC,kBAAmB,CACfxH,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYrD,SAAnD,EACnC9D,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYrD,UAAYpI,CAAhE,GAE9C0L,eAAgB,CACZ1H,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYH,iBAAnD,EACnChH,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYH,kBAAoBtL,CAAxE,GAE9C2L,mBAAoB,CAChB7D,WAAY,CACRc,sBAAuB/E,EAAoB,cAAe,aAGlE+H,4BAA6B,CACzB5H,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYI,gBAAnD,EACnCvH,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYI,iBAAmB7L,CAAvE,GAE9C8L,4BAA6B,CACzB9H,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYM,gBAAnD,EACnCzH,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASsI,YAAYM,iBAAmB/L,CAAvE,GAE9CgM,4BAA6B,CACzBlE,WAAY,CACRc,sBAAuB/E,EAAoB,cAAe,uBAItEoI,oBAAqB,CACjBC,iBAAkB,CACdlI,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASgJ,MAAM7D,KAA7C,EACnChE,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASgJ,MAAM7D,MAAM7B,SAASzG,EAA5D,GAE9CoM,kBAAmB,CACftE,WAAY,CACRc,sBAAuB/E,EAAoB,QAAS,aAG5DwI,qBAAsB,CAClBrI,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASgJ,MAAM/D,SAA7C,EACnC9D,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASgJ,MAAM/D,UAAYpI,CAA1D,GAE9CsM,sBAAuB,CACnBxE,WAAY,CACRc,sBAAuB/E,EAAoB,QAAS,uBAIhE0I,uBAAwB,CACpBC,eAAgB,CACZxI,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASsJ,gBAAvC,EACnCnI,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAASsJ,iBAAmBzM,CAA3D,EAC1CyE,gBAAiB,CAAC,WAAM,4BAE5BiI,oBAAqB,CACjB1I,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASwJ,wBAAvC,EACnCrI,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAASwJ,yBAAyBlG,SAASzG,EAAzE,EAC1CyE,gBAAiB,CAAC,WAAM,oCAE5BmI,gBAAiB,CACb9E,WAAY,CACRc,sBAAuB/E,EAAoB,gCAGnDgJ,qBAAsB,CAClB/E,WAAY,CACRc,sBAAuB/E,EAAoB,yBAIvDiJ,2BAA4B,CACxBC,mBAAoB,CAChB/I,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWgC,mBAAlD,EACnC1I,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWgC,oBAAsBhN,CAAzE,EAC1CyE,gBAAiB,CAAC,WAAM,0CAE5BwI,oBAAqB,CACjBnF,WAAY,CACRc,sBAAuB/E,EAAoB,aAAc,iCAIrEqJ,mCAAoC,CAChCC,0BAA2B,CACvBnJ,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWoC,qBAAlD,EACnC9I,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWoC,sBAAwBpN,CAA3E,GAE9CqN,2BAA4B,CACxBvF,WAAY,CACRc,sBAAuB/E,EAAoB,aAAc,kCAGjEyJ,+BAAgC,CAC5BtJ,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWuC,iBAAlD,EACnCjJ,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAO,MAAK,OAAAnD,IAA4E,QAAnE,EAAAuD,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWuC,yBAAiB,eAAE9G,SAASzG,GAAM,GAE3IwN,gCAAiC,CAC7B1F,WAAY,CACRc,sBAAuB/E,EAAoB,aAAc,+BAIrE4J,qBAAsB,CAClBC,iBAAkB,CACd1J,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAW2C,SAAlD,EACnCrJ,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAW2C,UAAUlH,SAASzG,EAArE,GAE9C4N,oBAAqB,CACjB5J,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAW6C,mBAAlD,EACnCvJ,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAW6C,oBAAsB7N,CAAzE,GAE9C8N,gBAAiB,CACb9J,KAAM,SACNC,IAAK,SAACf,EAAU6B,EAAO5B,GAAY,OAAAI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWa,gBAAlD,EACnCvH,UAAWf,EACXgB,IAAK,SAACvE,EAAOkD,EAAU6B,EAAO5B,GAAY,OAACI,EAAaL,EAAU6B,EAAO5B,GAAS6H,WAAWa,iBAAmB7L,CAAtE,GAE9C+N,iBAAkB,CACdjG,WAAY,CACRc,sBAAuB/E,EAAoB,aAAc,0BAqK7EiE,WA7JyD,CACzDkG,oBAAqB,CACjBC,OAAQ,CACJ5O,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACgK,GAAuC,OAAAA,EAAO5O,MAAP,EAC7CiF,UAAW,SAAC2J,GAAuC,OAAAA,EAAO7Q,KAAI,SAACiL,GAAU,OAAAA,EAAM6F,aAAN,GAAtB,EACnDzJ,gBAAiB,CAAC,SAAC0J,GAAwC,kBAE/DvL,UAAW,CACPE,YAAY,EACZwF,MAAO,CACHtE,KAAM,SACNC,IAAK,SAACoE,GAA+B,MAAK,OAAmB,QAAnB,EAAAA,EAAM6F,qBAAa,eAAE3F,OAAO,EACtEhE,IAAK,SAACvE,EAAeqI,GAA+B,MAAK,OAAmB,QAAnB,EAAAA,EAAM6F,qBAAa,eAAE3F,QAAQ9B,SAASzG,EAAM,EACrGsE,UAAW,SAAC+D,GAAoC,OAAAA,EAAM6F,aAAN,EAChDzJ,gBAAiB,CAAC,SAAC2J,GAAqC,mBAE5DhG,UAAW,CACPpE,KAAM,SACNC,IAAK,SAACoE,GAA+B,MAAK,OAAmB,QAAnB,EAAAA,EAAM6F,qBAAa,eAAE9F,SAAS,EACxE7D,IAAK,SAACvE,EAAeqI,GAAoC,OAACA,EAAM6F,cAAiB7F,EAAM6F,cAAc9F,UAAYpI,OAASkC,CAAjE,EACzDoC,UAAW,SAAC+D,GAAoC,OAAAA,EAAM6F,aAAN,EAChDzJ,gBAAiB,CAAC,SAAC2J,GAAqC,qBAE5DC,MAAO,CACHrK,KAAM,SACNC,IAAK,SAACoE,GAA+B,MAAK,OAAmB,QAAnB,EAAAA,EAAM6F,qBAAa,eAAEG,KAAK,EACpE9J,IAAK,SAACvE,EAAeqI,GAAoC,OAACA,EAAM6F,cAAiB7F,EAAM6F,cAAcG,MAAQrO,OAASkC,CAA7D,EACzDoC,UAAW,SAAC+D,GAAoC,OAAAA,EAAM6F,aAAN,EAChDzJ,gBAAiB,CAAC,SAAC2J,GAAqC,iBAE5DE,KAAM,CACFC,eAAgB,CACZvK,KAAM,SACNC,IAAK,SAACoE,GAA+B,MAAK,OAAkC,QAAlC,EAACA,EAAM6F,qBAA2B,eAAEM,UAAU,EACxFjK,IAAK,SAACvE,EAAeqI,GAAoC,OAACA,EAAM6F,cAAkB7F,EAAM6F,cAA4BM,WAAaxO,OAASkC,CAAjF,EACzDoC,UAAW,SAAC+D,GAAoC,OAAAA,EAAM6F,aAAN,EAChDzJ,gBAAiB,CAAC,SAAC2J,GAAqC,0BAE5DK,eAAgB,CACZzK,KAAM,SACNC,IAAK,SAACoE,GAA+B,MAAK,OAAkC,QAAlC,EAACA,EAAM6F,qBAA2B,eAAE9D,KAAK,EACnF7F,IAAK,SAACvE,EAAeqI,GAAoC,OAACA,EAAM6F,cAAkB7F,EAAM6F,cAA4B9D,MAAQpK,OAASkC,CAA5E,EACzDoC,UAAW,SAAC+D,GAAoC,OAAAA,EAAM6F,aAAN,EAChDzJ,gBAAiB,CAAC,SAAC2J,GAAqC,8BAM5ErG,eAAgB,CACZkG,OAAQ,CACJ5O,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACgK,GAAuC,OAAAA,EAAO5O,MAAP,EAC7CiF,UAAW,SAAC2J,GAAuC,OAAAA,EAAO7Q,KAAI,SAACiL,GAAU,OAAAA,EAAM6F,aAAN,GAAtB,EACnDzJ,gBAAiB,CAAC,SAAC0J,GAAwC,oBAIvEO,uBAAwB,CACpBT,OAAQ,CACJ5O,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACgK,GAAW,OAAAA,EAAO5O,MAAP,EACjBiF,UAAW,SAAC2J,GAAW,OAAAA,EAAO7Q,KAAI,SAACiL,GAAU,OAAAA,EAAMsG,eAAN,GAAtB,EACvBlK,gBAAiB,CAAC,SAAC0J,GAAY,kBAEnCvL,UAAW,CACPE,YAAY,EACZsF,UAAW,CACPpE,KAAM,SACNC,IAAK,SAACoE,GAAK,MAAK,OAAqB,QAArB,EAAAA,EAAMsG,uBAAe,eAAE7F,KAAK,EAC5CvE,IAAK,SAACvE,EAAOqI,GACLA,EAAMsG,kBAAiBtG,EAAMsG,gBAAgB7F,MAAQ9I,EAC7D,EAEAsE,UAAW,SAAC+D,GAAU,OAAAA,EAAMsG,eAAN,GAE1BjK,SAAU,CACNV,KAAM,aACNC,IAAK,SAACoE,GAAK,MAAK,OAAAA,EAAMsG,iBAAmB,EAAAC,WAAWC,mBAAwC,QAArB,EAAAxG,EAAMsG,uBAAe,eAAEG,6BAA6B,EAC3HvK,IAAK,SAACvE,EAAOqI,G,MACJA,EAAMsG,mBAE0B,QAAhC,EAAAtG,EAAMsG,gBAAgBI,kBAAU,eAAEC,wBACnChP,EAAQ,EAAA4O,WAAWK,QAAQjP,IAG/B,EAAAkH,OAAOgI,oBAAoBlP,EAAOqI,EAAMsG,gBAAgBG,8BAC5D,EACAxK,UAAW,SAAC+D,GAAU,OAAAA,EAAMsG,eAAN,OAkEtCxR,WA5mBmB,CACnBkC,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAAC9G,GAA6B,OAAAA,EAAWkC,MAAX,EACnCiF,UAAW,SAACnH,GAA6B,OAAAA,EAAWC,KAAI,SAAC+R,GAAc,OAAAA,EAAU7R,sBAAV,GAA9B,EACzCmH,gBAAiB,CAAC,WAAM,kBAE5B7B,UAAW,CAAC,GAsmBZwM,OAnmBe,CACf/P,OAAQ,CACJ2E,KAAM,SACNC,IAAK,SAACmL,GAAoB,OAAAA,EAAO/P,MAAP,EAC1BiF,UAAW,SAAC8K,GAAoB,OAAAA,EAAOhS,KAAI,SAACiS,GAAI,MAAK,OAAgC,QAAhC,EAAAA,EAAKC,WAAW,GAAGC,qBAAa,eAAEC,iBAAiB,GAAxE,EAChC/K,gBAAiB,CAAC,WAAM,kBAE5B7B,UAAW,CAAC,IAomBT,SAAS6M,EAAyBC,GACrC,OAAO,IAAIC,EAA0BD,EAAM1K,EAC/C,CAQO,SAAS4K,EAAiBC,GAI7B,IAFA,IAAMC,EAAWD,EAAIvN,MAAM,KAAKlF,KAAI,SAACsF,GAAS,OAAAA,EAAKqN,QAAQ,MAAO,YAApB,IAC1CC,EAAUhL,EACK,MAAA8K,EAAA,eAAU,CAAxB,IAAMpN,EAAI,KAENA,IAGLsN,EAAUA,EAAQtN,GACtB,CAEA,GAAIsN,GAAWA,EAAQhM,MAAQgM,EAAQ/L,IACnC,OAAO+L,CAGf,CAOO,SAASC,EAAuBJ,EAAaK,GAIhD,IAFA,IAAMJ,EAAWD,EAAIvN,MAAM,KAAKlF,KAAI,SAACsF,GAAS,OAAAA,EAAKqN,QAAQ,MAAO,YAApB,IAC1CC,EAAUhL,EACK,MAAA8K,EAAA,eAAU,CAAxB,IAAMpN,EAAI,KAENA,IAGLsN,EAAUA,EAAQtN,GACtB,CAEIsN,GAAWA,EAAQhM,MAAQgM,EAAQ/L,MAClC+L,EAA4BE,cAAgBA,EAErD,CAQO,SAASC,EACZN,EACAO,GAKA,IAFA,IAAMN,EAAWD,EAAIvN,MAAM,KAAKlF,KAAI,SAACsF,GAAS,OAAAA,EAAKqN,QAAQ,MAAO,YAApB,IAC1CC,EAAUhL,EACK,MAAA8K,EAAA,eAAU,CAAxB,IAAMpN,EAAI,KAEX,GAAKA,EAAL,CAGA,IAAKsN,EAAQtN,GAAO,CAChB,GAAa,MAATA,EAAc,CACdsN,EAAQnN,sBAAuB,EAC/B,QACJ,CACAmN,EAAQtN,GAAQ,CAAC,EAEJ,cAATA,IACAsN,EAAQtN,GAAMI,YAAa,EAEnC,CACAkN,EAAUA,EAAQtN,EAZlB,CAaJ,CACAzE,OAAOe,OAAOgR,EAASI,EAC3B,C,4NCrkCO,SAASC,EAAWC,EAAcC,EAAsBzM,EAAgBc,GAC3E,OAAO,EAAA4L,QAAQC,UAAUF,EAAQzM,GAAQ4M,aAAa9L,EAC1D,CAGO,SAAS+L,EAAcL,EAAcC,EAAsBzM,EAAgBc,GAC9E,OAAO,EAAAgK,WAAW6B,UAAUF,EAAQzM,GAAQ4M,aAAa9L,EAC7D,CAGO,SAASgM,EAAW3O,EAAesO,EAAsBzM,EAAgBc,GAE5E,IADA,IAAM5E,EAAQ,IAAI5B,MAAc6D,EAAO4E,kBAC9B1H,EAAI,EAAGA,EAAIa,EAAMX,OAAQF,IAC9Ba,EAAMb,GAAKoR,EAAOzM,KAAYc,EAGlC,OAAO5E,CACX,CAGA,iBAEI,WACoBgE,EACA6M,EACAC,EACAC,GAHA,KAAA/M,KAAAA,EACA,KAAA6M,KAAAA,EACA,KAAAC,SAAAA,EACA,KAAAC,UAAAA,CACjB,CAUP,OARc,YAAAC,gBAAV,SAA0BH,EAAcI,EAAaC,GACjD,IAAMC,EAAmB,IAAI,EAAAC,UAAUP,EAAMjU,KAAKiU,KAAMI,EAAKrU,KAAKoH,MAElE,OADAmN,EAAiBE,QAAQH,GAClBC,CACX,EAIJ,EAjBA,GAoBA,2B,8CAOA,QAPwD,aAE7C,YAAAG,gBAAP,SAAuBrP,EAAe4O,EAAcI,EAAaC,GAC7D,IAAMK,EAAuF,GAE7F,OADAA,EAAkB9P,KAAK,CAAE+P,kBAAmBvP,EAAOtE,sBAAwBwT,iBAAkBvU,KAAKoU,gBAAgBH,EAAMI,EAAKC,KACtHK,CACX,EACJ,EAPA,CAAwDE,GAUxD,2B,8CA8BA,QA9BiD,aACtC,YAAAH,gBAAP,SAAuBrP,EAAe4O,EAAcI,EAAaC,GAC7D,IAAMK,EAAuF,GAC7F,GAAItP,EAAO4E,iBACP,I,eAAS6K,GACL,IAAMP,EAAmB,IAAI,EAAAC,UAAU,UAAGP,EAAI,YAAIa,GAAe,EAAKb,KAAMI,EAAK,EAAKjN,MAWtF,GAVAmN,EAAiBE,QACbH,EAAK9T,KAAI,SAACyS,GAAQ,OACd8B,MAAO9B,EAAI8B,MACXC,UAAW/B,EAAI+B,UAAY/B,EAAI+B,UAAUF,QAAexP,EACxDlC,MAAO6P,EAAI7P,MAAM0R,GACjBG,WAAYhC,EAAIgC,WAAahC,EAAIgC,WAAWH,QAAexP,EAC3DgO,cAAeL,EAAIK,cALL,KASlBjO,EAAO6E,wBACP,IAA0B,UAAA7E,EAAO6E,wBAAP,eAAgC,CAArD,IAAMgL,EAAW,KAClB,GAAIA,EAAY/K,mBAAoB,CAChC,IAAMgL,EAAcD,EAAY/K,mBAAmBzC,UAAUoN,GACvDM,EAAwBb,EAAiBc,QAC/CF,EAAY5U,WAAWsE,KAAKuQ,GAC5BT,EAAkB9P,KAAK,CAAE+P,kBAAmBO,EAAaZ,iBAAkBa,GAC/E,CACJ,C,SApBCN,EAAc,EAAGA,EAAczP,EAAO4E,iBAAkB6K,I,EAAxDA,GAwBb,OAAOH,CACX,EACJ,EA9BA,CAAiDE,IAgCjD,QAAuB,wBAAyB,CAAC,IAAIS,EAAmC,EAAAd,UAAUe,sBAAuB,WAAY9B,GAAY,WAAM,eACvJ,QAAuB,qBAAsB,CAAC,IAAI6B,EAAmC,EAAAd,UAAUgB,yBAA0B,qBAAsBzB,GAAe,WAAM,eACpK,QAAuB,kBAAmB,CAAC,IAAIuB,EAAmC,EAAAd,UAAUe,sBAAuB,UAAW9B,GAAY,WAAM,eAChJ,QAAuB,oBAAqB,CAAC,IAAIgC,EAA4B,EAAAjB,UAAUkB,oBAAqB,YAAa1B,GAAY,SAAC3O,GAAW,OAAAA,EAAO4E,gBAAP,K,GC9F7I0L,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBvQ,IAAjBwQ,EACH,OAAOA,EAAarW,QAGrB,IAAIC,EAASiW,EAAyBE,GAAY,CAGjDpW,QAAS,CAAC,GAOX,OAHAsW,EAAoBF,GAAUnW,EAAQA,EAAOD,QAASmW,GAG/ClW,EAAOD,OACf,CCrBAmW,EAAoB9U,EAAKpB,IACxB,IAAIsW,EAAStW,GAAUA,EAAOuW,WAC7B,IAAOvW,EAAiB,QACxB,IAAM,EAEP,OADAkW,EAAoBzU,EAAE6U,EAAQ,CAAEvV,EAAGuV,IAC5BA,CAAM,ERNV7V,EAAWkB,OAAO6U,eAAkBC,GAAS9U,OAAO6U,eAAeC,GAASA,GAASA,EAAa,UAQtGP,EAAoBvT,EAAI,SAASe,EAAOgT,GAEvC,GADU,EAAPA,IAAUhT,EAAQpD,KAAKoD,IAChB,EAAPgT,EAAU,OAAOhT,EACpB,GAAoB,iBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAPgT,GAAahT,EAAM6S,WAAY,OAAO7S,EAC1C,GAAW,GAAPgT,GAAoC,mBAAfhT,EAAMO,KAAqB,OAAOP,CAC5D,CACA,IAAIiT,EAAKhV,OAAOa,OAAO,MACvB0T,EAAoB/I,EAAEwJ,GACtB,IAAIC,EAAM,CAAC,EACXpW,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,CAAC,GAAIA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIiT,EAAiB,EAAPgD,GAAYhT,EAAyB,iBAAXgQ,KAAyBlT,EAAeqW,QAAQnD,GAAUA,EAAUjT,EAASiT,GACxH/R,OAAOmV,oBAAoBpD,GAASqD,SAASxD,GAASqD,EAAIrD,GAAO,IAAO7P,EAAM6P,KAI/E,OAFAqD,EAAa,QAAI,IAAM,EACvBV,EAAoBzU,EAAEkV,EAAIC,GACnBD,CACR,ESxBAT,EAAoBzU,EAAI,CAAC1B,EAASiX,KACjC,IAAI,IAAIzD,KAAOyD,EACXd,EAAoBe,EAAED,EAAYzD,KAAS2C,EAAoBe,EAAElX,EAASwT,IAC5E5R,OAAOuV,eAAenX,EAASwT,EAAK,CAAE4D,YAAY,EAAMxP,IAAKqP,EAAWzD,IAE1E,ECND2C,EAAoBvR,EAAI,WACvB,GAA0B,iBAAfyS,WAAyB,OAAOA,WAC3C,IACC,OAAO9W,MAAQ,IAAI+W,SAAS,cAAb,EAChB,CAAE,MAAOxT,GACR,GAAsB,iBAAXyT,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBpB,EAAoBe,EAAI,CAACR,EAAKc,IAAU5V,OAAOK,UAAUC,eAAeC,KAAKuU,EAAKc,GCClFrB,EAAoB/I,EAAKpN,IACH,oBAAX+E,QAA0BA,OAAO0S,aAC1C7V,OAAOuV,eAAenX,EAAS+E,OAAO0S,YAAa,CAAE9T,MAAO,WAE7D/B,OAAOuV,eAAenX,EAAS,aAAc,CAAE2D,OAAO,GAAO,E,o5ICK9D,SAAS+T,EACLC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAwC,CAC1CC,yBAA0BF,GAO9B,OAJID,IACAE,EAAQE,IAAkB,UAAZL,EAAsBC,EAAWD,EAAUC,GAGtDK,YAAYC,OAAOR,GAAQS,cAAcC,cAAcV,EAAMI,GAAWK,cAAcE,eAAeX,EAAMI,EACtH,CAKA,SAASQ,IACL,IAAMC,EAAmG,GAEzGC,UAAY,SAACC,GACT,IAAMf,EAAOe,EAAQf,KACrB,OAAQA,EAAKgB,IACT,IAAK,OACDC,cAAcjB,EAAKkB,KACnB,MAEJ,IAAK,WACDnB,EACIC,EAAKA,KACLA,EAAKC,QACLD,EAAKE,UACL,SAACI,GACG,WAAI1U,SAAQ,SAACC,EAASC,GAClB,IAAMiF,EAAQ8P,EAAyBxV,OACvCwV,EAAyBpT,KAAK,CAAE5B,QAAO,EAAEC,OAAM,IAC/CqV,YAAY,CAAEH,GAAI,sBAAuBjQ,MAAOA,EAAOuP,IAAKA,GAChE,GAJA,IAKN/T,MACE,SAACP,GACGmV,YAAY,CAAEH,GAAI,mBAAoBhV,MAAOA,GACjD,IACA,SAACoV,GACGD,YAAY,CAAEH,GAAI,kBAAmBI,OAAQA,GACjD,IAEJ,MAEJ,IAAK,8BACDP,EAAyBb,EAAKjP,OAAOlF,QAAQmU,EAAKhU,OAClD,MAEJ,IAAK,6BACD6U,EAAyBb,EAAKjP,OAAOjF,OAAOkU,EAAKoB,QAI7D,CACJ,CAeA,ICVYC,EAeAC,EAwDAC,ED7DZ,0BAyFA,QAvEkB,EAAAC,cAAd,SACIxB,EACAC,EACAC,EACAC,GAJJ,WAMI,MAAsB,mBAAXsB,OACA,IAAI7V,SAAQ,SAACC,EAASC,GACzB,IAAM4V,EAAgB,UAAG3B,EAAa,YAAIa,EAAU,OAC9Ce,EAAgBC,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,GAAgB,CAAE1R,KAAM,4BACtE+R,EAAS,IAAIN,OAAOE,GAEpBK,EAAU,SAACC,GACbF,EAAOG,oBAAoB,QAASF,GACpCD,EAAOG,oBAAoB,UAAWC,GACtCrW,EAAOmW,EACX,EAEME,EAAY,SAACpB,GACf,IAAMf,EAAOe,EAAQf,KACrB,OAAQA,EAAKgB,IACT,IAAK,sBACDb,EAAoBH,EAAKM,KAAK/T,MAC1B,SAACP,GACG+V,EAAOZ,YAAY,CAAEH,GAAI,8BAA+BjQ,MAAOiP,EAAKjP,MAAO/E,MAAOA,GAAS,CAACA,EAAMoW,QACtG,IACA,SAAChB,GACGW,EAAOZ,YAAY,CAAEH,GAAI,6BAA8BjQ,MAAOiP,EAAKjP,MAAOqQ,OAAQA,GACtF,IAEJ,MAEJ,IAAK,mBACDW,EAAOG,oBAAoB,QAASF,GACpCD,EAAOG,oBAAoB,UAAWC,GACtCtW,EAAQmU,EAAKhU,OACb+V,EAAOM,YACP,MAEJ,IAAK,kBACDN,EAAOG,oBAAoB,QAASF,GACpCD,EAAOG,oBAAoB,UAAWC,GACtCrW,EAAOkU,EAAKoB,QACZW,EAAOM,YAGnB,EAOA,GALAN,EAAOO,iBAAiB,QAASN,GACjCD,EAAOO,iBAAiB,UAAWH,GAEnCJ,EAAOZ,YAAY,CAAEH,GAAI,OAAQE,IAAK,EAAAqB,MAAMC,oBAAoB,EAAKC,cAAcvB,OAE/EX,YAAYC,OAAOR,GAAO,CAE1B,IAAM0C,EAAa1C,EAAK2C,QACxBZ,EAAOZ,YAAY,CAAEH,GAAI,WAAYhB,KAAM0C,EAAYzC,QAASA,EAASC,SAAUA,GAAY,CAACwC,EAAWN,QAC/G,MACIL,EAAOZ,YAAY,CAAEH,GAAI,WAAYhB,KAAMA,EAAMC,QAASA,EAASC,SAAUA,GAErF,KAEKtX,KAAKga,qBACNha,KAAKga,mBAAqB,EAAAL,MAAMM,uBAAuBja,KAAK6Z,cAAcvB,MAGvEtY,KAAKga,mBAAmBrW,MAAK,WAChC,OAAOwT,EAAcC,EAAMC,EAASC,EAAUC,EAClD,IAER,EApFc,EAAAsC,cAA8C,CACxDvB,IAAK,UAAG,EAAAqB,MAAMO,eAAc,uBAoFpC,C,CAzFA,GEnFaC,EAAyB,SAEzBC,EACH,OADGA,EAGG,CAER,QAAS,CAAEC,UAAU,EAAOC,SAAU,mBAEtC,OAAQ,CAAED,UAAU,EAAMC,SAAU,sBDqC5C,SAASC,EAAUC,EAA0BC,EAAoBC,GAC7D,IACI,OAAO1X,QAAQC,QAAQ,IAAI0X,WAAWH,EAAaC,EAAYC,GACnE,CAAE,MAAOnX,GACL,OAAOP,QAAQE,OAAOK,EAC1B,CACJ,EAqBA,SAAYkV,GAIR,mBAKA,8CACH,CAVD,CAAYA,IAAAA,EAA8B,KAe1C,SAAYC,GAIR,mBAKA,qBAKA,gBACH,CAfD,CAAYA,IAAAA,EAA4B,KAwDxC,SAAYC,GAIR,yBAKA,qBAKA,0BACH,CAfD,CAAYA,IAAAA,EAAe,KAyC3B,IEhLYiC,EASAC,EAMAC,EAyBAC,EAOAC,EAUAC,EASAC,EAOAC,EFqTZ,cAWI,WAAmB3D,GACf,QAAK,YAAE,K,OAWJ,EAAA4D,mBAAqB,IAAI,EAAAC,WA+ChB,EAAAC,uBAAyB,IAAI,EAAAD,WAuB7B,EAAAE,uBAAyB,IAAI,EAAAF,WAoB7B,EAAAG,0BAA4B,IAAI,EAAAH,WAmBhC,EAAAI,2BAA6B,IAAI,EAAAJ,WAmBjC,EAAAK,yBAA2B,IAAI,EAAAL,WAqB/B,EAAAM,qBAAuB,IAAI,EAAAN,WAmB3B,EAAAO,kBAAoB,IAAI,EAAAP,WAiBxB,EAAAQ,oBAAsB,IAAI,EAAAR,WAkB1B,EAAAS,4BAA8B,IAAI,EAAAT,WA6D3C,EAAAU,UAAW,EAKF,EAAAC,sBAAwB,IAAI,EAAAX,WAcpC,EAAAY,QAAiC,KACjC,EAAAC,OAAoC,KAEpC,EAAAC,UAAY,IAAI3a,MAKR,EAAAyS,KAAOmG,EAGP,EAAAlP,WAAakP,EAqTtB,EAAAgC,+BAAiC,IAAI,EAAAf,WAuUpC,EAAAgB,gBAAkB,EAClB,EAAAC,iBAAkB,EAGnB,EAAAC,KAAO,EAAKC,aAsBX,EAAAC,6BAA8B,EAG/B,EAAAC,yBAA2B,EAAKC,iCAGhC,EAAAC,uBAAyB,EAAKC,+BA58BjC,EAAKhT,SAAS2N,G,CAClB,CAw9BJ,OAt+BoC,aA8BhC,sBAAW,uBAAQ,C,IAAnB,SAAoBsF,GACZ9c,KAAK+c,mBACL/c,KAAKob,mBAAmB4B,OAAOhd,KAAK+c,mBAEpCD,IACA9c,KAAK+c,kBAAoB/c,KAAKob,mBAAmB6B,IAAIH,GAE7D,E,gCAyCA,sBAAW,2BAAY,C,IAAvB,SAAwBA,GAChB9c,KAAKkd,uBACLld,KAAKsb,uBAAuB0B,OAAOhd,KAAKkd,uBAExCJ,IACA9c,KAAKkd,sBAAwBld,KAAKsb,uBAAuB2B,IAAIH,GAErE,E,gCAgBA,sBAAW,2BAAY,C,IAAvB,SAAwBA,GAChB9c,KAAKmd,uBACLnd,KAAKub,uBAAuByB,OAAOhd,KAAKmd,uBAExCL,IACA9c,KAAKmd,sBAAwBnd,KAAKub,uBAAuB0B,KAAI,SAAC7F,GAAS,OAAA0F,EAAS1F,EAAK1N,KAAM0N,EAAKgG,YAAzB,IAE/E,E,gCAYA,sBAAW,8BAAe,C,IAA1B,SAA2BN,GACnB9c,KAAKqd,0BACLrd,KAAKwb,0BAA0BwB,OAAOhd,KAAKqd,0BAE3CP,IACA9c,KAAKqd,yBAA2Brd,KAAKwb,0BAA0ByB,IAAIH,GAE3E,E,gCAYA,sBAAW,+BAAgB,C,IAA3B,SAA4BA,GACpB9c,KAAKsd,2BACLtd,KAAKyb,2BAA2BuB,OAAOhd,KAAKsd,2BAE5CR,IACA9c,KAAKsd,0BAA4Btd,KAAKyb,2BAA2BwB,IAAIH,GAE7E,E,gCAYA,sBAAW,6BAAc,C,IAAzB,SAA0BA,GAClB9c,KAAKud,yBACLvd,KAAK0b,yBAAyBsB,OAAOhd,KAAKud,yBAE1CT,IACA9c,KAAKud,wBAA0Bvd,KAAK0b,yBAAyBuB,IAAIH,GAEzE,E,gCAgBA,sBAAW,yBAAU,C,IAArB,SAAsBA,GACd9c,KAAKwd,qBACLxd,KAAK2b,qBAAqBqB,OAAOhd,KAAKwd,qBAE1Cxd,KAAKwd,oBAAsBxd,KAAK2b,qBAAqBsB,IAAIH,EAC7D,E,gCAYA,sBAAW,sBAAO,C,IAAlB,SAAmBA,GACX9c,KAAKyd,kBACLzd,KAAK4b,kBAAkBoB,OAAOhd,KAAKyd,kBAEvCzd,KAAKyd,iBAAmBzd,KAAK4b,kBAAkBqB,IAAIH,EACvD,E,gCAYA,sBAAW,wBAAS,C,IAApB,SAAqBA,GACb9c,KAAK0d,oBACL1d,KAAK6b,oBAAoBmB,OAAOhd,KAAK0d,oBAEzC1d,KAAK0d,mBAAqB1d,KAAK6b,oBAAoBoB,IAAIH,EAC3D,E,gCAaA,sBAAW,gCAAiB,C,IAA5B,SAA6BA,GACrB9c,KAAK2d,4BACL3d,KAAK8b,4BAA4BkB,OAAOhd,KAAK2d,4BAEjD3d,KAAK2d,2BAA6B3d,KAAK8b,4BAA4BmB,IAAIH,EAC3E,E,gCAKA,sBAAW,6BAAc,C,IAAzB,WACI,OAAO9c,KAAKsc,eAChB,E,IAEA,SAA0BlZ,GAClBpD,KAAKsc,kBAAoBlZ,IAI7BpD,KAAKsc,gBAAkBlZ,EAEnBpD,KAAKsc,gBACLtc,KAAKuc,KAAOvc,KAAK4d,YAEjB5d,KAAKuc,KAAOvc,KAAKwc,aAEzB,E,gCAKA,sBAAW,yCAA0B,C,IAArC,WACI,OAAOxc,KAAKyc,2BAChB,E,IAEA,SAAsCrZ,GAC9BpD,KAAKyc,8BAAgCrZ,IAIzCpD,KAAKyc,4BAA8BrZ,EAE/BpD,KAAKyc,6BACLzc,KAAK0c,yBAA2B1c,KAAK6d,gCACrC7d,KAAK4c,uBAAyB5c,KAAK8d,gCAEnC9d,KAAK0c,yBAA2B1c,KAAK2c,iCACrC3c,KAAK4c,uBAAyB5c,KAAK6c,gCAE3C,E,gCAiBA,sBAAW,0BAAW,C,IAAtB,SAAuBC,GACf9c,KAAK+d,sBACL/d,KAAKgc,sBAAsBgB,OAAOhd,KAAK+d,sBAE3C/d,KAAK+d,qBAAuB/d,KAAKgc,sBAAsBiB,IAAIH,EAC/D,E,gCAkBO,YAAAkB,QAAP,WACQhe,KAAKic,UACLjc,KAAKic,QAAQ+B,UACbhe,KAAKic,QAAU,MAGnB,IAAsB,UAAAjc,KAAKmc,UAAL,eAAJ,KACN8B,QAGZje,KAAKmc,UAAU1Z,OAAS,SAEjBzC,KAAKke,kBAEZle,KAAKme,mBAAqB,SAAC7F,GAAQ,OAAAtV,QAAQC,QAAQqV,EAAhB,EAEnCtY,KAAKsb,uBAAuB8C,QAC5Bpe,KAAKub,uBAAuB6C,QAC5Bpe,KAAKwb,0BAA0B4C,QAC/Bpe,KAAKyb,2BAA2B2C,QAChCpe,KAAK0b,yBAAyB0C,QAC9Bpe,KAAK2b,qBAAqByC,QAC1Bpe,KAAK8b,4BAA4BsC,QAEjCpe,KAAK6b,oBAAoBwC,qBAAgB/Y,GACzCtF,KAAK6b,oBAAoBuC,OAC7B,EAKO,YAAAE,SAAP,SACIC,EACAC,EACAnH,EACAoH,EACAC,EACAC,EACAvF,EACAnF,GARJ,WAUI,GAAI0D,YAAYC,OAAO4G,GAEnB,OADAxe,KAAK4e,YAAYL,EAAOC,EAA8BnH,EAASoH,EAAWrF,EAASnF,GAC5E,KAGXjU,KAAKke,kBAAoBQ,EAEzB,IAAMpH,EAAYkH,EAAmBvK,MAAQ,EAAA0F,MAAMkF,YAAYL,GAE/D,GAAIG,EAAgB,CAChB,GAAI3e,KAAK8e,iBAAkB,CACnB9e,KAAK+b,UACL,EAAAgD,OAAOC,KAAK,oEAGhB,IAAM,EAA4B,CAC9Bf,MAAO,WAAO,EACdtC,qBAAsB,IAAI,EAAAN,YAGxB4D,EAAa,CACf1E,UAAW,SAACE,EAAoBC,GAC5B,OAAO,IAAI1X,SAAyB,SAACC,EAASC,GAC1C,EAAKgc,UACDX,EACAC,GACA,SAACpH,GACGnU,EAAQ,IAAI0X,WAAWvD,GAC3B,IACA,GACA,SAACiC,GACGnW,EAAOmW,EACX,IACA,SAAC8F,GACGA,EAAWC,iBAAiB,QAAS,gBAAS3E,EAAU,YAAIA,EAAaC,EAAa,GAC1F,GAER,GACJ,EACAA,WAAY,GAWhB,OARA1a,KAAKqf,mBAAmB,IAAI,EAAAC,WAAWL,IAAatb,MAChD,SAAC4b,GACG,EAAY5D,qBAAqB0C,gBAAgB,GACjDI,EAAUc,EACd,GACAnG,EAAU,SAACC,GAAU,OAAAD,OAAQ9T,EAAW+T,EAAnB,OAA4B/T,GAG9C,CACX,CAEA,OAAOtF,KAAKkf,UACRX,EACAC,GACA,SAACpH,GACG,EAAKoI,UAAUjB,EAAO,IAAI5D,WAAWvD,EAAqB,EAAIA,EAAqBsD,YAAarD,EAASC,GACzG,EAAK+H,mBACD,IAAI,EAAAC,WAAW,CACX/E,UAAW,SAACE,EAAYC,GAAe,OAAAH,EAAUnD,EAAqBqD,EAAYC,EAA3C,EACvCA,WAAatD,EAAqBsD,cAExC/W,MACE,SAAC4b,GACGd,EAAUc,EACd,GACAnG,EAAU,SAACC,GAAU,OAAAD,OAAQ9T,EAAW+T,EAAnB,OAA4B/T,EAEzD,IACA,EACA8T,EAER,CACI,OAAOpZ,KAAKkf,UACRX,EACAC,GACA,SAACpH,GACG,IACI,EAAKoI,UAAUjB,EAAOnH,EAAgBC,EAASC,GAC/CmH,EAAU,CAAEgB,KAAM,EAAKC,WAAWtI,IACtC,CAAE,SACMgC,GACAA,GAER,CACJ,IACA,EACAA,EAGZ,EAEQ,YAAAwF,YAAR,SACIL,EACAnH,EACAC,EACAoH,EACArF,EACA9B,GAEAtX,KAAKwf,UAAUjB,EAAO,IAAI5D,WAAWvD,EAAKoC,OAAQpC,EAAKqD,WAAYrD,EAAKsD,YAAarD,EAASC,GAC9FtX,KAAKqf,mBACD,IAAI,EAAAC,WAAW,CACX/E,UAAW,SAACE,EAAYC,GAAe,OApyBvD,SAAuBiF,EAAkClF,EAAoBC,GACzE,IACI,GAAID,EAAa,GAAKA,GAAckF,EAAgBjF,WAChD,MAAM,IAAIkF,WAAW,2BAGzB,GAAInF,EAAaC,EAAaiF,EAAgBjF,WAC1C,MAAM,IAAIkF,WAAW,2BAGzB,OAAO5c,QAAQC,QAAQ,IAAI0X,WAAWgF,EAAgBnG,OAAQmG,EAAgBlF,WAAaA,EAAYC,GAC3G,CAAE,MAAOnX,GACL,OAAOP,QAAQE,OAAOK,EAC1B,CACJ,CAsxBuDsc,CAAczI,EAAMqD,EAAYC,EAAhC,EACvCA,WAAYtD,EAAKsD,cAEvB/W,MACE,SAAC4b,GACGd,EAAUc,EACd,GACAnG,EAAU,SAACC,GAAU,OAAAD,OAAQ9T,EAAW+T,EAAnB,OAA4B/T,EAEzD,EAKO,YAAAwa,gBAAP,SACIC,EACAxB,EACAnH,EACAC,EACAqH,EACApH,GANJ,WAQI,OAAOtU,QAAQC,UAAUU,MAAK,WAM1B,OALA,EAAKyX,mBAAmBiD,gBAAgBjH,GACxC,EAAKgE,mBAAmBgD,QAExB,EAAK7B,KAAK,kBAAWjF,GAAY,KACjC,EAAK2E,QAAU,EAAK+D,WAAW5I,GACxB,EAAK6E,QAAQ6D,gBAAgBC,EAAaxB,EAAO,KAAMnH,EAAMC,EAASqH,EAAYpH,EAC7F,GACJ,EAKO,YAAA2I,UAAP,SAAiB1B,EAAcnH,EAAuBC,EAAiBqH,EAAyDpH,GAAhI,WACI,OAAOtU,QAAQC,UAAUU,MAAK,WAM1B,OALA,EAAKyX,mBAAmBiD,gBAAgBjH,GACxC,EAAKgE,mBAAmBgD,QAExB,EAAK7B,KAAK,kBAAWjF,GAAY,KACjC,EAAK2E,QAAU,EAAK+D,WAAW5I,GACxB,EAAK6E,QAAQgE,UAAU1B,EAAOnH,EAAMC,EAASqH,EAAYpH,EACpE,GACJ,EAKO,YAAA4I,wBAAP,SACI3B,EACAnH,EACAC,EACAqH,EACApH,GALJ,WAOI,OAAOtU,QAAQC,UAAUU,MAAK,WAC1B,EAAKyX,mBAAmBiD,gBAAgBjH,GACxC,EAAKgE,mBAAmBgD,QAExB,EAAK7B,KAAK,kBAAWjF,GAAY,KACjC,EAAK2E,QAAU,EAAK+D,WAAW5I,GAG/B,IAAM+I,EAAY,IAAI,EAAAC,eAAe7B,GAG/B3S,EAA6B,GACnC,EAAK6P,2BAA2BwB,KAAI,SAAC3W,GACjCsF,EAAU/G,KAAKyB,EACnB,IACA,IAAM+Z,EAA+B,GACrC,EAAK7E,0BAA0ByB,KAAI,SAAC3V,GAChC+Y,EAASxb,KAAKyC,EAClB,IACA,IAAMe,EAAyB,GAC/B,EAAKqT,yBAAyBuB,KAAI,SAACzU,GAC/BH,EAAQxD,KAAK2D,EACjB,IAEA,IAAM8X,EAAiD,GAOvD,OANA,EAAKhF,uBAAuB2B,KAAI,SAACxK,GACzBA,EAAKtI,oBACLmW,EAAoBzb,KAAK4N,EAAKtI,mBAEtC,IAEO,EAAK8R,QAAQ6D,gBAAgB,KAAMvB,EAAO4B,EAAW/I,EAAMC,EAASqH,EAAYpH,GAAU3T,MAAK,SAACF,GAYnG,OAXAjC,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUI,WAAY9c,EAAO8c,YACxD/e,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAU3N,OAAQ/O,EAAO+O,QACpDhR,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUK,gBAAiB/c,EAAO+c,iBAC7Dhf,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUM,UAAWhd,EAAOgd,WACvDjf,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAU7f,gBAAiBmD,EAAOnD,iBAC7DkB,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUvU,UAAWA,GAChDpK,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUE,SAAUA,GAC/C7e,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAU9O,OAAQ5N,EAAO4N,QACpD7P,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUO,eAAgBjd,EAAOid,gBAC5Dlf,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAU9X,QAASA,GAC9C7G,MAAME,UAAUmD,KAAKnC,MAAMyd,EAAUG,oBAAqBA,GACnDH,CACX,GACJ,GACJ,EAKO,YAAAQ,cAAP,SAAqBvJ,GACjB,OC17BS,SAACA,GACV,OACgC,IAA3BA,EAAKb,QAAQ,WAAgD,IAA7Ba,EAAKb,QAAQ,YAC9Ca,EAAK7R,WAAW,eAAiB4U,IACjC/C,EAAK7R,WAAW,gBAAkB4U,IAClC/C,EAAK7R,WAAW,wCAA0C4U,IAC1D/C,EAAK7R,WAAW,iCAAmC4U,EAE3D,CDk7BWC,CAAqChD,EAChD,EAKO,YAAAwJ,WAAP,SAAkBrC,EAAcnH,GAC5B,GACIA,EAAK7R,WAAW,UAAY4U,IAC5B/C,EAAK7R,WAAW,WAAa4U,IAC7B/C,EAAK7R,WAAW,mCAAqC4U,IACrD/C,EAAK7R,WAAW,4BAA8B4U,GAChD,CACE,IAAM,GAAc,IAAA0G,yBAAwBzJ,GAG5C,OADApX,KAAKwf,UAAUjB,EAAO,IAAI5D,WAAW,EAAa,EAAG,EAAYD,aAC1D1a,KAAKqf,mBACR,IAAI,EAAAC,WAAW,CACX/E,UAAW,SAACE,EAAYC,GAAe,OAAAH,EAAU,EAAaE,EAAYC,EAAnC,EACvCA,WAAY,EAAYA,aAGpC,CAGA,OADA1a,KAAKwf,UAAUjB,EAAOnH,GACfpU,QAAQC,QAAQ,CAAEwc,KAAMzf,KAAK0f,WAAWtI,IACnD,EAWO,YAAA0J,aAAP,SAAoBtJ,GAChB,OAAO,IAAIuJ,EAAevJ,EAAQ4C,GACtC,EAKA,sBAAW,0BAAW,C,IAAtB,WACI,OAAOpa,KAAKkc,MAChB,E,gCAWO,YAAA8E,kBAAP,sBACI,OAAO,IAAIhe,SAAQ,SAACC,EAASC,GACzB,EAAKyY,qBAAqBsF,SAAQ,WAC9Bhe,GACJ,IACA,EAAK2Y,kBAAkBqF,SAAQ,SAACzI,GAC5BtV,EAAOsV,EACX,GACJ,GACJ,EAKO,YAAA0I,UAAP,SAAiBC,GACTnhB,KAAKkc,SAAWiF,IAIpBnhB,KAAKkc,OAASiF,EACdnhB,KAAKoc,+BAA+BiC,gBAAgBre,KAAKkc,QACzDlc,KAAKuc,KAAK5D,EAAgB3Y,KAAKkc,SACnC,EAKO,YAAAgD,UAAP,SACIX,EACAC,EACAC,EACAE,EACAvF,EACAgI,GANJ,WAQUC,EAAU9C,EAAMW,UAClBV,EACAC,GACA,SAAC6C,GACG,EAAKC,YAAYD,EAAOD,EAC5B,IACA,EACA1C,EACAvF,EACAgI,GAQJ,OANAC,EAAQ1F,qBAAqBsB,KAAI,WAE7BoE,EAAQG,mBAAoB,EAC5BH,EAAQI,OAASJ,EAAQK,OAC7B,IACA1hB,KAAKmc,UAAUtX,KAAKwc,GACbA,CACX,EAEQ,YAAAE,YAAR,SAAoBD,EAAsBD,GACtC,GAAKrhB,KAAKke,kBAAV,CAIAmD,EAAQG,kBAAoBF,EAAMK,iBAClCN,EAAQK,QAAUJ,EAAMM,OACxBP,EAAQI,OAASH,EAAMO,MAKvB,IAHA,IAAIF,GAAmB,EACnBC,EAAS,EACTC,EAAQ,EACU,MAAA7hB,KAAKmc,UAAL,eAAgB,CAAjC,IAAM,EAAO,KACd,QAAkC7W,IAA9B,EAAQkc,wBAAuDlc,IAApB,EAAQoc,cAA4Cpc,IAAnB,EAAQmc,OACpF,OAGJE,EAAmBA,GAAoB,EAAQH,kBAC/CI,GAAU,EAAQF,QAClBG,GAAS,EAAQJ,MACrB,CAEAzhB,KAAKke,kBAAkB,CACnByD,iBAAkBA,EAClBC,OAAQA,EACRC,MAAOF,EAAmBE,EAAQ,GAtBtC,CAwBJ,EAEQ,YAAArC,UAAR,SAAkBjB,EAAcnH,EAA2BC,EAAcC,GAAzE,gBAA2D,IAAAD,IAAAA,EAAA,SAAc,IAAAC,IAAAA,EAAA,IAChEtX,KAAK+b,WAIV/b,KAAK0c,yBAAyB,iBAC9BoF,EAAelJ,cAAcxB,EAAMC,EAASC,GAAU,SAACI,GACnD,OAAO,EAAKyG,mBAAmB9G,EAAUK,GAAK/T,MAAK,SAAC2U,GAChD,OAAOiG,EAAMwD,eAAezJ,OAAKhT,GAAW,GAAM,GAAM3B,MAAK,SAACyT,GAC1D,OAAO,IAAIuD,WAAWvD,EAAM,EAAGA,EAAKsD,WACxC,GACJ,GACJ,IAAG/W,MACC,SAACF,GACG,EAAKmZ,uBAAuB,iBAC5B,EAAKZ,sBAAsBqC,gBAAgB5a,GAC3C,EAAKuY,sBAAsBoC,OAC/B,IACA,SAAC5F,GACG,EAAKoE,uBAAuB,iBAC5B,EAAAjD,MAAMqF,KAAK,8BAAuBxG,EAAOL,UACzC,EAAK6D,sBAAsBoC,OAC/B,IAER,EAEQ,YAAA4B,WAAR,SAAmBT,GACf,IAAMyC,EAAczC,EAAWE,KAAMuC,OAAS,CAAC,EAE/ChiB,KAAKuc,KAAK,yBAAkByF,EAAMC,UAClCD,EAAME,YAAcliB,KAAKuc,KAAK,iCAA0ByF,EAAME,aAC9DF,EAAMjf,WAAa/C,KAAKuc,KAAK,2BAAoByF,EAAMjf,YAEvD,IAAMkf,EAAUlB,EAAeoB,cAAcH,EAAMC,SACnD,IAAKA,EACD,MAAM,IAAIzc,MAAM,oBAAsBwc,EAAMC,SAGhD,QAAyB3c,IAArB0c,EAAME,WAA0B,CAChC,IAAMA,EAAanB,EAAeoB,cAAcH,EAAME,YACtD,IAAKA,EACD,MAAM,IAAI1c,MAAM,4BAA8Bwc,EAAME,YAGxD,GAAInB,EAAeqB,gBAAgBF,EAAY,CAAEG,MAAO,EAAGC,MAAO,IAAO,EACrE,MAAM,IAAI9c,MAAM,iCAAmCwc,EAAME,WAEjE,CAEA,IAKMK,EAL4E,CAC9E,EAAGxB,EAAeyB,mBAClB,EAAGzB,EAAe0B,oBAGaR,EAAQI,OAC3C,IAAKE,EACD,MAAM,IAAI/c,MAAM,wBAA0Bwc,EAAMC,SAGpD,OAAOM,EAAaviB,KACxB,EAEQ,YAAA0f,WAAR,SAAmBD,GACfzf,KAAK0c,yBAAyB,cAC9B1c,KAAKuc,KAAK,uBAAgBkD,EAAKhd,SAC/B,IAAMigB,EAASC,KAAKC,MAAMnD,GAE1B,OADAzf,KAAK4c,uBAAuB,cACrB8F,CACX,EAEQ,YAAArD,mBAAR,SAA2BwD,GAA3B,WAII,OAHA7iB,KAAK0c,yBAAyB,iBAGvBmG,EAAW5C,UAAU,IAAItc,MAAK,WACjC,IAIMmf,EAAQD,EAAWE,aACzB,GAJW,aAIPD,EACA,MAAM,IAAI,EAAAE,aAAa,qBAAuBF,EAAO,EAAAG,WAAWC,gCAGpE,IAAMjB,EAAUY,EAAWE,aAEvB,EAAKI,gBACL,EAAK5G,KAAK,0BAAmB0F,IAGjC,IAKImB,EALE3gB,EAASogB,EAAWE,aAM1B,OALK,EAAKjE,kBAAoBrc,IAAWogB,EAAWrJ,OAAOkB,YACvD,EAAAqE,OAAOC,KAAK,8DAAuDvc,EAAM,eAAOogB,EAAWrJ,OAAOkB,aAI9FuH,GACJ,KAAK,EACDmB,EAAW,EAAKC,qBAAqBR,EAAYpgB,GACjD,MAEJ,KAAK,EACD2gB,EAAW,EAAKE,qBAAqBT,EAAYpgB,GACjD,MAEJ,QACI,MAAM,IAAI+C,MAAM,wBAA0Byc,GAMlD,OAFA,EAAKrF,uBAAuB,iBAErBwG,CACX,GACJ,EAEQ,YAAAC,qBAAR,SAA6BR,EAAwBpgB,GACjD,IAIM8gB,EAAgBV,EAAWE,aAC3BS,EAAgBX,EAAWE,aAEjC,GANU,IAMNS,EACA,MAAM,IAAIhe,MAAM,qCAA8Bge,IAGlD,IAAMC,EAAahhB,EAASogB,EAAWpI,WAEjCrD,EAAwB,CAAEqI,KAAMzf,KAAK0f,WAAWmD,EAAWa,WAAWH,IAAiBI,IAAK,MAClG,GAAmB,IAAfF,EAAkB,CAClB,IAAM,EAAkBZ,EAAWpI,WACnCrD,EAAKuM,IAAM,CACPpJ,UAAW,SAACE,EAAYC,GAAe,OAAAmI,EAAWrJ,OAAOe,UAAU,EAAkBE,EAAYC,EAA1D,EACvCA,WAAY+I,EAEpB,CAEA,OAAOzgB,QAAQC,QAAQmU,EAC3B,EAEQ,YAAAkM,qBAAR,SAA6BT,EAAwBpgB,GAArD,WACUmhB,EACI,WAKJC,EAAchB,EAAWE,aAE/B,GADoBF,EAAWE,eACXa,EAChB,MAAM,IAAIpe,MAAM,kCAIpB,OAAIqd,EAAWpI,WAAaoJ,IAAgBphB,EACjCogB,EAAW5C,UAAU4D,GAAalgB,MAAK,WAC1C,MAAO,CAAE8b,KAAM,EAAKC,WAAWmD,EAAWa,WAAWG,IAAeF,IAAK,KAC7E,IAIGd,EAAW5C,UAAU4D,EAAc,GAAGlgB,MAAK,WAC9C,IAAMyT,EAAwB,CAAEqI,KAAM,EAAKC,WAAWmD,EAAWa,WAAWG,IAAeF,IAAK,MAE1FpJ,EAAY,WACd,IAAMsJ,EAAchB,EAAWE,aAG/B,OAFoBF,EAAWE,cAG3B,KAAKa,EACD,MAAM,IAAIpe,MAAM,yBAEpB,KA7BH,QA8BO,IAAM,EAAkBqd,EAAWpI,WACnCrD,EAAKuM,IAAM,CACPpJ,UAAW,SAACE,EAAYC,GAAe,OAAAmI,EAAWrJ,OAAOe,UAAU,EAAkBE,EAAYC,EAA1D,EACvCA,WAAYmJ,GAEhBhB,EAAWiB,UAAUD,GACrB,MAEJ,QAEIhB,EAAWiB,UAAUD,GAK7B,OAAIhB,EAAWpI,aAAehY,EACnBogB,EAAW5C,UAAU,GAAGtc,KAAK4W,GAGjCvX,QAAQC,QAAQmU,EAC3B,EAEA,OAAOmD,GACX,GACJ,EAEe,EAAA4H,cAAf,SAA6BF,GACzB,GAAgB,QAAZA,GAAiC,UAAZA,EACrB,MAAO,CACHI,MAAO,EACPC,MAAO,GAIf,IAAMyB,GAAS9B,EAAU,IAAI8B,MAAM,iBACnC,OAAKA,EAIE,CACH1B,MAAO2B,SAASD,EAAM,IACtBzB,MAAO0B,SAASD,EAAM,KALf,IAOf,EAEe,EAAA3B,gBAAf,SAA+B3hB,EAAqCW,GAChE,OAAIX,EAAE4hB,MAAQjhB,EAAEihB,MACL,EAEP5hB,EAAE4hB,MAAQjhB,EAAEihB,OACJ,EAER5hB,EAAE6hB,MAAQlhB,EAAEkhB,MACL,EAEP7hB,EAAE6hB,MAAQlhB,EAAEkhB,OACJ,EAEL,CACX,EAYO,YAAA2B,SAAP,SAAgB9L,GACZnY,KAAKuc,KAAKpE,GACVnY,KAAKqc,iBACT,EAGO,YAAA6H,UAAP,aACMlkB,KAAKqc,eACX,EAEQ,YAAAuB,YAAR,SAAoBzF,GAChB,IAAMgM,EAASpD,EAAeqD,WAAWC,UAAU,EAA0B,EAAvBrkB,KAAKqc,iBAC3D,EAAA0C,OAAOuF,IAAI,UAAGH,GAAM,OAAGhM,GAC3B,EAEQ,YAAAqE,aAAR,SAAqBrE,GAAwB,EAUrC,YAAA0F,gCAAR,SAAwC0G,GACpC,EAAA5K,MAAM6K,wBAAwBD,EAClC,EAEQ,YAAA5H,iCAAR,SAAyC4H,GAA4B,EAE7D,YAAAzG,8BAAR,SAAsCyG,GAClC,EAAA5K,MAAM8K,sBAAsBF,EAChC,EAEQ,YAAA1H,+BAAR,SAAuC0H,GAA4B,EAh7BrD,EAAAG,oBAAqB,EAOrB,EAAAC,wBAAyB,EA43Bf,EAAAP,WAAa,mCA8CzC,C,CAt+BA,CA9MA,wBAmDW,KAAAQ,qBAAuBnM,EAA+BoM,KAKtD,KAAAC,mBAAqBpM,EAA6BqM,MAMlD,KAAAC,oBAAqB,EAKrB,KAAAC,WAAY,EAKZ,KAAAC,kBAAmB,EAKnB,KAAAC,kBAAmB,EAKnB,KAAAC,cAAe,EAKf,KAAAC,yBAA0B,EAO1B,KAAAC,wBAAyB,EAOzB,KAAAxG,kBAAmB,EAKnB,KAAAyG,iBAAkB,EAKlB,KAAAC,0BAA2B,EAK3B,KAAAC,kBAAmB,EAKnB,KAAAC,mBAAoB,EAKpB,KAAAC,eAAgB,EAKhB,KAAAC,gBAAiB,EAKjB,KAAAC,UAAY,GAMZ,KAAAC,+BAAgC,EAMhC,KAAAC,qBAAsB,EAOtB,KAAA5H,mBAAqB,SAAC7F,GAAgB,OAAAtV,QAAQC,QAAQqV,EAAhB,EAsCtC,KAAA0N,iBAOH,CAAC,CACT,QAvMc,YAAAnc,SAAV,SAAmB2N,G,8CACXA,IACAxX,KAAKimB,SAAWzO,EAAQyO,SACxBjmB,KAAK4kB,qBAAmD,QAA5B,EAAApN,EAAQoN,4BAAoB,QAAI5kB,KAAK4kB,qBACjE5kB,KAAK8kB,mBAA+C,QAA1B,EAAAtN,EAAQsN,0BAAkB,QAAI9kB,KAAK8kB,mBAC7D9kB,KAAKglB,mBAA+C,QAA1B,EAAAxN,EAAQwN,0BAAkB,QAAIhlB,KAAKglB,mBAC7DhlB,KAAKilB,UAA6B,QAAjB,EAAAzN,EAAQyN,iBAAS,QAAIjlB,KAAKilB,UAC3CjlB,KAAKklB,iBAA2C,QAAxB,EAAA1N,EAAQ0N,wBAAgB,QAAIllB,KAAKklB,iBACzDllB,KAAKmlB,iBAA2C,QAAxB,EAAA3N,EAAQ2N,wBAAgB,QAAInlB,KAAKmlB,iBACzDnlB,KAAKolB,aAAmC,QAApB,EAAA5N,EAAQ4N,oBAAY,QAAIplB,KAAKolB,aACjDplB,KAAKqlB,wBAAyD,QAA/B,EAAA7N,EAAQ6N,+BAAuB,QAAIrlB,KAAKqlB,wBACvErlB,KAAKslB,uBAAuD,QAA9B,EAAA9N,EAAQ8N,8BAAsB,QAAItlB,KAAKslB,uBACrEtlB,KAAK8e,iBAA2C,QAAxB,EAAAtH,EAAQsH,wBAAgB,QAAI9e,KAAK8e,iBACzD9e,KAAKulB,gBAAyC,QAAvB,EAAA/N,EAAQ+N,uBAAe,QAAIvlB,KAAKulB,gBACvDvlB,KAAKwlB,yBAA2D,QAAhC,EAAAhO,EAAQgO,gCAAwB,QAAIxlB,KAAKwlB,yBACzExlB,KAAKylB,iBAA2C,QAAxB,EAAAjO,EAAQiO,wBAAgB,QAAIzlB,KAAKylB,iBACzDzlB,KAAK0lB,kBAA6C,QAAzB,EAAAlO,EAAQkO,yBAAiB,QAAI1lB,KAAK0lB,kBAC3D1lB,KAAK2lB,cAAqC,QAArB,EAAAnO,EAAQmO,qBAAa,QAAI3lB,KAAK2lB,cACnD3lB,KAAK4lB,eAAuC,QAAtB,EAAApO,EAAQoO,sBAAc,QAAI5lB,KAAK4lB,eACrD5lB,KAAK6lB,UAA6B,QAAjB,EAAArO,EAAQqO,iBAAS,QAAI7lB,KAAK6lB,UAC3C7lB,KAAK8lB,8BAAqE,QAArC,EAAAtO,EAAQsO,qCAA6B,QAAI9lB,KAAK8lB,8BACnF9lB,KAAK+lB,oBAAiD,QAA3B,EAAAvO,EAAQuO,2BAAmB,QAAI/lB,KAAK+lB,oBAC/D/lB,KAAKme,mBAA+C,QAA1B,EAAA3G,EAAQ2G,0BAAkB,QAAIne,KAAKme,mBAC7Dne,KAAKkmB,eAAiB1O,EAAQ0O,eAC9BlmB,KAAKmmB,aAAe3O,EAAQ2O,aAC5BnmB,KAAKomB,aAAe5O,EAAQ4O,aAC5BpmB,KAAKqmB,gBAAkB7O,EAAQ6O,gBAC/BrmB,KAAKsmB,iBAAmB9O,EAAQ8O,iBAChCtmB,KAAKumB,eAAiB/O,EAAQ+O,eAC9BvmB,KAAKgmB,iBAA2C,QAAxB,EAAAxO,EAAQwO,wBAAgB,QAAIhmB,KAAKgmB,iBAEjE,EAwKJ,EAzMA,KAsrCA,IAAAQ,2BAA0B,IAAIzF,GEt2C9B,SAAYnG,GACR,sBACA,wCACA,wBACA,0CACA,uBACH,CAND,CAAYA,IAAAA,EAAc,KAS1B,SAAYC,GACR,+BACA,0BACH,CAHD,CAAYA,IAAAA,EAAW,KAMvB,SAAYC,GACR,sBACA,wCACA,wBACA,0CACA,oBACA,sCACA,wBACA,mCACA,mCACA,mCACA,+BACA,+BACA,+BACA,uBACA,iCACA,iCACA,iCACA,mCACA,mCACA,mCACA,kCACH,CAtBD,CAAYA,IAAAA,EAAc,KAyB1B,SAAYC,GACR,yCACA,6CACA,0BACH,CAJD,CAAYA,IAAAA,EAAgB,KAO5B,SAAYC,GACR,4BACA,0BACA,0DACA,wDACA,wDACA,qDACH,CAPD,CAAYA,IAAAA,EAAkB,KAU9B,SAAYC,GACR,wBACA,oBACA,sBACA,gCACA,2CACH,CAND,CAAYA,IAAAA,EAAc,KAS1B,SAAYC,GACR,wBACA,sBACA,yCACH,CAJD,CAAYA,IAAAA,EAAY,KAOxB,SAAYC,GACR,mBACA,iBACA,+BACA,mDACA,+BACA,mDACA,+BACA,mDACA,+BACA,mDACA,2CACA,+DACA,2CACA,+DACA,gDACH,CAhBD,CAAYA,IAAAA,EAAiB,KCpE7B,ICsDKsL,EDtDL,0BAmQA,QA1PkB,EAAAC,UAAd,SAAwBnI,EAAc5K,EAAcgT,EAAoCC,EAAqBC,GACzG,IAAIva,EAAwB,KA4B5B,GA1B2B,UAAvBqa,EAAUG,SACVxa,EAAMqH,EAAOoT,iBACiB,eAAvBJ,EAAUG,SACjBxa,EAAMiS,EAAMyI,sBACkB,SAAvBL,EAAUG,SACjBxa,EAAMiS,EAAM0I,gBACkB,8BAAvBN,EAAUG,SACjBxa,EAAM,EAAAhC,OAAO4c,UAAUvT,EAAOoT,iBAAiBI,SAAS5I,EAAM0I,iBAAiBjc,UACjD,cAAvB2b,EAAUG,SACjBxa,EAAMqH,EAAOoT,iBAAiBI,SAAS5I,EAAM0I,iBACf,wBAAvBN,EAAUG,SACjBxa,EAAMqH,EAAOoT,iBAAiBI,SAAS5I,EAAM6I,sBACf,iBAAvBT,EAAUG,SACjBxa,EAAMqH,EAAOoT,iBAAiB/b,SACA,gBAAvB2b,EAAUG,SACjBxa,EAAMiS,EAAM0I,gBAAgBjc,SACE,sBAAvB2b,EAAUG,SACjBxa,EAAMiS,EAAMyI,sBAAsBhc,SACJ,qBAAvB2b,EAAUG,SACjBxa,EAAMqH,EAAOoT,iBAAiBI,SAAS5I,EAAM0I,iBAAiBjc,SAChC,+BAAvB2b,EAAUG,SACjBxa,EAAMqH,EAAOoT,iBAAiBI,SAAS5I,EAAM6I,sBAAsBpc,SACrC,0BAAvB2b,EAAUG,WACjBxa,EAAM,EAAAhC,OAAO4c,UAAUvT,EAAOoT,iBAAiB/b,WAG/CsB,EACA,OAAQqa,EAAUvf,MACd,KAAK0T,EAAeuM,WAChBR,EAAeS,aAAaV,EAAa,EAAAtc,OAAOid,eAAejb,IAC/D,MACJ,KAAKwO,EAAe0M,WAChBX,EAAeY,aAAab,EAAa,EAAAtc,OAAOod,eAAepb,IAC/D,MACJ,KAAKwO,EAAe6M,WAChBd,EAAee,UAAUhB,EAAata,GAMtD,EAUc,EAAAub,WAAd,SAAyBhB,EAAyCiB,EAAiB1kB,EAAYgE,GAC3F,OAAQA,GACJ,KAAK0T,EAAeiN,MAEhB,OADAlB,EAAemB,SAASF,EAAS1kB,IAC1B,EACX,KAAK0X,EAAemN,WAEhB,OADApB,EAAeqB,WAAWJ,EAAS,EAAAvgB,QAAQsM,UAAUzQ,KAC9C,EACX,KAAK0X,EAAeqN,WAEhB,OADAtB,EAAeuB,WAAWN,EAAS,EAAAlU,QAAQC,UAAUzQ,KAC9C,EACX,KAAK0X,EAAeuN,WAEhB,OADAxB,EAAeyB,WAAWR,EAAS,EAAAS,QAAQ1U,UAAUzQ,KAC9C,EACX,QACI,OAAO,EAEnB,EAOc,EAAAolB,YAAd,SAA0BpS,GACtB,OAAQA,GACJ,KAAK2E,EAAiB0N,cAClB,OAAO,EAAAC,QAAQC,kBACnB,KAAK5N,EAAiB6N,gBAClB,OAAO,EAAAF,QAAQG,mBACnB,KAAK9N,EAAiB+N,OAEtB,QACI,OAAO,EAAAJ,QAAQK,iBAE3B,EAOc,EAAAC,sBAAd,SAAoCxV,GAIhC,OAFaA,EAASpM,MAGlB,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,EACX,IAAK,OAEL,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,GACX,QACI,OAAO,EAEnB,EAOc,EAAA6hB,qBAAd,SAAmC7S,GAC/B,OAAQA,GACJ,KAAK4E,EAAmBkO,OACxB,KAAKlO,EAAmBmO,sBACxB,KAAKnO,EAAmBoO,qBACpB,OAAO,EAAAV,QAAQW,uBACnB,KAAKrO,EAAmBsO,QACxB,KAAKtO,EAAmBuO,uBACpB,OAAO,EAAAb,QAAQc,qBACnB,QACI,OAAO,EAAAd,QAAQe,sBAE3B,EAEc,EAAAC,wBAAd,SACIC,EACAC,EACAnP,EACAC,EACAmP,GAEApP,EAAamP,EAAWnP,WAAaA,EAErC,IAAMqP,EAAmBH,EAAYI,kBAAkBH,EAAWpQ,QAClE,GAAIiB,EAAaC,EAAaoP,EAAiBpP,WAC3C,MAAM,IAAIlV,MAAM,iCAGpB,IAAMgU,EAASsQ,EAAiBtQ,OAGhC,OAFAiB,GAAcqP,EAAiBrP,WAEvBoP,GACJ,KAAKjP,EAAeoP,KAChB,OAAO,IAAIC,UAAUzQ,EAAQiB,EAAYC,GAC7C,KAAKE,EAAesP,cAChB,OAAO,IAAIvP,WAAWnB,EAAQiB,EAAYC,GAC9C,KAAKE,EAAeuP,MAChB,OAAO,IAAIC,WAAW5Q,EAAQiB,EAAYC,GAC9C,KAAKE,EAAeyP,eAChB,OAAO,IAAIC,YAAY9Q,EAAQiB,EAAYC,GAC/C,QACI,OAAO,IAAI6P,aAAa/Q,EAAQiB,EAAYC,GAExD,EAQc,EAAA8P,sBAAd,SAAoCb,EAA2BnW,GAC3D,IAAMoW,EAA8BD,EAAYc,YAAYjX,EAASoW,YAC/DlP,EAAalH,EAASkX,MAAQC,EAAU3B,sBAAsBxV,GACpE,OAAOmX,EAAUjB,wBAAwBC,EAAaC,EAAYpW,EAASiH,WAAYC,EAAYlH,EAASqW,cAChH,EAOc,EAAAe,mBAAd,SAAiCC,GAI7B,IAHA,IAAIpnB,EAAS,GACPhB,EAASooB,EAAKnQ,WAEXnY,EAAI,EAAGA,EAAIE,IAAUF,EAC1BkB,GAAU1B,OAAO+oB,aAAmBD,EAAMtoB,IAG9C,OAAOkB,CACX,EAQc,EAAAsnB,mBAAd,SAAiCxM,GAC7B,IAAKoM,EAAUK,iBAAkB,CAC7B,EAAAC,OAAOC,aAA8C,gCAAI,CACrD,yBACA,GACA,0BACA,2BACA,GACA,2BACA,GACA,kBACA,IACA,kEACA,KACFC,KAAK,MAEP,EAAAF,OAAOC,aAA6C,+BAAI,CACpD,yBACA,GACA,2BACA,GACA,kBACA,IACA,iCACA,KACFC,KAAK,MAEP,IAKM3T,EAAU,CACZ4T,WAAY,CAAC,YACbC,SAAU,CAAC,YAAa,aAAc,cACtCC,SAAU,IAAI9pB,MACd+pB,mBAAmB,GAGvBZ,EAAUK,iBAAmB,IAAI,EAAAQ,eAAe,sBAAuBjN,EAZpD,CACfkN,OAAQ,sBACRC,SAAU,uBAU4ElU,GAC1FmT,EAAUK,iBAAiBW,UAAU,aAAc,IAAI,EAAAlf,OAAO,GAAK,GAAK,GAAK,GACjF,CAEA,OAAOke,EAAUK,gBACrB,EAGe,EAAAA,iBAA6C,KAChE,C,CAnQA,ICsDA,SAAKvE,GACD,+BAEA,yBACA,kCACH,CALD,CAAKA,IAAAA,EAAU,KAOf,iBAUI,WAAYmF,GARJ,KAAAC,KAAe,EAGhB,KAAAC,aAA2BrF,EAAWsF,QACtC,KAAAC,kBAA4B,GAC5B,KAAAC,cAAwB,GACxB,KAAAC,uBAAiC,iBAGpClsB,KAAKmsB,SAAWP,EAChB5rB,KAAKosB,QAAUR,EAAQnpB,MAC3B,CAqCJ,OAnCW,YAAA4pB,aAAP,WACI,GAAIrsB,KAAKssB,QACL,OAAO7F,EAAW8F,aAMtB,GAHAvsB,KAAKisB,cAAgBjsB,KAAKwsB,OAC1BxsB,KAAK8rB,aAAerF,EAAWsF,QAEJ,MAAvB/rB,KAAKisB,eAAyBjsB,KAAKksB,uBAAuBO,KAAKzsB,KAAKisB,eAGpE,IAFAjsB,KAAK8rB,aAAerF,EAAWiG,WAC/B1sB,KAAKgsB,kBAAoBhsB,KAAKisB,eACtBjsB,KAAKssB,UAAYtsB,KAAKksB,uBAAuBO,KAAMzsB,KAAKisB,cAAgBjsB,KAAK2sB,SAAmC,MAAvB3sB,KAAKisB,gBAClGjsB,KAAKgsB,mBAAqBhsB,KAAKisB,cAC/BjsB,KAAK4sB,UAIb,OAAO5sB,KAAK8rB,YAChB,EAEO,YAAAa,KAAP,WACI,OAAO3sB,KAAKmsB,SAASnsB,KAAK6rB,KAC9B,EAEO,YAAAW,KAAP,WACI,OAAOxsB,KAAKmsB,SAASnsB,KAAK6rB,OAC9B,EAEO,YAAAe,QAAP,WACI5sB,KAAK6rB,MACT,EAEO,YAAAS,MAAP,WACI,OAAOtsB,KAAK6rB,MAAQ7rB,KAAKosB,OAC7B,EACJ,EAlDA,GAuDMS,EAAiB,CAAC,QAAS,OAAQ,aAAc,YAAa,sBAAuB,eACrFC,EAAoB,CAAC,QAAS,OAAQ,aAAc,YAAa,sBAAuB,UAExFC,EAAqB,CAAC,cAAe,WAAY,SACjDC,EAAwB,CAAC,WAAY,qBAAsB,WAuB3DC,EAAc,SAACC,EAAoBC,EAAyBxD,GAC9D,IAAK,IAAMxjB,KAAU+mB,EAAe,CAChC,IAAME,EAAeF,EAAc/mB,GAC7BwjB,EAAawD,GAAiBhnB,GAAUinB,CAClD,CACJ,EAMMC,EAAe,SAAC7T,GAClB,GAAKA,EAIL,IAAK,IAAIjX,EAAI,EAAGA,EAAIiX,EAAO/W,OAAS,EAAGF,IACnCiX,EAAW,EAAJjX,EAAQ,GAAK,EAAMiX,EAAW,EAAJjX,EAAQ,EAEjD,EAEM+qB,EAAe,SAACC,GAClB,GAAoC,WAAhCA,EAAmBzG,SACnB,MAAO,SACJ,GAAoC,aAAhCyG,EAAmBzG,SAC1B,MAAO,WACJ,GAAoC,UAAhCyG,EAAmBzG,SAC1B,MAAO,kBACJ,GAAoC,WAAhCyG,EAAmBzG,SAC1B,MAAO,kBACJ,GAAoC,UAAhCyG,EAAmBzG,SAC1B,MAAO,QACJ,GAAIyG,EAAmBzG,WAAkE,IAAtDyG,EAAmBzG,SAASvQ,QAAQ,aAAqB,CAC/F,IAAMiX,EAAUC,OAAOF,EAAmBzG,SAASphB,MAAM,KAAK,IAC9D,MAAO,MAAoB,IAAZ8nB,EAAgB,GAAKA,EAAU,EAClD,CAEA,OAAO,IACX,EA8JME,EAA8B,SAAChkB,GACjC,IAAI4C,EAAwB,KAE5B,GAAI5C,EAAKC,aAAeD,EAAK5B,UAAY4B,EAAK1B,MAAO,CACjD,IAAMA,EAAQ,EAAA4L,QAAQC,UAAUnK,EAAK1B,OAAS,CAAC,EAAG,EAAG,IAC/CF,EAAW,EAAAkK,WAAW6B,UAAUnK,EAAK5B,UAAY,CAAC,EAAG,EAAG,EAAG,IAC3D8B,EAAW,EAAAgK,QAAQC,UAAUnK,EAAKC,aAAe,CAAC,EAAG,EAAG,IAE9D2C,EAAM,EAAAhC,OAAOC,QAAQvC,EAAOF,EAAU8B,EAC1C,MACI0C,EAAM,EAAAhC,OAAOuJ,UAAUnK,EAAKW,QAGhC,OAAOiC,CACX,EAUMqhB,EAAgB,SAAChE,EAA2BiE,EAAmBC,EAAmBC,GAEpF,IAAK,IAAIvrB,EAAI,EAAGA,EAAIurB,EAAYC,MAAMtrB,OAAQF,IAC1C,GAAIurB,EAAYC,MAAMxrB,GAAG0R,OAAS4Z,EAC9B,OAAOC,EAAYC,MAAMxrB,GAKjC,IAAM1B,EAAQ8oB,EAAY9oB,MAC1B,IAAK,IAAMmtB,KAAOntB,EAAO,CACrB,IAAM6I,EAAkB7I,EAAMmtB,GAE9B,GAAKtkB,EAAKmkB,UAIV,KAAMI,EAAWvkB,EAAKukB,SACtB,IAAS1rB,EAAI,EAAGA,EAAI0rB,EAASxrB,OAAQF,IAAK,CACtC,IAAM+I,EAAmBqe,EAAY9oB,MAAMotB,EAAS1rB,IACpD,GAAK+I,EAAMuiB,WAIPviB,EAAMuiB,YAAcA,EAAW,CAC/B,IAAMvhB,EAAMohB,EAA4BhkB,GAClCwkB,EAAO,IAAI,EAAAC,KAAKzkB,EAAKuK,MAAQ,GAAI6Z,EAAaH,EAAchE,EAAaiE,EAAOlkB,EAAKmkB,UAAWC,GAAcxhB,GAEpH,OADA4hB,EAAK9V,GAAK4V,EACHE,CACX,CACJ,CAb8B,CAclC,CAEA,OAAO,IACX,EAQME,EAAgB,SAACC,EAA4BjW,GAC/C,IAAK,IAAI7V,EAAI,EAAGA,EAAI8rB,EAAY5rB,OAAQF,IAGpC,IAFA,IAAM+rB,EAAaD,EAAY9rB,GAEtBgsB,EAAI,EAAGA,EAAID,EAAW5kB,KAAKukB,SAASxrB,OAAQ8rB,IAEjD,GADcD,EAAW5kB,KAAKukB,SAASM,KACzBnW,EACV,OAAOkW,EAAWJ,KAK9B,OAAO,IACX,EAQMM,EAAe,SAAC7E,EAA2BkE,GAC7C,IAAMhtB,EAAQ8oB,EAAY9oB,MACtB6I,EAAkB7I,EAAMgtB,GAC5B,GAAInkB,EACA,MAAO,CACHA,KAAMA,EACN0O,GAAIyV,GAIZ,IAAK,IAAMG,KAAOntB,EAEd,IADA6I,EAAO7I,EAAMmtB,IACJH,YAAcA,EACnB,MAAO,CACHnkB,KAAMA,EACN0O,GAAI4V,GAKhB,OAAO,IACX,EAQMS,EAAiB,SAACb,EAAmBxV,GACvC,IAAK,IAAI7V,EAAI,EAAGA,EAAIqrB,EAAMc,WAAWjsB,OAAQF,IACzC,GAAIqrB,EAAMc,WAAWnsB,KAAO6V,EACxB,OAAO,EAIf,OAAO,CACX,EA6LMuW,EAAa,SAAChF,EAA2BjgB,EAAiB8I,EAAkB4F,EAAYwW,GAS1F,GARKA,IACDjF,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,gBACzDF,EAAU,IAAI,EAAAG,KAAKrlB,EAAKuK,MAAQ,GAAI0V,EAAYpL,QACxCyQ,iBAAmBrF,EAAYmF,eACvCnF,EAAYpL,MAAMsQ,wBAAyB,EAC3CD,EAAQxW,GAAKA,IAGZ1O,EAAKulB,YACN,OAAOL,EAWX,IARA,IA4GItoB,EA5GE4oB,EAA2B,GAE7BC,EAAmC,KACjCC,EAA2B,GAC3BC,EAA2B,GAC3BC,EAAwB,GACxBC,EAAwB,GAErBC,EAAY,EAAGA,EAAYhd,EAAO/P,OAAQ+sB,IAAa,CAC5D,IAAMC,EAASjd,EAAOgd,GAGtB,GAFM/c,EAAkBkX,EAAYnX,OAAOid,GAO3C,IAAK,IAAIltB,EAAI,EAAGA,EAAIkQ,EAAKC,WAAWjQ,OAAQF,IAAK,CAE7C,IAAMmtB,EAAiB,IAAI,EAAAC,WAErBC,EAAYnd,EAAKC,WAAWnQ,GAC9BqtB,EAAUxZ,KAId,IAAMgV,EAAawE,EAAUxE,WACzB5X,EAAoC,KACpCgG,EAAc,KAGlB,IAAK,IAAMsN,KAAYsE,EAKnB,GAHA5X,EAAWmW,EAAYkG,UAAUzE,EAAWtE,IAC5CtN,EAASmR,EAAUH,sBAAsBb,EAAanW,GAErC,WAAbsT,EACA4I,EAAeI,QAAU,IAAIvF,aAAa/Q,EAAO/W,QAClCitB,EAAeI,QAASnoB,IAAI6R,QACxC,GAAiB,aAAbsN,EAAyB,CAChC,GAAI/F,EAAe4D,uBAAwB,CACvC+K,EAAeK,UAAY,IAAIxF,aAAa/Q,EAAO/W,OAAS+W,EAAO/W,OAAS,GAE5E,IAAK,IAAI8rB,EAAI,EAAGA,EAAI/U,EAAO/W,OAAQ8rB,GAAK,EACpCmB,EAAeK,UAAUxB,GAAK/U,EAAO+U,GACrCmB,EAAeK,UAAUxB,EAAI,GAAK/U,EAAO+U,EAAI,GAC7CmB,EAAeK,UAAUxB,EAAI,GAAK/U,EAAO+U,EAAI,EAErD,MACImB,EAAeK,UAAY,IAAIxF,aAAa/Q,EAAO/W,QACpCitB,EAAeK,UAAWpoB,IAAI6R,GAGjD6V,EAAexqB,KAAK6qB,EAAeK,UAAUttB,OACjD,MAAO,IAAuC,IAAnCqkB,EAASvQ,QAAQ,aAAqB,CAC7C,IAAMiX,EAAUC,OAAO3G,EAASphB,MAAM,KAAK,IACrCsqB,EAAS,EAAAC,aAAaC,QAAsB,IAAZ1C,EAAgB,GAAKA,EAAU,GAC/D2C,EAAM,IAAI5F,aAAa/Q,EAAO/W,QACrB0tB,EAAKxoB,IAAI6R,GACxB6T,EAAa8C,GACbT,EAAe/nB,IAAIwoB,EAAKH,EAC5B,KAAwB,UAAblJ,GACP4I,EAAeU,gBAAkB,IAAI7F,aAAa/Q,EAAO/W,QAC1CitB,EAAeU,gBAAiBzoB,IAAI6R,IAC/B,WAAbsN,GACP4I,EAAeW,gBAAkB,IAAI9F,aAAa/Q,EAAO/W,QAC1CitB,EAAeW,gBAAiB1oB,IAAI6R,IAC/B,UAAbsN,IACP4I,EAAeY,OAAS,IAAI/F,aAAa/Q,EAAO/W,QACjCitB,EAAeY,OAAQ3oB,IAAI6R,IAMlD,GADAhG,EAAWmW,EAAYkG,UAAUD,EAAUW,SAEvC/W,EAASmR,EAAUH,sBAAsBb,EAAanW,GAEtDkc,EAAea,QAAU,IAAIC,WAAWhX,EAAO/W,QAC/CitB,EAAea,QAAQ5oB,IAAI6R,GAC3B+V,EAAY1qB,KAAK6qB,EAAea,QAAQ9tB,YACrC,CAEH,IAAM8tB,EAAoB,GAC1B,IAAShC,EAAI,EAAGA,EAAiBmB,EAAeK,UAAWttB,OAAS,EAAG8rB,IACnEgC,EAAQ1rB,KAAK0pB,GAGjBmB,EAAea,QAAU,IAAIC,WAAWD,GACxChB,EAAY1qB,KAAK6qB,EAAea,QAAQ9tB,OAC5C,CAEK0sB,EAGDA,EAAWsB,MAAMf,GAFjBP,EAAaO,EAMjB,IAAM,EAAW/F,EAAYpL,MAAMmS,gBAAgBd,EAAUtpB,UAE7D4oB,EAAarqB,KAAkB,OAAb,EAAoB8lB,EAAUI,mBAAmBpB,EAAYpL,OAAS,GAGxF6Q,EAAevqB,KAA+B,IAA1BuqB,EAAe3sB,OAAe,EAAI2sB,EAAeA,EAAe3sB,OAAS,GAAK4sB,EAAeA,EAAe5sB,OAAS,IACzI6sB,EAAYzqB,KAA4B,IAAvByqB,EAAY7sB,OAAe,EAAI6sB,EAAYA,EAAY7sB,OAAS,GAAK8sB,EAAYA,EAAY9sB,OAAS,GAC3H,CACJ,CAEAknB,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,eACrDI,EAAazsB,OAAS,GACtB6D,EAAW,IAAI,EAAAqqB,cAAc,WAAavY,EAAIuR,EAAYpL,QAC9B2Q,aAAeA,EAE3C5oB,EAAW,IAAI,EAAAsqB,iBAAiB,WAAaxY,EAAIuR,EAAYpL,OAGrC,IAAxB2Q,EAAazsB,SACb6D,EAAW4oB,EAAa,IAG5B5oB,EAAS0oB,iBAAmBrF,EAAYmF,eAEnCF,EAAQtoB,WACTsoB,EAAQtoB,SAAWA,GAIvB,IAAI,EAAAuqB,SAASzY,EAAIuR,EAAYpL,MAAO4Q,GAAa,EAAOP,GACxDA,EAAQ7jB,oBAAmB,GAE3B4e,EAAYpL,MAAMsQ,wBAAyB,EAG3CD,EAAQkC,UAAY,GACpB,IAAI3oB,EAAQ,EACZ,IAASqnB,EAAY,EAAGA,EAAYhd,EAAO/P,OAAQ+sB,IAAa,CAC5D,IACM/c,EAEN,GAHMgd,EAASjd,EAAOgd,GAChB/c,EAAkBkX,EAAYnX,OAAOid,GAM3C,IAASltB,EAAI,EAAGA,EAAIkQ,EAAKC,WAAWjQ,OAAQF,IACpCkQ,EAAKC,WAAWnQ,GAAG6T,KAIvB,EAAA2a,QAAQC,UAAU7oB,EAAOinB,EAAejnB,GAAQknB,EAAelnB,GAAQmnB,EAAYnnB,GAAQonB,EAAYpnB,GAAQymB,EAASA,GAAS,GACjIzmB,GAER,CAGA,OAAOymB,CACX,EASMqC,EAAgB,SAACC,EAActnB,EAAmB9B,EAAsBiC,GACtEmnB,EAAQtnB,WACRsnB,EAAQtnB,SAAWA,IAGnBsnB,EAAQpnB,oBAAsBonB,EAAQppB,YACtCopB,EAAQpnB,mBAAqBhC,GAG7BopB,EAAQnnB,UACRmnB,EAAQnnB,QAAUA,EAE1B,EA8BMonB,GAAa,SAACxH,EAA2BjgB,EAAiB0O,GAC5D,IAAIgZ,EAA2B,KAE/B,GAAIzH,EAAY0H,mBAAqB3nB,EAAK4nB,MAAQ5nB,EAAK8I,SAC/CmX,EAAY4H,mBAAqB5H,EAAY4H,kBAAkB9uB,OAAS,IAAiE,IAA5DknB,EAAY4H,kBAAkBhb,QAAQ7M,EAAKuK,MAAQ,IAChI,OAAO,KAKf,GAAIvK,EAAK4nB,MACL,GAAI5nB,EAAK8I,OAAQ,CACb,IAAM8e,EAAmB3H,EAAYiE,MAAMlkB,EAAK4nB,OAE1C1C,EAAUD,EAAWhF,EAAajgB,EAAMA,EAAK8I,OAAQ4F,EAAU1O,EAAKulB,cAClEuC,SAAW7H,EAAYpL,MAAMkT,oBAAoB/nB,EAAK4nB,MAErC,OAArB1C,EAAQ4C,WACR5C,EAAQ4C,SAlXD,SAAC7H,EAA2BiE,EAAmBnb,EAAYqb,GAK9E,GAJKA,IACDA,EAAc,IAAI,EAAA4D,SAAS9D,EAAM3Z,MAAQ,GAAI,GAAI0V,EAAYpL,SAG5DqP,EAAM+D,gBACP,OAAO7D,EAIX,IAAMO,EAA6B,GAC7BuD,EAA2B,IA3Dd,SAACjI,EAA2BmE,EAAuBF,EAAmBS,GAEzF,IAAK,IAAML,KAAOrE,EAAY9oB,MAAO,CACjC,IAAM6I,EAAkBigB,EAAY9oB,MAAMmtB,GACpC5V,EAAK4V,EAEX,GAAKtkB,EAAKmkB,YAAaY,EAAeb,EAAOlkB,EAAKmkB,WAAlD,CAKA,IAAMvhB,EAAMohB,EAA4BhkB,GAClCwkB,EAAO,IAAI,EAAAC,KAAKzkB,EAAKuK,MAAQ,GAAI6Z,EAAa,KAAMxhB,GAC1D4hB,EAAK9V,GAAKA,EACViW,EAAYxpB,KAAK,CAAEqpB,KAAMA,EAAMxkB,KAAMA,EAAM0O,GAAIA,GAN/C,CAOJ,CAGA,IAAK,IAAI7V,EAAI,EAAGA,EAAI8rB,EAAY5rB,OAAQF,IAIpC,IAHA,IAAM+rB,EAAaD,EAAY9rB,GACzB0rB,EAAWK,EAAW5kB,KAAKukB,SAExBM,EAAI,EAAGA,EAAIN,EAASxrB,OAAQ8rB,IAAK,CAGtC,IAFA,IAAIjjB,EAA+B,KAE1BumB,EAAI,EAAGA,EAAIxD,EAAY5rB,OAAQovB,IACpC,GAAIxD,EAAYwD,GAAGzZ,KAAO6V,EAASM,GAAI,CACnCjjB,EAAQ+iB,EAAYwD,GACpB,KACJ,CAGAvmB,IACMA,EAAM4iB,KAAM4D,QAAUxD,EAAWJ,KACvCI,EAAWJ,KAAKD,SAASppB,KAAKyG,EAAM4iB,MAE5C,CAER,CAuBI6D,CAAepI,EAAamE,EAAaF,EAAOS,GAChDP,EAAYC,MAAQ,GAGpB,IAAK,IAAIxrB,EAAI,EAAGA,EAAIqrB,EAAMc,WAAWjsB,OAAQF,IAGzC,GAFMyvB,EAAYxD,EAAa7E,EAAaiE,EAAMc,WAAWnsB,IAE7D,CAIA,IAAMmH,EAAOsoB,EAAUtoB,KAEvB,GAAKA,EAAL,CAKA,IAAM0O,EAAK4Z,EAAU5Z,GAGf6Z,EAAetI,EAAYpL,MAAM2T,YAAY9Z,GACnD,GAAI6Z,EACAnE,EAAYC,MAAMlpB,KAAKotB,OAD3B,CASA,IAHA,IAAIE,GAAY,EACZC,EAA6B,KAExB7D,EAAI,EAAGA,EAAIhsB,EAAGgsB,IAAK,CACxB,IAAM,EAAYC,EAAa7E,EAAaiE,EAAMc,WAAWH,IAE7D,GAAK,EAAL,CAIA,IAAM8D,EAAmB,EAAU3oB,KAEnC,GAAK2oB,EAAL,CAKA,IAAMpE,EAAWoE,EAAMpE,SACvB,GAAKA,EAAL,CAGAkE,GAAY,EAEZ,IAAK,IAAIN,EAAI,EAAGA,EAAI5D,EAASxrB,OAAQovB,IACjC,GAAI5D,EAAS4D,KAAOzZ,EAAI,CACpBga,EAAazE,EAAchE,EAAaiE,EAAOA,EAAMc,WAAWH,GAAIT,GACpEqE,GAAY,EACZ,KACJ,CAGJ,GAAIA,EACA,KAZJ,CALA,MAFI,EAAAxY,MAAMqF,KAAK,eAAiB4O,EAAMc,WAAWH,GAAK,0CALtD,CA0BJ,CAGA,IAAMjiB,EAAMohB,EAA4BhkB,IAEnC0oB,GAAc/D,EAAY5rB,OAAS,IACpC2vB,EAAahE,EAAcC,EAAajW,MAGU,IAA1CwZ,EAAiBrb,QAAQ6b,IACzBR,EAAiB/sB,KAAKutB,GAKrB,IAAI,EAAAjE,KAAKzkB,EAAKmkB,WAAa,GAAIC,EAAasE,EAAY9lB,GAChE8L,GAAKA,CArDV,CATA,MAFI,EAAAuB,MAAMqF,KAAK,eAAiB4O,EAAMc,WAAWnsB,GAAK,kBALtD,CAyEJ,IAAMwrB,EAAQD,EAAYC,MAG1B,IAFAD,EAAYC,MAAQ,GAEXxrB,EAAI,EAAGA,EAAIqrB,EAAMc,WAAWjsB,OAAQF,IAAK,CAC9C,IAAMyvB,EAEN,GAFMA,EAAYxD,EAAa7E,EAAaiE,EAAMc,WAAWnsB,IAM7D,IAASgsB,EAAI,EAAGA,EAAIR,EAAMtrB,OAAQ8rB,IAC9B,GAAIR,EAAMQ,GAAGnW,KAAO4Z,EAAU5Z,GAAI,CAC9B0V,EAAYC,MAAMlpB,KAAKkpB,EAAMQ,IAC7B,KACJ,CAER,CAKA,IAHAT,EAAYwE,UAGH/vB,EAAI,EAAGA,EAAIqvB,EAAiBnvB,OAAQF,IACzCurB,EAAYC,MAAMlpB,KAAK+sB,EAAiBrvB,IAG5C,OAAOurB,CACX,CAyPmCyE,CAAe5I,EAAa2H,EAAM1C,EAAS0C,EAAKK,iBAE9DL,EAAKK,kBACNL,EAAKK,gBAAkB/C,EAAQ4C,WAIvCJ,EAAWxC,CACf,OACG,GAAIllB,EAAK8I,OAAQ,CAIpB,IAAMoc,EACNwC,EADMxC,EAAUD,EAAWhF,EAAajgB,EAAMA,EAAK+I,KAAO,CAAC/I,EAAK+I,MAAQ/I,EAAK8I,OAAQ4F,EAAU1O,EAAKulB,YAExG,MAEK,IAAIvlB,EAAK+B,OAAU/B,EAAKulB,aAAgBtF,EAAY0H,kBAwDpD,GAAI3nB,EAAKlB,SAAWkB,EAAKulB,cAAgBtF,EAAY0H,iBAAkB,CACxE,IAAM7oB,EAAsBmhB,EAAYthB,QAAQqB,EAAKlB,QAErD,GAAIA,EAAQ,CAER,GADAmhB,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,eACrC,iBAAhBtmB,EAAOpB,KAAyB,CAChC,IAAMorB,EAAc,IAAI,EAAAC,WAAW/oB,EAAKlB,OAAQ,EAAAoL,QAAQ8e,OAAQ/I,EAAYpL,OAAO,GAEnFiU,EAAYve,KAAOvK,EAAKuK,MAAQ,GAChCue,EAAYpc,KAAO,EAAAuc,OAAOC,oBAC1BJ,EAAYK,gBAEZzB,EAAWoB,EAEXA,EAAYxD,iBAAmBrF,EAAYmF,cAC/C,MAAO,GAAoB,gBAAhBtmB,EAAOpB,KAAwB,CACtC,IAAM0rB,EAAkDtqB,EAAQA,EAAOpB,MACjE2rB,EAAa,IAAI,EAAAN,WAAW/oB,EAAKlB,OAAQ,EAAAoL,QAAQ8e,OAAQ/I,EAAYpL,OAAO,GAElFwU,EAAW9e,KAAOvK,EAAKuK,MAAQ,GAC/B8e,EAAWF,gBAENC,EAAkB1pB,cACnB0pB,EAAkB1pB,YAAcugB,EAAYpL,MAAMlV,YAAY2pB,iBAAmBrJ,EAAYpL,MAAMlV,YAAY4pB,mBAG/GH,EAAkB7pB,OAAS6pB,EAAkB/pB,OAC7CgqB,EAAW/pB,KAAO8pB,EAAkB/pB,KACpCgqB,EAAW7pB,KAAO4pB,EAAkB7pB,OAGxCmoB,EAAW2B,EACXA,EAAW/D,iBAAmBrF,EAAYmF,cAC9C,CAEAnF,EAAYpL,MAAMsQ,wBAAyB,CAC/C,CACJ,MA7F2E,CACvE,IAAMpjB,EAAoBke,EAAYtY,OAAO3H,EAAK+B,OAElD,GAAIA,EACA,GAAmB,YAAfA,EAAMrE,KAAoB,CAC1B,IAAM8rB,EAAsCznB,EAAOA,EAAMrE,MACnD+rB,EAAY,IAAI,EAAAC,iBAAiB1pB,EAAK+B,MAAO,EAAAmI,QAAQ8e,OAAQ/I,EAAYpL,OAC/E4U,EAAUlf,KAAOvK,EAAKuK,MAAQ,GAE1Bif,EAAYxnB,QACZynB,EAAUxnB,QAAU,EAAA0nB,OAAOxf,UAAUqf,EAAYxnB,QAGrD0lB,EAAW+B,CACf,MAAO,GAAmB,gBAAf1nB,EAAMrE,KAAwB,CACrC,IAAMksB,EAAgD7nB,EAAOA,EAAMrE,MAC7DmsB,EAAW,IAAI,EAAAC,iBAAiB9pB,EAAK+B,MAAO,EAAAmI,QAAQ8e,OAAQ/I,EAAYpL,OAC9EgV,EAAStf,KAAOvK,EAAKuK,MAAQ,GAEzBqf,EAAiB5nB,QACjB6nB,EAAS5nB,QAAU,EAAA0nB,OAAOxf,UAAUyf,EAAiB5nB,QAGzD0lB,EAAWmC,CACf,MAAO,GAAmB,UAAf9nB,EAAMrE,KAAkB,CAC/B,IAAMqsB,EAAoChoB,EAAOA,EAAMrE,MACjDssB,EAAU,IAAI,EAAAC,WAAWjqB,EAAK+B,MAAO,EAAAmI,QAAQ8e,OAAQ/I,EAAYpL,OACvEmV,EAAQzf,KAAOvK,EAAKuK,MAAQ,GAExBwf,EAAW/nB,QACXgoB,EAAQ/nB,QAAU,EAAA0nB,OAAOxf,UAAU4f,EAAW/nB,QAGlD0lB,EAAWsC,CACf,MAAO,GAAmB,SAAfjoB,EAAMrE,KAAiB,CAC9B,IAAMwsB,EAAkCnoB,EAAOA,EAAMrE,MAC/CysB,EAAU,IAAI,EAAAtoB,UAAU7B,EAAK+B,MAAO,EAAAmI,QAAQ8e,OAAQ,EAAA9e,QAAQ8e,OAAQ,EAAG,EAAG/I,EAAYpL,OAC5FsV,EAAQ5f,KAAOvK,EAAKuK,MAAQ,GAExB2f,EAAUloB,QACVmoB,EAAQloB,QAAU,EAAA0nB,OAAOxf,UAAU+f,EAAUloB,QAG7CkoB,EAAUE,cACVD,EAAQrmB,MAAQomB,EAAUE,aAG1BF,EAAUG,kBACVF,EAAQG,SAAWJ,EAAUG,iBAGjC3C,EAAWyC,CACf,CAER,CA0CA,IAAKnqB,EAAKmkB,UAAW,CACjB,GAAInkB,EAAKulB,YACL,OAAOvlB,EAAKulB,YACT,GAAiB,OAAbmC,EAAmB,CAC1BzH,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,eACzD,IAAMmF,EAAQ,IAAI,EAAAlF,KAAKrlB,EAAKuK,MAAQ,GAAI0V,EAAYpL,OACpD0V,EAAMjF,iBAAmBrF,EAAYmF,eACrCnF,EAAYpL,MAAMsQ,wBAAyB,EAC3CnlB,EAAKulB,YAAcgF,EACnB7C,EAAW6C,CACf,CACJ,CAEA,GAAiB,OAAb7C,EAAmB,CACnB,GAAI1nB,EAAKW,QAAU+mB,aAAoB,EAAArC,MAxKf,SAACmC,EAAexnB,GAC5C,GAAIA,EAAKW,OAAQ,CACb,IAAMT,EAAW,IAAI,EAAAgK,QAAQ,EAAG,EAAG,GAC7B9L,EAAW,IAAI,EAAAkK,WACfjI,EAAU,IAAI,EAAA6J,QAAQ,EAAG,EAAG,GACtB,EAAAtJ,OAAOuJ,UAAUnK,EAAKW,QAC9B6pB,UAAUnqB,EAASjC,EAAU8B,GAEjCqnB,EAAcC,EAAStnB,EAAU9B,EAAUiC,EAC/C,MAAWL,EAAKC,aAAeD,EAAK5B,UAAY4B,EAAK1B,OACjDipB,EAAcC,EAAS,EAAAtd,QAAQC,UAAUnK,EAAKC,aAAc,EAAAqI,WAAW6B,UAAUnK,EAAK5B,UAAW,EAAA8L,QAAQC,UAAUnK,EAAK1B,QAG5HkpB,EAAQnmB,oBAAmB,EAC/B,CA2JYopB,CAAwB/C,EAAU1nB,OAC/B,CACH,IAAMC,EAAcD,EAAKC,aAAe,CAAC,EAAG,EAAG,GACzC7B,EAAW4B,EAAK5B,UAAY,CAAC,EAAG,EAAG,EAAG,GACtCE,EAAQ0B,EAAK1B,OAAS,CAAC,EAAG,EAAG,GACnCipB,EAAcG,EAAU,EAAAxd,QAAQC,UAAUlK,GAAc,EAAAqI,WAAW6B,UAAU/L,GAAW,EAAA8L,QAAQC,UAAU7L,GAC9G,CAEAopB,EAASgD,aAAY,GACrB1qB,EAAKulB,YAAcmC,CACvB,CAEA,OAAOA,CACX,EASMiD,GAAgB,SAAC1K,EAA2BvR,EAAYzN,EAAwB2pB,QAAA,IAAAA,IAAAA,GAAA,GAClF,IAAM5qB,EAAkBigB,EAAY9oB,MAAMuX,GACtC8Y,EAA0B,KAqB9B,GAjBQoD,IAFJ3K,EAAY0H,mBAAqBiD,GAAgB3K,EAAY4H,qBACG,IAA5D5H,EAAY4H,kBAAkBhb,QAAQ7M,EAAKuK,MAAQ,KAAuD,IAAzC0V,EAAY4H,kBAAkB9uB,QASlGiH,EAAKmkB,WAAayG,GAGH,QAFhBpD,EAAUC,GAAWxH,EAAajgB,EAAM0O,MAGpC8Y,EAAQ9Y,GAAKA,EACb8Y,EAAQvmB,OAASA,GAIrBjB,EAAKukB,SACL,IAAK,IAAI1rB,EAAI,EAAGA,EAAImH,EAAKukB,SAASxrB,OAAQF,IACtC8xB,GAAc1K,EAAajgB,EAAKukB,SAAS1rB,GAAI2uB,EAASoD,EAGlE,EAMMC,GAAW,SAAC5K,GAEd,IAAI6K,EAAuC7K,EAAY6K,aAEvD,GAAIA,EACA,IAAK,IAAIjyB,EAAI,EAAGA,EAAIiyB,EAAa3zB,MAAM4B,OAAQF,IAC3C8xB,GAAc1K,EAAa6K,EAAa3zB,MAAM0B,GAAI,WAGtD,IAAK,IAAMkyB,KAAS9K,EAAY+K,OAG5B,IAFAF,EAA2B7K,EAAY+K,OAAOD,GAErClyB,EAAI,EAAGA,EAAIiyB,EAAa3zB,MAAM4B,OAAQF,IAC3C8xB,GAAc1K,EAAa6K,EAAa3zB,MAAM0B,GAAI,MAQ9D,IA54BmB,SAAConB,GACpB,IAAK,IAAMgL,KAAQhL,EAAYppB,WAAY,CACvC,IAAMgS,EAA4BoX,EAAYppB,WAAWo0B,GAEzD,GAAKpiB,EAAUqiB,UAAariB,EAAU+Y,SAMtC,IAFA,IAAIuJ,EAAqC,KAEhCtyB,EAAI,EAAGA,EAAIgQ,EAAUqiB,SAASnyB,OAAQF,IAAK,CAEhD,IAAMirB,EAAUjb,EAAUqiB,SAASryB,GAC7BuyB,EAAiCviB,EAAU+Y,SAASkC,EAAQsH,SAElE,GAAKA,EAAL,CAIA,IAAIC,EAA8B,KAC9BC,EAA+B,KAE/BziB,EAAU0iB,YACVF,EAAYxiB,EAAU0iB,WAAWH,EAAQI,OACzCF,EAAaziB,EAAU0iB,WAAWH,EAAQK,UAE1CJ,EAAYD,EAAQI,MACpBF,EAAaF,EAAQK,QAGzB,IAAMC,EAAczK,EAAUH,sBAAsBb,EAAaA,EAAYkG,UAAUkF,IACjFM,EAAe1K,EAAUH,sBAAsBb,EAAaA,EAAYkG,UAAUmF,IAElFM,EAAW9H,EAAQnoB,OAAO+S,GAC5Bmd,EAAkB5L,EAAYpL,MAAMiX,YAAYF,GAMpD,GAJmB,OAAfC,IACAA,EAAa5L,EAAYpL,MAAMkX,cAAcH,IAG9B,OAAfC,EAAJ,CAKA,IAAMG,EAASH,aAAsB,EAAApH,KAGjCwH,EAAanI,EAAQnoB,OAAOH,KAC1B0wB,EAAkB7I,EAAmBxW,QAAQof,IAE1B,IAArBC,IACAD,EAAa3I,EAAsB4I,IAIvC,IAAIC,EAAgB,EAAArhB,UAAUshB,qBAEzBJ,IACkB,uBAAfC,GACAE,EAAgB,EAAArhB,UAAUgB,yBAC1B+f,EAAWzrB,mBAAqB,IAAI,EAAAkI,YAEpC6jB,EAAgB,EAAArhB,UAAUe,uBAKlC,IAAIhB,EAAwC,KACtCD,EAAO,GACTyhB,EAAc,EACdC,GAAY,EAEZN,GAAUb,GAAiBA,EAAcoB,UAAUxzB,SAAW2yB,EAAY3yB,SAC1E8R,EAAmBsgB,EACnBmB,GAAY,GAGXA,IACDrM,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,eACzDva,EAAmB,IAAI,EAAAC,UAAUmgB,EAAMe,EAAS,UAAYC,EAAY,EAAGE,EAAe,EAAArhB,UAAU0hB,yBACpGvM,EAAYpL,MAAMsQ,wBAAyB,GAI/C,IAAK,IAAIN,EAAI,EAAGA,EAAI6G,EAAY3yB,OAAQ8rB,IAAK,CACzC,IAAInrB,EAAa,KAYjB,GAVmB,uBAAfuyB,GAEAvyB,EAAQ,EAAA4O,WAAW6B,UAAU,CAACwhB,EAAaU,GAAcV,EAAaU,EAAc,GAAIV,EAAaU,EAAc,GAAIV,EAAaU,EAAc,KAClJA,GAAe,IAGf3yB,EAAQ,EAAAwQ,QAAQC,UAAU,CAACwhB,EAAaU,GAAcV,EAAaU,EAAc,GAAIV,EAAaU,EAAc,KAChHA,GAAe,GAGfL,EAAQ,CACR,IAAMxH,EAAaqH,EACf5rB,EAAc,EAAAiK,QAAQ8e,OACtB5oB,EAAqB,IAAI,EAAAkI,WACzBjI,EAAU,EAAA6J,QAAQ8e,OAGlBpmB,EAAM4hB,EAAKiI,gBAEXH,GAAanB,IACbvoB,EAAMuoB,EAAcoB,UAAU1H,GAAGnrB,OAGrCkJ,EAAI4nB,UAAUnqB,EAASD,EAAoBH,GAExB,aAAfgsB,EACAhsB,EAAcvG,EACQ,uBAAfuyB,EACP7rB,EAAqB1G,EAErB2G,EAAU3G,EAGdA,EAAQ,EAAAkH,OAAOC,QAAQR,EAASD,EAAoBH,EACxD,CAEKqsB,EAKMnB,IACPA,EAAcoB,UAAU1H,GAAGnrB,MAAQA,GALnCkR,EAAKzP,KAAK,CACNkQ,MAAOqgB,EAAY7G,GACnBnrB,MAAOA,GAKnB,EAGK4yB,GAAazhB,IACdA,EAAiBE,QAAQH,GACzBihB,EAAWh1B,WAAWsE,KAAK0P,IAG/BsgB,EAAgBtgB,EAEhBoV,EAAYpL,MAAM6X,cAAcb,GAChC5L,EAAYpL,MAAM8X,eAAed,EAAY,EAAGH,EAAYA,EAAY3yB,OAAS,IAAI,EAAM,EApG3F,MAFI,EAAAkX,MAAMqF,KAAK,4BAA8B2V,EAAO,gCAAkCW,EAAW,gBAxBjG,CA+HJ,CACJ,CACJ,CAwvBIgB,CAAe3M,GAENpnB,EAAI,EAAGA,EAAIonB,EAAYpL,MAAMkC,UAAUhe,OAAQF,IAAK,CACzD,IAAMivB,EAAW7H,EAAYpL,MAAMkC,UAAUle,GAC7ConB,EAAYpL,MAAM8X,eAAe7E,EAAU,EAAG/D,OAAO8I,WAAW,EAAM,EAC1E,CACJ,EA2KMC,GAAsB,SAACC,EAAsBC,EAA2BC,GAC1E,IAAK,IAAMC,KAAQF,EAAUrL,SAAU,CACnC,IAAMvD,EAAU4O,EAAUrL,SAASuL,GAC7BC,EAA4CH,EAAUzB,WAAWnN,GAEvE,GAAI2O,EAAUzK,oBAAsB4K,GAC5BC,EAAiB/P,WAAa+P,EAAiBljB,SAAWkjB,EAAiBntB,KAAM,CACjF,IAAMotB,EAAiBjK,EAAetW,QAAQsgB,EAAiB/P,UAE/D,IAAwB,IAApBgQ,EAEA,cADOH,EAAkBC,GAClB9J,EAAkBgK,EAEjC,CAER,CAEA,OAAOL,EAAUzK,iBACrB,EAMM+K,GAAkB,SAACpN,GAErB,IAAK,IAAMrd,KAAOqd,EAAY/d,UAC1BorB,GAAoBC,kBAChBtN,EACArd,GACA,WAAO,IACP,WAAO,GAGnB,EAMA,2BAwaA,QAvakB,EAAA4qB,cAAd,SAA4BC,EAAiB5Y,EAAclH,GACvD,IAAMsS,EAA4B,CAC9Bze,WAAY,CAAC,EACb2kB,UAAW,CAAC,EACZuH,QAAS,CAAC,EACV3M,YAAa,CAAC,EACdjY,OAAQ,CAAC,EACTnB,OAAQ,CAAC,EACThJ,QAAS,CAAC,EACVxH,MAAO,CAAC,EACRw2B,OAAQ,CAAC,EACThX,SAAU,CAAC,EACXiX,QAAS,CAAC,EACVC,SAAU,CAAC,EACXjM,SAAU,CAAC,EACXkM,WAAY,CAAC,EACb5rB,UAAW,CAAC,EACZrL,WAAY,CAAC,EACbqtB,MAAO,CAAC,EACR6J,eAAgB,GAEhB/C,OAAQ,CAAC,EAETgD,aAAc,EACdC,aAAc,EAEdpZ,MAAOA,EACPlH,QAASA,EAETugB,kBAAmB,EACnB7N,kBAAmB,CAAC,EAEpB8N,kBAAmB,EAEnBxG,kBAAkB,EAElByG,WAAY,GAEZhJ,eAAgB,MAoFpB,OAhFIqI,EAAWjsB,YACX+hB,EAAYkK,EAAWjsB,WAAY,aAAcye,GAGjDwN,EAAWM,gBACXxK,EAAYkK,EAAWM,eAAgB,iBAAkB9N,GAGzDwN,EAAWC,SAltCF,SAACW,EAAoBpO,GACtC,IAAK,IAAMqO,KAAOD,EAAe,CAC7B,IAAME,EAAeF,EAAcC,GACnCrO,EAAYyN,QAAQY,GAAOC,EAC3BtO,EAAY+N,cAChB,CACJ,CA6sCYQ,CAAaf,EAAWC,QAASzN,GAGjCwN,EAAW1M,aACXwC,EAAYkK,EAAW1M,YAAa,cAAed,GAGnDwN,EAAWtH,WACX5C,EAAYkK,EAAWtH,UAAW,YAAalG,GAG/CwN,EAAW3kB,QACXya,EAAYkK,EAAW3kB,OAAQ,SAAUmX,GAGzCwN,EAAW9lB,QACX4b,EAAYkK,EAAW9lB,OAAQ,SAAUsY,GAGzCwN,EAAW9uB,SACX4kB,EAAYkK,EAAW9uB,QAAS,UAAWshB,GAG3CwN,EAAWt2B,OACXosB,EAAYkK,EAAWt2B,MAAO,QAAS8oB,GAGvCwN,EAAWE,QACXpK,EAAYkK,EAAWE,OAAQ,SAAU1N,GAGzCwN,EAAW9W,UACX4M,EAAYkK,EAAW9W,SAAU,WAAYsJ,GAG7CwN,EAAWG,SA9uCF,SAACa,EAAoBxO,GACtC,IAAK,IAAMyO,KAAOD,EAAe,CAC7B,IAAME,EAAeF,EAAcC,GACnCzO,EAAY2N,QAAQc,GAAOC,EAC3B1O,EAAYgO,cAChB,CACJ,CAyuCYW,CAAanB,EAAWG,QAAS3N,GAGjCwN,EAAWI,UACXtK,EAAYkK,EAAWI,SAAU,WAAY5N,GAG7CwN,EAAW7L,UACX2B,EAAYkK,EAAW7L,SAAU,WAAY3B,GAG7CwN,EAAWK,YACXvK,EAAYkK,EAAWK,WAAY,aAAc7N,GAGjDwN,EAAWvrB,WACXqhB,EAAYkK,EAAWvrB,UAAW,YAAa+d,GAG/CwN,EAAW52B,YACX0sB,EAAYkK,EAAW52B,WAAY,aAAcopB,GAGjDwN,EAAWvJ,OACXX,EAAYkK,EAAWvJ,MAAO,QAASjE,GAGvCwN,EAAWzC,SACX/K,EAAY+K,OAASyC,EAAWzC,QAGhCyC,EAAW5Y,OAAS4Y,EAAWzC,SAC/B/K,EAAY6K,aAAe2C,EAAWzC,OAAOyC,EAAW5Y,QAGrDoL,CACX,EAEc,EAAA4O,gBAAd,SACI5O,EACAvR,EACAqG,EACArF,EACAsF,GAEA,IAAMlF,EAAsBmQ,EAAYyN,QAAQhf,GAE5C,EAAAuB,MAAM6e,SAAShf,EAAO9B,KACtB+gB,YAAW,WAAM,OAAAha,EAAU,IAAI9D,WAAW,EAAAhB,MAAM+e,aAAalf,EAAO9B,MAAnD,IAEjB,EAAAiC,MAAMgf,SACFhP,EAAYtS,QAAUmC,EAAO9B,KAC7B,SAACN,GAAS,OAAAqH,EAAU,IAAI9D,WAAWvD,GAAzB,GACVsH,OACApZ,GACA,GACA,SAAC+b,GACOA,GACAjI,EAAQiI,EAAQuX,OAAS,IAAMvX,EAAQwX,WAE/C,GAGZ,EAEc,EAAAC,uBAAd,SAAqCnP,EAA2BvR,EAAYqG,EAAwDrF,GAChI,IAAM9R,EAAwBqiB,EAAYtJ,SAASjI,GAEnD,GAAK9Q,GAAYA,EAAQqM,OAKzB,GAAIrM,EAAQyxB,eACRta,EAAU,UADd,CAKA,IAAM9K,EAAqBgW,EAAY0N,OAAO/vB,EAAQqM,QAElD,EAAAgG,MAAM6e,SAAS7kB,EAAO+D,KACtB+gB,YAAW,WAAM,OAAAha,EAAU,IAAI9D,WAAW,EAAAhB,MAAM+e,aAAa/kB,EAAO+D,MAAnD,IAEjB,EAAAiC,MAAMgf,SACFhP,EAAYtS,QAAU1D,EAAO+D,KAC7B,SAACN,GAAS,OAAAqH,EAAU,IAAI9D,WAAWvD,GAAzB,QACV9R,OACAA,GACA,GACA,SAAC+b,GACOA,GACAjI,EAAQiI,EAAQuX,OAAS,IAAMvX,EAAQwX,WAE/C,GAjBR,MAPIzf,EAAQ,GA2BhB,EAEc,EAAA4f,mBAAd,SAAiCrP,EAA2BvR,EAAYoB,EAAmCiF,GACvG,IAAMnX,EAAwBqiB,EAAYtJ,SAASjI,GAEnD,GAAI9Q,EAAQyxB,eACRta,EAAUnX,EAAQyxB,oBADtB,CAKA,IAAMjE,EAAwBnL,EAAY2B,SAAShkB,EAAQwtB,SAErDmE,EACFnE,EAAQoE,YAAcle,EAAmBuO,wBACzCuL,EAAQoE,YAAcle,EAAmBme,uBACzCrE,EAAQoE,YAAcle,EAAmBmO,uBACzC2L,EAAQoE,YAAcle,EAAmBoO,qBAEvCgQ,EAAe,EAAA1Q,QAAQe,sBAEvB4P,EAAiB,MAAV7f,EAAiB,IAAIN,KAAS,IAAIA,KAAK,CAACM,IAC/C8f,EAAUtgB,IAAIC,gBAAgBogB,GAC9BE,EAAgB,WAAM,OAAAvgB,IAAIwgB,gBAAgBF,EAApB,EACtBG,EAAa,IAAI,EAAA/Q,QAAQ4Q,EAAS3P,EAAYpL,OAAQ0a,GAAe,EAAMG,EAAcG,EAAeA,QACxFj0B,IAAlBwvB,EAAQ4E,QACRD,EAAWE,MAAQhP,EAAUnC,YAAYsM,EAAQ4E,aAE/Bp0B,IAAlBwvB,EAAQ8E,QACRH,EAAWI,MAAQlP,EAAUnC,YAAYsM,EAAQ8E,QAErDH,EAAWxlB,KAAOmE,EAElB9Q,EAAQyxB,eAAiBU,EACzBhb,EAAUgb,EAzBV,CA0BJ,EAEc,EAAAK,sBAAd,SAAoCnQ,EAA2BvR,EAAYqG,EAAyDrF,GAChI,IAAM2gB,EAAsBpQ,EAAY2N,QAAQlf,GAEhD,GAAI,EAAAuB,MAAM6e,SAASuB,EAAOriB,KAAM,CAC5B,IAAMsiB,EAAeC,KAAKF,EAAOriB,IAAIhS,MAAM,KAAK,IAC5C+Y,GACAA,EAAUub,EAElB,MACI,EAAArgB,MAAMgf,SAAShP,EAAYtS,QAAU0iB,EAAOriB,IAAK+G,OAAWnZ,OAAWA,GAAW,GAAO,SAAC+b,GAClFA,GAAWjI,GACXA,EAAQiI,EAAQuX,OAAS,IAAMvX,EAAQwX,WAE/C,GAER,EAEc,EAAA5B,kBAAd,SAAgCtN,EAA2BvR,EAAYqG,EAAyCrF,GAC5G,IAAM9S,EAA0BqjB,EAAY/d,UAAUwM,GACtD,GAAK9R,EAASowB,UAAd,CAOA,IAAMA,EAA4B/M,EAAY6N,WAAWlxB,EAASowB,WAClE,IAAKA,EAAW,CACZ/M,EAAYpL,MAAMsQ,yBAA2BlF,EAAYmF,eACzD,IAAMoL,EAAkB,IAAI,EAAAtJ,iBAAiBxY,EAAIuR,EAAYpL,OAM7D,OALA2b,EAAgBlL,iBAAmBrF,EAAYmF,eAC/CnF,EAAYpL,MAAMsQ,wBAAyB,EAC3CqL,EAAgBC,aAAe,IAAI,EAAA9G,OAAO,GAAK,GAAK,IACpD6G,EAAgBE,gBAAkB,EAAAC,SAASC,qCAC3C7b,EAAUyb,EAEd,CAEA,IAAMK,EAAwB5Q,EAAY4N,SAASb,EAAU6D,SACvDC,EAA+B9D,EAAU8D,OAEzCC,EAAuB,EAAAxP,OAAOC,aAAaqP,EAAQE,aAAe,gBAClEC,EAAsB,EAAAzP,OAAOC,aAAaqP,EAAQI,eAAiB,eACrEC,EAAkB,GAClBC,EAAiB,GAEfC,EAAkB,IAAIC,EAAUN,GAChCO,EAAiB,IAAID,EAAUL,GAE/B/D,EAAgE,CAAC,EACjEtL,EAAqB,GACrBD,EAAuB,GACvBE,EAAqB,GAG3B,IAAK,IAAMsL,KAAQF,EAAUrL,SAAU,CACnC,IAAMvD,EAAU4O,EAAUrL,SAASuL,GAC7BC,EAA4CH,EAAUzB,WAAWnN,GAIvE,GAFA6O,EAAkBC,GAAQC,GAEtBA,EAAiB/P,UAAa+P,EAAiBntB,MAASmtB,EAAiBljB,OAQlEkjB,EAAiBzvB,OAAS0T,EAAemgB,WAChD3P,EAASzmB,KAAK+xB,GAEdvL,EAASxmB,KAAK+xB,OAXmE,CACjF,IAAME,EAAiBjK,EAAetW,QAAQsgB,EAAiB/P,WACvC,IAApBgQ,GACAzL,EAASxmB,KAAKioB,EAAkBgK,WACzBH,EAAkBC,IAEzBvL,EAASxmB,KAAK+xB,EAEtB,CAKJ,CAEA,IAAK,IAAMsE,KAAQxE,EAAUtL,WAAY,CACrC,IAAM+P,EAAYzE,EAAUtL,WAAW8P,GAGvC,IAFM3N,EAA8CmJ,EAAUzB,WAAWkG,IAElDrU,SAAU,CAC7B,IAAM,EAAOwG,EAAaC,GACtB,GACAnC,EAAWvmB,KAAK,EAExB,CACJ,CAGA,MAAQi2B,EAAgBxO,SAAWwO,EAAgBzO,gBAG/C,GAFkByO,EAAgBhP,eAEhBrF,EAAWiG,WAA7B,CAKA,IAAI0O,GAAiB,EAErB,IAAK,IAAMF,KAAQxE,EAAUtL,WAAY,CAC/B+P,EAAYzE,EAAUtL,WAAW8P,GAAvC,IACM3N,EAA8CmJ,EAAUzB,WAAWkG,GAEzE,GAAIL,EAAgB9O,oBAAsBkP,GAAQ3N,EAAmBzG,SAAU,CAC3E8T,GAAmBtN,EAAaC,GAChC6N,GAAiB,EACjB,KACJ,CACJ,CAEIA,IAIJR,GAAmBpE,GAAoBsE,EAAiBpE,EAAWC,GAnBnE,MAFIiE,GAAmBE,EAAgB7O,cAyB3C,MAAQ+O,EAAe1O,SAAW0O,EAAe3O,gBAC3B2O,EAAelP,eAEfrF,EAAWiG,WAK7BmO,GAAkBrE,GAAoBwE,EAAgBtE,EAAWC,GAJ7DkE,GAAkBG,EAAe/O,cAQzC,IAAMoP,EAAa,CACf5P,OAAQ8O,EAAQE,aAAeriB,EAC/BsT,SAAU6O,EAAQI,eAAiBviB,GAGjCZ,EAAU,CACZ4T,WAAYA,EACZC,SAAUA,EACVC,SAAUA,EACVC,kBAAmBiP,GAAUA,EAAOc,SAA2C,IAAjCd,EAAOc,OAAO/kB,QAAQ,OAGxE,EAAA0U,OAAOC,aAAaqP,EAAQE,aAAeriB,EAAK,gBAAkBwiB,EAClE,EAAA3P,OAAOC,aAAaqP,EAAQI,eAAiBviB,EAAK,eAAiByiB,EAEnE,IAAMhU,EAAiB,IAAI,EAAA2E,eAAepT,EAAIuR,EAAYpL,MAAO8c,EAAY7jB,GAK7E,GAJAqP,EAAezN,QA/bM,SAACmhB,EAAuB1T,EAAgCzN,GACjF,OAAO,SAACmiB,EAAgBliB,GACpBwN,EAAe7I,SAAQ,GACvB5E,EAAQ,gCAAkCmhB,EAAQtmB,KAAO,YAAcoF,EAAQ,qCACnF,CACJ,CA0biCmiB,CAAqBjB,EAAS1T,EAAgBzN,GACvEyN,EAAe4U,WA/aQ,SAC3B9R,EACA9C,EACA6P,EACApwB,EACAqwB,EACAlY,GAEA,OAAO,SAACza,IAnF0B,SAClC2lB,EACA9C,EACA6P,EACApwB,EACAqwB,GAEA,IAAM+E,EAAiBp1B,EAASq1B,QAAUjF,EAAUzB,WAC9C2G,EAAoBlF,EAAUrL,S,WAKzBuL,GACP,IAAM9O,EAAmC6O,EAAkBC,GACrDxvB,EAAO0gB,EAAQ1gB,KACjBhE,EAAcs4B,EAAgBE,EAAkBhF,IAOpD,QALctxB,IAAVlC,IAEAA,EAAa0kB,EAAQ1kB,QAGpBA,E,iBAIL,IAAMy4B,EAAgB,SAACjV,GACnB,OAAO,SAACtf,GACAwgB,EAAQ1kB,OAASwjB,IAEjBC,EAAeiV,WAAWlV,EAAatf,UAChCqvB,EAAkB/P,GAEjC,CACJ,EAGIxf,IAAS0T,EAAemgB,WACxBjE,GAAoB+E,iBAAiBpS,EAAarjB,EAASq1B,OAASv4B,EAAQ0kB,EAAQ1kB,MAAOy4B,EAAcjF,IAAO,WAAM,OAAAiF,EAAc,KAAd,IAIlH/T,EAAQ1kB,OAASunB,EAAU9C,WAAWhB,EAAgB+P,EAAMtwB,EAASq1B,OAASv4B,EAAQ0kB,EAAQ1kB,MAAOgE,WAE9FuvB,EAAkBC,E,EAhCrC,IAAK,IAAMA,KAAQD,E,EAARC,EAoCf,CAmCQoF,CAA8BrS,EAAa9C,EAAgB6P,EAAWpwB,EAAUqwB,GAEhF9P,EAAeoV,OAAS,SAACxpB,IAlJJ,SACzBA,EACAkX,EACAgN,EACA9P,EACA6P,EACApwB,EACAmY,GAEA,IAAMid,EAAiBp1B,EAASq1B,QAAUjF,EAAUzB,WAEpD,IAAK,IAAM2B,KAAQD,EAAmB,CAClC,IAAM7O,EAAmC6O,EAAkBC,GACrDxvB,EAAO0gB,EAAQ1gB,KAErB,GAAIA,IAAS0T,EAAeuM,YAAcjgB,IAAS0T,EAAe0M,YAAcpgB,IAAS0T,EAAe6M,WACpG,IAAIG,EAAQhB,UAAagB,EAAQnU,QAAWmU,EAAQpe,MAE7C,GAAIoe,EAAQhB,WAAagB,EAAQnU,QAAUmU,EAAQpe,MAAO,CAC7D,IAAIiK,EAASgW,EAAYpL,MAAMkX,cAAc3N,EAAQnU,QAAUmU,EAAQpe,MAAQ,IAI/E,GAHe,OAAXiK,IACAA,EAASgW,EAAYpL,MAAMiX,YAAY1N,EAAQnU,QAAUmU,EAAQpe,MAAQ,KAE9D,OAAXiK,EACA,SAGJgX,EAAUjE,UAAUiD,EAAYpL,MAAO5K,EAAQmU,EAAS8O,EAAc/P,EAAeqV,YACzF,OAXIvR,EAAUjE,UAAUiD,EAAYpL,MAAO9L,EAAMqV,EAAS8O,EAAc/P,EAAeqV,iBAYpF,CACH,IAAM94B,EAAcs4B,EAAgBhF,EAAUrL,SAASuL,IACvD,IAAKxzB,EACD,SAGJ,GAAIgE,IAAS0T,EAAemgB,WAAY,CACpC,IAAM3zB,EAAUqiB,EAAYtJ,SAAS/Z,EAASq1B,OAASv4B,EAAQ0kB,EAAQ1kB,OAAO21B,eAE9E,GAAIzxB,QACA,SAGKuf,EAAeqV,YAAaJ,WAAWlF,EAAMtvB,EAC1D,MACIqjB,EAAU9C,WAAmBhB,EAAeqV,YAAatF,EAAMxzB,EAAOgE,EAE9E,CACJ,CAEAqX,EAAUoI,EACd,CAiGYsV,CAAqB1pB,EAAMkX,EAAagN,EAAmB9P,EAAgB6P,EAAWpwB,EAAUmY,EACpG,CACJ,CACJ,CAgaoC2d,CAAuBzS,EAAa9C,EAAgB6P,EAAWpwB,EAAUqwB,EAAmBlY,GACxHoI,EAAeuT,gBAAkB,EAAAC,SAASC,gCAEtCE,GAAUA,EAAO6B,UAAW,CAC5B,IAAMA,EAAY7B,EAAO6B,UACrBA,EAAUC,UAAYD,EAAUC,SAAS,KAAOphB,EAAaqhB,OAC7D1V,EAAe2V,iBAAkB,GAGrC,IAAMC,EAAYJ,EAAUK,kBACxBD,IAEIA,EAAU,KAAOthB,EAAkBwhB,WACnCF,EAAU,KAAOthB,EAAkByhB,qBACnCH,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB0hB,IAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUg2B,cAErCN,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB6hB,MACnCP,EAAU,KAAOthB,EAAkB0hB,IAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUk2B,aAErCR,EAAU,KAAOthB,EAAkBwhB,WACnCF,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB6hB,MACnCP,EAAU,KAAOthB,EAAkB0hB,IAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUm2B,UAErCT,EAAU,KAAOthB,EAAkB6hB,MACnCP,EAAU,KAAOthB,EAAkBgiB,qBACnCV,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB0hB,IAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUq2B,eAErCX,EAAU,KAAOthB,EAAkBkiB,WACnCZ,EAAU,KAAOthB,EAAkB6hB,MACnCP,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB0hB,IAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUu2B,eAErCb,EAAU,KAAOthB,EAAkBwhB,WACnCF,EAAU,KAAOthB,EAAkBgiB,qBACnCV,EAAU,KAAOthB,EAAkB0hB,KACnCJ,EAAU,KAAOthB,EAAkB0hB,MAEnChW,EAAeiW,UAAY,EAAA/1B,UAAUw2B,iBAGjD,CAlLA,MAJQnkB,GACAA,EAAQ,sBAsLpB,EACJ,EAxaA,GA+aA,2BA0TA,QAvTkB,EAAAokB,kBAAd,SAAgCC,GACxBC,EAAWC,WAAWF,EAAUxpB,MAChC,EAAA0F,MAAMnU,MAAM,4BAA8Bi4B,EAAUxpB,KAAO,oBAI/DypB,EAAWC,WAAWF,EAAUxpB,MAAQwpB,CAC5C,EAEO,YAAAzf,QAAP,WAEA,EAEQ,YAAA4f,iBAAR,SACI7d,EACAxB,EACAnH,EACAC,EACAyX,EACArQ,EACAC,EACAtF,GARJ,WAyEI,OA/DAmF,EAAMnM,sBAAuB,EAE7B4kB,GAAoB6G,iBAChBtf,EACAnH,EACAC,GACA,SAACsS,GACGA,EAAYmF,eAAiBA,EAC7BnF,EAAY0H,kBAAmB,EAEX,KAAhBtR,EACA4J,EAAY4H,kBAAoB,GACF,iBAAhBxR,EACd4J,EAAY4H,kBAAoB,CAACxR,IAC1BA,GAAiBA,aAAuBve,OAG/CmoB,EAAY4H,kBAAoB,GAChC,EAAA5X,MAAMqF,KAAK,4DAHX2K,EAAY4H,kBAAoB,CAACxR,GAOrC,EAAK+d,aAAanU,GAElB,IAAMnX,EAAyB,GACzBiO,EAAwB,GAG9B,IAAK,IAAMuN,KAAOrE,EAAY9oB,MAAO,CACjC,IAAM6I,EAAkBigB,EAAY9oB,MAAMmtB,GAEtCtkB,EAAKulB,uBAAuB,EAAA8O,cAC5BvrB,EAAO3N,KAAmB6E,EAAKulB,YAEvC,CAEA,IAAK,IAAM+O,KAAOrU,EAAYiE,MAAO,CACjC,IAAM0D,EAAmB3H,EAAYiE,MAAMoQ,GAEvC1M,EAAKK,2BAA2B,EAAAD,UAChCjR,EAAU5b,KAAKysB,EAAKK,gBAE5B,CAGA,EAAKsM,kBAAkBtU,GAAa,WAChC,EAAKuU,kBAAkBvU,GAAa,WAChCoN,GAAgBpN,GAChB4K,GAAS5K,IAEJ5I,EAAe2D,oBAAsBjG,GACtCA,EAAUjM,EAAQiO,EAE1B,GACJ,IAEIM,EAAe2D,oBAAsBjG,GACrCA,EAAUjM,EAAQiO,EAE1B,GACArH,IAGG,CACX,EAYO,YAAA0G,gBAAP,SACIC,EACAxB,EACAuQ,EACA1X,EACAC,EACAqH,GANJ,WAQI,OAAO,IAAI1b,SAAQ,SAACC,EAASC,GACzB,EAAK06B,iBACD7d,EACAxB,EACAnH,EACAC,EACAyX,GACA,SAACtc,EAAQiO,GACLxd,EAAQ,CACJuP,OAAQA,EACRgO,gBAAiB,GACjBC,UAAWA,EACXngB,gBAAiB,GACjB+Q,OAAQ,GACRqP,eAAgB,GAChBH,WAAY,GACZ4d,eAAgB,IAExB,GACAzf,GACA,SAACvG,GACGjV,EAAO,IAAIsC,MAAM2S,GACrB,GAER,GACJ,EAEQ,YAAAimB,WAAR,SACI7f,EACAnH,EACAC,EACAoH,EACAC,EACAtF,GANJ,WAQImF,EAAMnM,sBAAuB,EAE7B4kB,GAAoB6G,iBAChBtf,EACAnH,EACAC,GACA,SAACsS,GAEGqN,GAAoBqH,2BAChB1U,GACA,WAEI,EAAKmU,aAAanU,GAGlB,EAAKsU,kBAAkBtU,GAAa,WAChC,EAAKuU,kBAAkBvU,GAAa,WAChCoN,GAAgBpN,GAChB4K,GAAS5K,GAEJ5I,EAAe2D,oBAChBjG,GAER,GACJ,IAEIsC,EAAe2D,oBACfjG,GAER,GACArF,EAER,GACAA,EAER,EAUO,YAAA6G,UAAP,SAAiB1B,EAAcnH,EAAuBC,EAAiBqH,GAAvE,WACI,OAAO,IAAI1b,SAAQ,SAACC,EAASC,GACzB,EAAKk7B,WACD7f,EACAnH,EACAC,GACA,WACIpU,GACJ,GACAyb,GACA,SAACvG,GACGjV,EAAO,IAAIsC,MAAM2S,GACrB,GAER,GACJ,EAEQ,YAAA+lB,kBAAR,SAA0BvU,EAA2B2U,GACjD,IAAIC,GAAa,EAEXC,EAAgB,SAACpG,EAAa2B,GAChC/C,GAAoB8C,sBAChBnQ,EACAyO,GACA,SAAC4B,GACOA,aAAwBriB,cAI5BgS,EAAYkO,oBAERmC,IACA,EAAA/O,OAAOC,aAAakN,GAAO2B,EAAO3yB,OAASyT,EAAY4jB,OAAS,eAAiB,gBAAkBzE,GAGnGrQ,EAAYkO,oBAAsBlO,EAAYgO,cAC9C2G,IAER,IACA,WACI,EAAA3kB,MAAMnU,MAAM,2CAA6C4yB,EAAM,eAAiB2B,EAAOriB,IAC3F,GAER,EAEA,IAAK,IAAM0gB,KAAOzO,EAAY2N,QAAS,CACnCiH,GAAa,EAEb,IAAMxE,EAAsBpQ,EAAY2N,QAAQc,GAC5C2B,EACAyE,EAAcE,KAAK1+B,KAAMo4B,EAAK2B,EAA9ByE,GAEA,EAAA7kB,MAAMnU,MAAM,oBAAsB4yB,EAE1C,CAEKmG,GACDD,GAER,EAEQ,YAAAL,kBAAR,SAA0BtU,EAA2BgV,GACjD,IAAIC,GAAa,EAEXC,EAAgB,SAAC7G,EAAaxe,GAChCwd,GAAoBuB,gBAChB5O,EACAqO,GACA,SAACpO,GACGD,EAAYiO,oBAERhO,IACIA,EAAWlP,YAAciP,EAAYyN,QAAQY,GAAKtd,YAClD,EAAAf,MAAMnU,MAAM,gBAAkBwyB,EAAM,cAAgBpO,EAAWlP,WAAa,eAAiBlB,EAAOkB,YAGxGiP,EAAYI,kBAAkBiO,GAAOpO,GAGrCD,EAAYiO,oBAAsBjO,EAAY+N,cAC9CiH,GAER,IACA,WACI,EAAAhlB,MAAMnU,MAAM,mCAAqCwyB,EAAM,eAAiBxe,EAAO9B,IACnF,GAER,EAEA,IAAK,IAAMsgB,KAAOrO,EAAYyN,QAAS,CACnCwH,GAAa,EAEb,IAAMplB,EAAsBmQ,EAAYyN,QAAQY,GAC5Cxe,EACAqlB,EAAcH,KAAK1+B,KAAMg4B,EAAKxe,EAA9BqlB,GAEA,EAAAllB,MAAMnU,MAAM,oBAAsBwyB,EAE1C,CAEK4G,GACDD,GAER,EAEQ,YAAAb,aAAR,SAAqBnU,GACjB,IAAI6K,EAA2B7K,EAAY6K,aAE3C,GAAIA,EAEA,IAAK,IAAIjyB,EAAI,EAAGA,EAAIiyB,EAAa3zB,MAAM4B,OAAQF,IAC3C8xB,GAAc1K,EAAa6K,EAAa3zB,MAAM0B,GAAI,WAItD,IAAK,IAAMkyB,KAAS9K,EAAY+K,OAG5B,IAFAF,EAA2B7K,EAAY+K,OAAOD,GAErClyB,EAAI,EAAGA,EAAIiyB,EAAa3zB,MAAM4B,OAAQF,IAC3C8xB,GAAc1K,EAAa6K,EAAa3zB,MAAM0B,GAAI,KAIlE,EAxTc,EAAAo7B,WAAsD,CAAC,EAyTzE,C,CA1TA,GA6TA,cAGI,WAAmB1pB,GACfjU,KAAK8+B,MAAQ7qB,CACjB,CA+OJ,OA7OI,sBAAW,mBAAI,C,IAAf,WACI,OAAOjU,KAAK8+B,KAChB,E,gCAYO,YAAAC,iBAAP,SAAwBxgB,EAAcnH,EAAuBC,EAAiBoH,EAAiDrF,GAC3H,OAAO,CACX,EAUO,YAAA4lB,2BAAP,SAAkCrV,EAA2BlL,EAAuBrF,GAChF,OAAO,CACX,EAYO,YAAA6lB,gBAAP,SACItV,EACAvR,EACAqG,EACArF,EACAsF,GAEA,OAAO,CACX,EAWO,YAAAwgB,uBAAP,SAA8BvV,EAA2BvR,EAAYqG,EAA8CrF,GAC/G,OAAO,CACX,EAYO,YAAA+lB,mBAAP,SAA0BxV,EAA2BvR,EAAYoB,EAAyBiF,EAAuCrF,GAC7H,OAAO,CACX,EAWO,YAAAgmB,sBAAP,SAA6BzV,EAA2BvR,EAAYqG,EAA2CrF,GAC3G,OAAO,CACX,EAWO,YAAAimB,kBAAP,SAAyB1V,EAA2BvR,EAAYqG,EAAyCrF,GACrG,OAAO,CACX,EAMc,EAAAykB,iBAAd,SACItf,EACAnH,EACAC,EACAoH,EACArF,GAEA4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBR,iBAAiBxgB,EAAOnH,EAAMC,EAASoH,EAAWrF,EAC7E,IACA,WACIqf,YAAW,WACFha,GAGLA,EAAU+gB,GAAetI,cAAc9f,EAAKqI,KAAMlB,EAAOlH,GAC7D,GACJ,GAER,EAEc,EAAAgnB,2BAAd,SAAyC1U,EAA2BlL,EAAuBrF,GACvF4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBP,2BAA2BrV,EAAalL,EAAWrF,EAC9E,IACA,WACIqf,YAAW,WACPha,GACJ,GACJ,GAER,EAEc,EAAA8Z,gBAAd,SACI5O,EACAvR,EACAqG,EACArF,EACAsF,GAEAsY,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBN,gBAAgBtV,EAAavR,EAAIqG,EAAWrF,EAASsF,EAChF,IACA,WACI8gB,GAAejH,gBAAgB5O,EAAavR,EAAIqG,EAAWrF,EAASsF,EACxE,GAER,EAEc,EAAAqd,iBAAd,SAA+BpS,EAA2BvR,EAAYqG,EAAuCrF,GACzG4d,EAAoByI,wBAChB9V,EACAvR,GACA,SAACoB,GACOA,GACAwd,EAAoB0I,oBAAoB/V,EAAavR,EAAIoB,EAAQiF,EAAWrF,EAEpF,GACAA,EAER,EAEc,EAAA0gB,sBAAd,SAAoCnQ,EAA2BvR,EAAYqG,EAAuDrF,GAC9H4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBH,sBAAsBzV,EAAavR,EAAIqG,EAAWrF,EAC7E,IACA,WACIomB,GAAe1F,sBAAsBnQ,EAAavR,EAAIqG,EAAWrF,EACrE,GAER,EAEc,EAAA6d,kBAAd,SAAgCtN,EAA2BvR,EAAYqG,EAAyCrF,GAC5G4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBF,kBAAkB1V,EAAavR,EAAIqG,EAAWrF,EACzE,IACA,WACIomB,GAAevI,kBAAkBtN,EAAavR,EAAIqG,EAAWrF,EACjE,GAER,EAEe,EAAAqmB,wBAAf,SACI9V,EACAvR,EACAqG,EACArF,GAEA4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBL,uBAAuBvV,EAAavR,EAAIqG,EAAWrF,EAC9E,IACA,WACIomB,GAAe1G,uBAAuBnP,EAAavR,EAAIqG,EAAWrF,EACtE,GAER,EAEe,EAAAsmB,oBAAf,SACI/V,EACAvR,EACAoB,EACAiF,EACArF,GAEA4d,EAAoBsI,kBAChB,SAACC,GACG,OAAOA,EAAgBJ,mBAAmBxV,EAAavR,EAAIoB,EAAQiF,EAAWrF,EAClF,IACA,WACIomB,GAAexG,mBAAmBrP,EAAavR,EAAIoB,EAAQiF,EAC/D,GAER,EAEe,EAAA6gB,iBAAf,SAAgCK,EAAyDC,GACrF,IAAK,IAAMC,KAAiBnC,GAAWC,WAEnC,GAAIgC,EADoBjC,GAAWC,WAAWkC,IAE1C,OAIRD,GACJ,EACJ,EApPA,GAsPA7e,EAAeyB,mBAAqB,WAAM,WAAIkb,EAAJ,ECxwE1C,IAiBA,eAGI,aACI,SAAK,UAAC,oBAAkB,IAC5B,CAyDJ,OA9DyC,aAOrB,YAAAqB,iBAAhB,SAAiCxgB,EAAcnH,EAAuBC,EAAiBoH,GACnF,IAAMgZ,EAAuBrgB,EAAKqI,KAAMgY,eACxC,SAAKA,IAAyD,IAAvCA,EAAelhB,QAAQvW,KAAKiU,QAAiBmD,EAAKuM,MAIzE3jB,KAAK8/B,KAAO1oB,EAAKuM,IACjBlF,EAAU+gB,GAAetI,cAAc9f,EAAKqI,KAAMlB,EAAOlH,IAClD,GACX,EAEgB,YAAA4nB,gBAAhB,SAAgCtV,EAA2BvR,EAAYqG,EAA8CrF,GACjH,OAAuD,IAAnDuQ,EAAY8N,eAAelhB,QAAQvW,KAAKiU,OApClB,gBAwCtBmE,IAIJpY,KAAK8/B,KAAKvlB,UAAU,EAAGva,KAAK8/B,KAAKplB,YAAY/W,KAAK8a,GAAW,SAACpF,GAAU,OAAAD,EAAQC,EAAMlB,QAAd,KACjE,EACX,EAEgB,YAAA+mB,uBAAhB,SAAuCvV,EAA2BvR,EAAYqG,GAC1E,IAAMnX,EAAwBqiB,EAAYtJ,SAASjI,GAC7CzE,EAAqBgW,EAAY0N,OAAO/vB,EAAQqM,QACtD,IAAKA,EAAOzI,cAAgBlL,KAAKiU,QAAQN,EAAOzI,YAC5C,OAAO,EAGX,IAAM60B,EAAuCpsB,EAAOzI,WAAWlL,KAAKiU,MAC9D2V,EAA8BD,EAAYc,YAAYsV,EAAUnW,YAGtE,OADAnL,EADekM,EAAUjB,wBAAwBC,EAAaC,EAAY,EAAGA,EAAWlP,WAAYE,EAAesP,iBAE5G,CACX,EAEgB,YAAAkV,sBAAhB,SAAsCzV,EAA2BvR,EAAYqG,GACzE,IAAMsb,EAAsBpQ,EAAY2N,QAAQlf,GAChD,IAAK2hB,EAAO7uB,cAAgBlL,KAAKiU,QAAQ8lB,EAAO7uB,YAC5C,OAAO,EAGX,IAAM80B,EAAoDjG,EAAO7uB,WAAWlL,KAAKiU,MAC3E2V,EAA8BD,EAAYc,YAAYuV,EAAsBpW,YAC5EqW,EAActV,EAAUjB,wBAAwBC,EAAaC,EAAY,EAAGA,EAAWlP,WAAYE,EAAesP,eAOxH,OALAuO,YAAW,WACP,IAAMuB,EAAerP,EAAUC,mBAAmBqV,GAClDxhB,EAAUub,EACd,KAEO,CACX,EACJ,EA9DA,CAAyChD,IAgEzC0G,GAAWF,kBAAkB,IAAI0C,IClBjC,mBACI,aACI,SAAK,UAAC,yBAAuB,IACjC,CAqIJ,OAxIkD,aAK9B,YAAAlB,2BAAhB,SAA2CrV,GACvC,IAAKA,EAAYze,WACb,OAAO,EAGX,IAAMuyB,EAAyC9T,EAAYze,WAAWlL,KAAKiU,MAC3E,IAAKwpB,EACD,OAAO,EAIX,IAAMpsB,EAASosB,EAAUpsB,OACzB,GAAIA,EACA,IAAK,IAAMojB,KAASpjB,EAAQ,CACxB,IAAM5F,EAAmC4F,EAAOojB,GAEhD,OAAQhpB,EAAMrE,MACV,IAAK,UACD,IAAM+4B,EAAe,IAAI,EAAA/M,iBAAiB3nB,EAAMwI,KAAM,IAAI,EAAAL,QAAQ,EAAG,EAAG,GAAI+V,EAAYpL,OAClF6hB,EAAU30B,EAAM20B,QAClBA,IACAD,EAAax0B,QAAU,EAAA0nB,OAAOxf,UAAUusB,EAAQ10B,OAAS,CAAC,EAAG,EAAG,KAEpE,MAEJ,IAAK,QACD,IAAM+nB,EAAa,IAAI,EAAAE,WAAWloB,EAAMwI,KAAM,IAAI,EAAAL,QAAQ,GAAI,GAAI,IAAK+V,EAAYpL,OAC7E8hB,EAAQ50B,EAAM40B,MAChBA,IACA5M,EAAW9nB,QAAU,EAAA0nB,OAAOxf,UAAUwsB,EAAM30B,OAAS,CAAC,EAAG,EAAG,KAEhE,MAEJ,IAAK,cACD,IAAM6nB,EAAW,IAAI,EAAAC,iBAAiB/nB,EAAMwI,KAAM,IAAI,EAAAL,QAAQ,GAAI,EAAG,GAAI+V,EAAYpL,OAC/E+hB,EAAc70B,EAAM60B,YACtBA,IACA/M,EAAS5nB,QAAU,EAAA0nB,OAAOxf,UAAUysB,EAAY50B,OAAS,CAAC,EAAG,EAAG,KAEpE,MAEJ,IAAK,OACD,IAAMgG,EAAOjG,EAAMiG,KACfA,IACkB,IAAI,EAAAnG,UAClBE,EAAMwI,KACN,IAAI,EAAAL,QAAQ,EAAG,GAAI,GACnB,IAAI,EAAAA,QAAQ,GAAI,EAAG,GACnBlC,EAAK6uB,cAAgBC,KAAKC,GAC1B/uB,EAAKqiB,iBAAmB,EACxBpK,EAAYpL,OAEN5S,QAAU,EAAA0nB,OAAOxf,UAAUnC,EAAKhG,OAAS,CAAC,EAAG,EAAG,KAE9D,MAEJ,QACI,EAAAiO,MAAMqF,KAAK,+CAAiDvT,EAAMrE,KAAO,mBAGrF,CAGJ,OAAO,CACX,EAEgB,YAAAi4B,kBAAhB,SAAkC1V,EAA2BvR,EAAYqG,EAAyCrF,GAC9G,IAAM9S,EAA0BqjB,EAAY/d,UAAUwM,GACtD,IAAK9R,IAAaA,EAAS4E,WACvB,OAAO,EAGX,IAAMuyB,EAA2Cn3B,EAAS4E,WAAWlL,KAAKiU,MAC1E,IAAKwpB,EACD,OAAO,EAGX,IAAMiD,EAAmB,IAAI,EAAA9P,iBAAiBxY,EAAIuR,EAAYpL,OAuC9D,OAtCAmiB,EAAiBtG,gBAAkB,EAAAC,SAASC,gCAEhB,aAAxBmD,EAAU/G,YACVgK,EAAiBC,iBAAkB,GAGvCD,EAAiBlE,qBAA4Cl3B,IAA1Bm4B,EAAUmD,cAAqCnD,EAAUmD,YAC5FF,EAAiB9zB,WAA0CtH,IAAlCm4B,EAAU9B,OAAOkF,aAA6B,EAAMpD,EAAU9B,OAAOkF,aAC9FH,EAAiBI,mBAA+Cx7B,IAA/Bm4B,EAAU9B,OAAOoF,UAA0B,EAAMtD,EAAU9B,OAAOoF,UAG3D,iBAA7BtD,EAAU9B,OAAOyE,QACxBpgC,KAAKghC,aAAarX,EAAa8T,EAAU9B,OAAOyE,QAASM,EAAkB,iBAAkBtnB,GAE7FsnB,EAAiBO,aAAe,EAAA5N,OAAOxf,UAAU4pB,EAAU9B,OAAOyE,SAAW,CAAC,EAAG,EAAG,IAIhD,iBAA7B3C,EAAU9B,OAAOhwB,QACxB3L,KAAKghC,aAAarX,EAAa8T,EAAU9B,OAAOhwB,QAAS+0B,EAAkB,iBAAkBtnB,GAE7FsnB,EAAiBvG,aAAe,EAAA9G,OAAOxf,UAAU4pB,EAAU9B,OAAOhwB,SAAW,CAAC,EAAG,EAAG,IAI/C,iBAA9B8xB,EAAU9B,OAAOuF,SACxBlhC,KAAKghC,aAAarX,EAAa8T,EAAU9B,OAAOuF,SAAUR,EAAkB,kBAAmBtnB,GAE/FsnB,EAAiB50B,cAAgB,EAAAunB,OAAOxf,UAAU4pB,EAAU9B,OAAOuF,UAAY,CAAC,EAAG,EAAG,IAIjD,iBAA9BzD,EAAU9B,OAAOwF,SACxBnhC,KAAKghC,aAAarX,EAAa8T,EAAU9B,OAAOwF,SAAUT,EAAkB,kBAAmBtnB,GAE/FsnB,EAAiBU,cAAgB,EAAA/N,OAAOxf,UAAU4pB,EAAU9B,OAAOwF,UAAY,CAAC,EAAG,EAAG,KAGnF,CACX,EAEQ,YAAAH,aAAR,SAAqBrX,EAA2BvR,EAAY9R,EAA4B+6B,EAAsBjoB,GAE1GomB,GAAe1G,uBACXnP,EACAvR,GACA,SAACoB,GAEGgmB,GAAexG,mBAAmBrP,EAAavR,EAAIoB,GAAQ,SAAClS,GAAY,OAAOhB,EAAU+6B,GAAgB/5B,CAAjC,GAC5E,GACA8R,EAER,EACJ,EAxIA,CAAkD4d,IA0IlD0G,GAAWF,kBAAkB,IAAI8D,ICtMjC,IAAMC,GAA4B,IAAIC,IAKzBC,GAAoFF,GAQ1F,SAASG,GAAsBztB,EAAc0tB,EAA0BniC,GACtEoiC,GAAwB3tB,IACxB,EAAA8K,OAAOC,KAAK,mCAA4B/K,EAAI,qBAGhDstB,GAA0B55B,IAAIsM,EAAM,CAChC0tB,gBAAe,EACfniC,QAAO,GAEf,CAOO,SAASoiC,GAAwB3tB,GACpC,OAAOstB,GAA0BM,OAAO5tB,EAC5C,C,cCyDA,2BAyCA,QAjCkB,EAAA6tB,IAAd,SAAqBC,EAAiBC,EAAiC75B,GACnE,IAAK65B,GAAkB18B,MAAT6C,IAAuB65B,EAAM75B,GACvC,MAAM,IAAI3C,MAAM,UAAGu8B,EAAO,mCAA2B55B,EAAK,MAG9D,OAAO65B,EAAM75B,EACjB,EAQc,EAAA85B,OAAd,SAAwBD,EAAiC75B,GACrD,OAAK65B,GAAkB18B,MAAT6C,GAAuB65B,EAAM75B,GAIpC65B,EAAM75B,GAHF,IAIf,EAMc,EAAA+5B,OAAd,SAAqBF,GACjB,GAAIA,EACA,IAAK,IAAI75B,EAAQ,EAAGA,EAAQ65B,EAAMv/B,OAAQ0F,IACtC65B,EAAM75B,GAAOA,MAAQA,CAGjC,EACJ,EAzCA,GAqDO,SAASg6B,GAAqC3uB,GACjD,GAAIA,EAAS4uB,KAAO5uB,EAAS6uB,IAAK,CAC9B,IAAMC,EAAW9uB,EAAS4uB,IACpBG,EAAW/uB,EAAS6uB,IACpBG,EAAY,EAAAC,WAAW7uB,QAAQ,GAAG8uB,eAAeJ,EAAS,GAAIA,EAAS,GAAIA,EAAS,IACpFK,EAAY,EAAAF,WAAW7uB,QAAQ,GAAG8uB,eAAeH,EAAS,GAAIA,EAAS,GAAIA,EAAS,IAC1F,GAAI/uB,EAASovB,YAAyC,OAA3BpvB,EAASqW,cAA+C,CAC/E,IAAIgZ,EAAU,EACd,OAAQrvB,EAASqW,eACb,KAAK,KACDgZ,EAAU,IACV,MACJ,KAAK,KACDA,EAAU,IACV,MACJ,KAAK,KACDA,EAAU,MACV,MACJ,KAAK,KACDA,EAAU,MAGlB,IAAMC,EAAiB,EAAID,EAC3BL,EAAU1uB,aAAagvB,GACvBH,EAAU7uB,aAAagvB,EAC3B,CACA,OAAO,IAAI,EAAAC,aAAaP,EAAWG,EACvC,CACA,OAAO,IACX,CAKA,kBA8GI,WAAYh4B,GA5GI,KAAAq4B,kBAAoB,IAAIxhC,MAGjC,KAAAyhC,gBAA4C,KAG5C,KAAAC,eAA0B,GAG1B,KAAAC,sBAAwB,EAGxB,KAAAC,4BAA6B,EAG7B,KAAAC,yBAA0B,EAGhB,KAAAC,YAAc,IAAI9hC,MAC3B,KAAA+hC,WAAY,EACZ,KAAAC,SAA6B,KAC7B,KAAAC,UAA8B,KAC9B,KAAAC,eAAmC,KAEnC,KAAA5D,KAA8B,KAE9B,KAAA6D,iBAA4C,KAC5C,KAAAC,4BAAgE,CAAC,EACxD,KAAAC,sBAAwB,IAAIriC,MAiFzCxB,KAAK8xB,QAAUnnB,CACnB,CA2qFJ,OAhvFkB,EAAA6yB,kBAAd,SAAgCvpB,EAAczU,GAC1CkiC,GAAsBztB,GAAM,EAAOzU,EACvC,EAQc,EAAAskC,oBAAd,SAAkC7vB,GAC9B,OAAO2tB,GAAwB3tB,EACnC,EAKA,sBAAW,mBAAI,C,IAAf,WACI,IAAKjU,KAAK+E,MACN,MAAM,IAAIS,MAAM,8BAGpB,OAAOxF,KAAK+E,KAChB,E,gCAKA,sBAAW,kBAAG,C,IAAd,WACI,OAAO/E,KAAK8/B,IAChB,E,gCAKA,sBAAW,qBAAM,C,IAAjB,WACI,OAAO9/B,KAAK8xB,OAChB,E,gCAKA,sBAAW,2BAAY,C,IAAvB,WACI,IAAK9xB,KAAK+jC,cACN,MAAM,IAAIv+B,MAAM,0BAGpB,OAAOxF,KAAK+jC,aAChB,E,gCAKA,sBAAW,8BAAe,C,IAA1B,WACI,OAAO/jC,KAAK2jC,gBAChB,E,gCAKA,sBAAW,sBAAO,C,IAAlB,WACI,OAAO3jC,KAAKwjC,QAChB,E,gCAUO,YAAAxlB,QAAP,WACQhe,KAAKujC,YAITvjC,KAAKujC,WAAY,EAEjBvjC,KAAKgjC,kBAAkBvgC,OAAS,EAEhCzC,KAAKsjC,YAAY7sB,SAAQ,SAACgnB,GAAc,OAAAA,EAAUzf,SAAWyf,EAAUzf,SAA/B,IACxChe,KAAKsjC,YAAY7gC,OAAS,EAEzBzC,KAAK+E,MAA4B,KAClC/E,KAAK8/B,KAAO,KACX9/B,KAAK+jC,cAAoC,KAC1C/jC,KAAK2jC,iBAAmB,KACxB3jC,KAAK4jC,4BAA8B,CAAC,EACpC5jC,KAAK6jC,sBAAsBphC,OAAS,EAEpCzC,KAAK8xB,QAAQ9T,UACjB,EAKO,YAAA8B,gBAAP,SACIC,EACAxB,EACA4B,EACA/I,EACAC,EACAqH,EACApH,GAPJ,WASI,YAFA,IAAAA,IAAAA,EAAA,IAEOtU,QAAQC,UAAUU,MAAK,WAC1B,EAAKogC,cAAgBxlB,EACrB,EAAK0kB,gBAAkB9iB,EACvB,EAAK6jB,UAAU5sB,GAEf,IAAIvW,EAAiC,KAErC,GAAIkf,EAAa,CACb,IAAM,EAAsC,CAAC,EAC7C,GAAI,EAAKhb,MAAMlE,MACX,IAAmB,YAAKkE,MAAMlE,MAAX,eAAkB,CAAhC,IAAM6I,EAAI,KACPA,EAAKuK,OACL,EAAQvK,EAAKuK,MAAQvK,EAAKvB,MAElC,CAIJtH,GADckf,aAAuBve,MAAQue,EAAc,CAACA,IAC9Cvf,KAAI,SAACyT,GACf,IAAMvK,EAAO,EAAQuK,GACrB,QAAa3O,IAAToE,EACA,MAAM,IAAIlE,MAAM,+BAAwByO,EAAI,MAGhD,OAAOvK,CACX,GACJ,CAEA,OAAO,EAAK00B,WAAW/mB,EAASC,EAAUzW,GAAO,WAC7C,MAAO,CACH2R,OAAQ,EAAKyxB,aACbzjB,gBAAiB,GACjBC,UAAW,EAAKyjB,gBAChB5jC,gBAAiB,EAAK6jC,sBACtB9yB,OAAQ,EAAK6xB,eACbxiB,eAAgB,EAAK0jB,qBACrB7jB,WAAY,EAAK8jB,iBACjBlG,eAAgB,GAExB,GACJ,GACJ,EAKO,YAAAle,UAAP,SAAiB1B,EAAcnH,EAAuBC,EAAiBqH,EAAyDpH,GAAhI,WACI,YAD4H,IAAAA,IAAAA,EAAA,IACrHtU,QAAQC,UAAUU,MAAK,WAG1B,OAFA,EAAKogC,cAAgBxlB,EACrB,EAAKylB,UAAU5sB,GACR,EAAKgnB,WAAW/mB,EAASC,EAAU,MAAM,WAAM,GAC1D,GACJ,EAEQ,YAAA8mB,WAAR,SAAsB/mB,EAAiBC,EAAkBzW,EAAgCyjC,GAAzF,WACI,OAAOthC,QAAQC,UACVU,MAAK,sD,uFAMF,OALA3D,KAAKwjC,SAAWnsB,EAChBrX,KAAK0jC,gBAAkBrsB,EAAQ9R,WAAW,UAAY+R,EAAWD,EAAU,UAAGA,GAAO,OAAGktB,KAAKC,MAAK,KAClGxkC,KAAKyjC,UAAYnsB,EACjBtX,KAAKojC,4BAA6B,EAElC,GAAMpjC,KAAKykC,wB,OA0BX,GA1BA,SAEMC,EAA4B,UAAG/rB,EAAgBA,EAAgBgsB,SAAQ,eAAOhsB,EAAgBA,EAAgBisB,QAC9GC,EAA+B,UAAGlsB,EAAgBA,EAAgBgsB,SAAQ,eAAOhsB,EAAgBA,EAAgBmsB,WAEvH9kC,KAAK8xB,QAAQpV,yBAAyBgoB,GACtC1kC,KAAK8xB,QAAQpV,yBAAyBmoB,GAEtC7kC,KAAK8xB,QAAQ5Q,UAAUvI,EAAgBgsB,SACvC3kC,KAAK+kC,uBAECC,EAAW,IAAIxjC,MAGfyjC,EAAiCjlC,KAAK+jC,cAAcmB,4BAC1DllC,KAAK+jC,cAAcmB,6BAA8B,EAE5CllC,KAAK2K,OAAO+a,oBACT7kB,EACAmkC,EAASngC,KAAK7E,KAAKmlC,eAAe,SAAU,CAAEtkC,MAAOA,EAAOsH,OAAQ,MACzC7C,MAApBtF,KAAK+E,MAAMwZ,OAAuBve,KAAK+E,MAAM2vB,QAAU10B,KAAK+E,MAAM2vB,OAAO,MAC1EnW,EAAQ6mB,GAAUtD,IAAI,SAAU9hC,KAAK+E,MAAM2vB,OAAQ10B,KAAK+E,MAAMwZ,OAAS,GAC7EymB,EAASngC,KAAK7E,KAAKmlC,eAAe,kBAAW5mB,EAAMpW,OAASoW,OAI/Dve,KAAK2K,OAAOgb,eAAiB3lB,KAAK2K,OAAO8a,kBAAoBzlB,KAAK+E,MAAM6G,UACzE,IAASy5B,EAAI,EAAGA,EAAIrlC,KAAK+E,MAAM6G,UAAUnJ,SAAU4iC,EACzC/+B,EAAWtG,KAAK+E,MAAM6G,UAAUy5B,GAChC,EAAU,cAAgBA,EAC1BC,EAAkB,EAAAjL,SAASkL,iBAEjCP,EAASngC,KAAK7E,KAAKwlC,mBAAmB,EAASl/B,EAAU,KAAMg/B,GAAiB,WAAO,KA8C/F,OAzCItlC,KAAKojC,2BAGLpjC,KAAK+jC,cAAcmB,4BAA8BD,EAIjDjlC,KAAK+jC,cAAc0B,kCAAkCR,GAGrDjlC,KAAK8xB,QAAQ3M,kBACb6f,EAASngC,KAAK7E,KAAK0lC,0BAGnB1lC,KAAK8xB,QAAQzM,yBACb2f,EAASngC,KAAK7E,KAAK2lC,iCAGjBC,EAAgB5iC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WACzC,EAAKggC,kBAAoB,EAAKA,mBAAqB,EAAK7R,QAAQ5L,gBAChE,EAAKyd,iBAAiBmC,YAAW,GAIrC,IAAuB,YAAK/B,cAAcn4B,UAAnB,eAA8B,CAAhD,IACKU,EADS,UAGmBhH,IAA9BgH,EAAIy5B,wBACJz5B,EAAIy5B,sBAAwBvF,KAAK6B,IAAI/1B,EAAIy5B,sBAAuB,EAAKhC,cAAc1yB,OAAO5O,QAElG,CAQA,OANA,EAAKujC,qBACL,EAAKlU,QAAQ5Q,UAAUvI,EAAgBisB,OAClC,EAAKvB,yBACN,EAAK4C,mBAGF3B,GACX,IAEO,CAAP,EAAOsB,EAAcjiC,MAAK,SAACF,GA0BvB,OAzBA,EAAKquB,QAAQlV,uBAAuB8nB,GAEpC,EAAA/qB,MAAMusB,cAAa,WACV,EAAK3C,WACNvgC,QAAQ6iC,IAAI,EAAK7C,mBAAmBr/B,MAChC,WACI,EAAKmuB,QAAQlV,uBAAuBioB,GAEpC,EAAK/S,QAAQ5Q,UAAUvI,EAAgBmsB,UAEvC,EAAKhT,QAAQnW,qBAAqB0C,qBAAgB/Y,GAClD,EAAKwsB,QAAQnW,qBAAqByC,QAElC,EAAKJ,SACT,IACA,SAAC3E,GACG,EAAKyY,QAAQlW,kBAAkByC,gBAAgBhF,GAC/C,EAAKyY,QAAQlW,kBAAkBwC,QAE/B,EAAKJ,SACT,GAGZ,IAEOva,CACX,K,UAEH0iC,OAAM,SAAC9sB,GAQJ,MAPK,EAAKkqB,YACN,EAAKzR,QAAQlW,kBAAkByC,gBAAgBhF,GAC/C,EAAKyY,QAAQlW,kBAAkBwC,QAE/B,EAAKJ,WAGH3E,CACV,GACR,EAEQ,YAAA2qB,UAAR,SAAkB5sB,GAId,GAHApX,KAAK+E,MAAQqS,EAAKqI,KAClBzf,KAAKomC,aAEDhvB,EAAKuM,IAAK,CACV,IAAMyT,EAAUp3B,KAAK+E,MAAMqyB,QAC3B,GAAIA,GAAWA,EAAQ,KAAOA,EAAQ,GAAG1f,IAAK,CAC1C,IAAM2uB,EAAejP,EAAQ,IACzBiP,EAAa3rB,WAAatD,EAAKuM,IAAIjJ,WAAa,GAAK2rB,EAAa3rB,WAAatD,EAAKuM,IAAIjJ,aACxF,EAAAqE,OAAOC,KAAK,gCAAyBqnB,EAAa3rB,WAAU,oDAA4CtD,EAAKuM,IAAIjJ,WAAU,MAG/H1a,KAAK8/B,KAAO1oB,EAAKuM,GACrB,MACI,EAAA5E,OAAOC,KAAK,uBAEpB,CACJ,EAEQ,YAAAonB,WAAR,WAeI,GAdAhB,GAAUlD,OAAOliC,KAAK+E,MAAM8qB,WAC5BuV,GAAUlD,OAAOliC,KAAK+E,MAAMxE,YAC5B6kC,GAAUlD,OAAOliC,KAAK+E,MAAMqyB,SAC5BgO,GAAUlD,OAAOliC,KAAK+E,MAAM0lB,aAC5B2a,GAAUlD,OAAOliC,KAAK+E,MAAMsD,SAC5B+8B,GAAUlD,OAAOliC,KAAK+E,MAAMsyB,QAC5B+N,GAAUlD,OAAOliC,KAAK+E,MAAM6G,WAC5Bw5B,GAAUlD,OAAOliC,KAAK+E,MAAMyN,QAC5B4yB,GAAUlD,OAAOliC,KAAK+E,MAAMlE,OAC5BukC,GAAUlD,OAAOliC,KAAK+E,MAAMumB,UAC5B8Z,GAAUlD,OAAOliC,KAAK+E,MAAM2vB,QAC5B0Q,GAAUlD,OAAOliC,KAAK+E,MAAM6oB,OAC5BwX,GAAUlD,OAAOliC,KAAK+E,MAAMsb,UAExBrgB,KAAK+E,MAAMlE,MAAO,CAElB,IADA,IAAMylC,EAA2C,CAAC,EAC/B,MAAAtmC,KAAK+E,MAAMlE,MAAX,eACf,IADO6I,EAAI,MACFukB,SACL,IAAoB,UAAAvkB,EAAKukB,SAAL,eAChBqY,EADY,MACS58B,EAAKvB,MAMtC,IADA,IAAMuC,EAAW1K,KAAKumC,kBACH,MAAAvmC,KAAK+E,MAAMlE,MAAX,eAAkB,CAAhC,IAAM6I,EACD88B,EAAcF,GADb58B,EAAI,MAC0BvB,OACrCuB,EAAKiB,YAAyBrF,IAAhBkhC,EAA4B97B,EAAW1K,KAAK+E,MAAMlE,MAAM2lC,EAC1E,CACJ,CACJ,EAEc,YAAA/B,qBAAd,W,uIA2B8B,OA1BpBgC,EAAqD,GAE3DhF,GAAyBhrB,SAAQ,SAACiwB,EAAqBzyB,G,OAEC,KAAd,QAAlC,IAAKtJ,OAAOqb,iBAAiB/R,UAAK,eAAE0yB,SAEhCD,EAAoB/E,iBAAmB,EAAKiF,gBAAgB3yB,IAC5D,EAAA8K,OAAOC,KAAK,oBAAa/K,EAAI,+CAI3ByyB,EAAoB/E,kBAAmB,EAAKiF,gBAAgB3yB,IAClEwyB,EAAkB5hC,MACb,oC,8DACqB,SAAM6hC,EAAoBlnC,QAAQQ,O,OAMpD,OANMy9B,EAAY,UACJxpB,OAASA,GACnB,EAAA8K,OAAOC,KAAK,6FAAsFye,EAAUxpB,KAAI,gBAAQA,IAG5HjU,KAAK8xB,QAAQhW,4BAA4BuC,gBAAgBof,GAClD,CAAP,EAAOA,G,OAIvB,I,GAEA,KAAAz9B,KAAKsjC,aAAYz+B,MAAI,M,MAAK,GAAM7B,QAAQ6iC,IAAIY,I,OAK5C,GALA,oBAA0B,YAE1BzmC,KAAKsjC,YAAYuD,MAAK,SAACpmC,EAAGW,GAAM,OAACX,EAAEqmC,OAASrZ,OAAO8I,YAAcn1B,EAAE0lC,OAASrZ,OAAO8I,UAAnD,IAChCv2B,KAAK8xB,QAAQhW,4BAA4BsC,QAErCpe,KAAK+E,MAAMgiC,mBACX,I,WAAW,GAEP,IADkB,EAAKzD,YAAY0D,MAAK,SAACvJ,GAAc,OAAAA,EAAUxpB,OAAS,GAAQwpB,EAAUkJ,OAArC,IACvC,CACZ,IAAoD,KAAd,QAAlC,IAAKh8B,OAAOqb,iBAAiB,UAAK,eAAE2gB,SACpC,MAAM,IAAInhC,MAAM,6BAAsB,EAAI,iBAE9C,MAAM,IAAIA,MAAM,6BAAsB,EAAI,qBAC9C,C,SAPC,EAAL,EAAmB,EAAAxF,KAAK+E,MAAMgiC,mBAAX,eAAd,O,EAAM,G,kBAYX,YAAAR,gBAAR,WACI,QAAoCjhC,IAAhCtF,KAAK8xB,QAAQ5L,eAEb,OADAlmB,KAAK2jC,iBAAmB3jC,KAAK8xB,QAAQ5L,eAC9B,CAEHnlB,sBAAiD,OAA1Bf,KAAK2jC,sBAA4Br+B,EAAYtF,KAAK2jC,iBACzEx7B,OAAQ,GAGhBnI,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAMgE,EAAW,IAAI,EAAAlY,KAAK,WAAY/uB,KAAK+jC,eAC3C/jC,KAAK2jC,iBAAmBsD,EACxBjnC,KAAK2jC,iBAAiB3U,iBAAmBhvB,KAAKijC,gBAC9CjjC,KAAK+jC,cAAclV,wBAAyB,EAC5C7uB,KAAK2jC,iBAAiBmC,YAAW,GAEjC,IAAMp7B,EAAkB,CAEpB3J,sBAAuBf,KAAK2jC,iBAC5Bx7B,OAAQ,GAGZ,OAAQnI,KAAK8xB,QAAQlN,sBACjB,KAAKnM,EAA+BoM,KAC3B7kB,KAAK+jC,cAAc3xB,uBACpB1H,EAAS5C,SAAW,CAAC,EAAG,EAAG,EAAG,GAC9B4C,EAAS1C,MAAQ,CAAC,EAAG,GAAI,GACzB01B,EAAWwJ,eAAex8B,EAAU1K,KAAK2jC,mBAE7C,MAEJ,KAAKlrB,EAA+B0uB,mBAChCnnC,KAAK+jC,cAAc3xB,sBAAuB,EAC1C,MAEJ,QACI,MAAM,IAAI5M,MAAM,0CAAmCxF,KAAK8xB,QAAQlN,qBAAoB,MAK5F,OADA5kB,KAAK8xB,QAAQxW,uBAAuB+C,gBAAgB4oB,GAC7Cv8B,CACX,EAQO,YAAAy6B,eAAP,SAAsBpD,EAAiBxjB,GAAvC,WACU6oB,EAAmBpnC,KAAKqnC,0BAA0BtF,EAASxjB,GACjE,GAAI6oB,EACA,OAAOA,EAGX,IAAMpC,EAAW,IAAIxjC,MAIrB,GAFAxB,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIxjB,EAAMtK,MAAQ,KAErCsK,EAAM1d,MACN,IAAoB,UAAA0d,EAAM1d,MAAN,eAAa,CAA5B,IAAMsH,EAAK,KACNuB,EAAO07B,GAAUtD,IAAI,UAAGC,EAAO,kBAAU55B,GAASnI,KAAK+E,MAAMlE,MAAOsH,GAC1E68B,EAASngC,KACL7E,KAAKunC,cAAc,iBAAU79B,EAAKvB,OAASuB,GAAM,SAACwL,GAC9CA,EAAYvK,OAAS,EAAKg5B,gBAC9B,IAER,CAGJ,IAAqB,UAAA3jC,KAAK6jC,sBAAL,gBACjB2D,EADa,QAQjB,OAJAxC,EAASngC,KAAK7E,KAAKynC,wBAEnBznC,KAAK0nC,WAEE1kC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EAEQ,YAAAgkC,kBAAR,SAA0Bj+B,EAAaoT,GACnC,GAAIpT,EAAKQ,wBACL,IAA0B,UAAAR,EAAKQ,wBAAL,eACtB4S,EADkB,KAI9B,EAEQ,YAAAunB,eAAR,WACI,IAAM9jB,EAAyB,GAEzB1f,EAAQb,KAAK+E,MAAMlE,MACzB,GAAIA,EACA,IAAmB,UAAAA,EAAA,eAAO,CAArB,IAAM6I,EAAI,KACX1J,KAAK2nC,kBAAkBj+B,GAAM,SAACwL,GAC1B,IAAM0yB,EAAY1yB,EAAqB0yB,SACnCA,IAA8C,IAAlCrnB,EAAWhK,QAAQqxB,IAC/BrnB,EAAW1b,KAAK+iC,EAExB,GACJ,CAGJ,OAAOrnB,CACX,EAEQ,YAAA0jB,WAAR,WACI,IAAMzxB,EAAyB,GAG3BxS,KAAK2jC,4BAA4B,EAAA5F,cACjCvrB,EAAO3N,KAAK7E,KAAK2jC,kBAGrB,IAAM9iC,EAAQb,KAAK+E,MAAMlE,MACzB,GAAIA,EACA,IAAmB,UAAAA,EAAA,eAAO,CAArB,IAAM6I,EAAI,KACX1J,KAAK2nC,kBAAkBj+B,GAAM,SAACwL,GAC1B1C,EAAO3N,KAAKqQ,EAChB,GACJ,CAGJ,OAAO1C,CACX,EAEQ,YAAA4xB,mBAAR,WACI,IAAM1jB,EAAkC,GAElC7f,EAAQb,KAAK+E,MAAMlE,MACzB,GAAIA,EACA,IAAmB,UAAAA,EAAA,eAAO,CAArB,IAAM6I,EAAI,KACPA,EAAK3I,uBAAuE,kBAA9C2I,EAAK3I,sBAAsBC,gBACzD0f,EAAe7b,KAAK6E,EAAK3I,uBAEzB2I,EAAKm+B,8BACLnnB,EAAe7b,KAAK6E,EAAKm+B,6BAEjC,CAGJ,OAAOnnB,CACX,EAEQ,YAAAwjB,cAAR,WACI,IAAMzjB,EAAwB,GAExBmN,EAAQ5tB,KAAK+E,MAAM6oB,MACzB,GAAIA,EACA,IAAmB,UAAAA,EAAA,eAAO,CAArB,IAAM0D,EAAI,KACPA,EAAKzqB,OACL4Z,EAAU5b,KAAKysB,EAAKzqB,MAAM8qB,gBAElC,CAGJ,OAAOlR,CACX,EAEQ,YAAA0jB,oBAAR,WACI,IAAM7jC,EAAoC,GAEpCC,EAAaP,KAAK+E,MAAMxE,WAC9B,GAAIA,EACA,IAAwB,UAAAA,EAAA,eAAY,CAA/B,IAAMgS,EAAS,KACZA,EAAU7R,wBACVJ,EAAgBuE,KAAK0N,EAAU7R,uBAEvC,CAGJ,OAAOJ,CACX,EAEQ,YAAA2lC,iBAAR,WACI,OAAQjmC,KAAK8xB,QAAQhN,oBACjB,KAAKpM,EAA6BovB,KAE9B,MAEJ,KAAKpvB,EAA6BqM,MAEQ,KADhCgjB,EAAyB/nC,KAAKmkC,uBACT1hC,QACvBslC,EAAuB,GAAGC,OAAM,GAEpC,MAEJ,KAAKtvB,EAA6BuvB,IAE9B,IADA,IAAMF,EAC8B,MAD9BA,EAAyB/nC,KAAKmkC,sBACA,eAAJ,KACN6D,OAAM,GAEhC,MAEJ,QAEI,YADA,EAAAjpB,OAAOvZ,MAAM,wCAAiCxF,KAAK8xB,QAAQhN,mBAAkB,MAIzF,EASO,YAAAyiB,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,gBAAmD,IAAAA,IAAAA,EAAA,WAA+D,GAC9G,IAAMglC,EAAmBpnC,KAAKkoC,yBAAyBnG,EAASr4B,EAAMtH,GACtE,GAAIglC,EACA,OAAOA,EAGX,GAAI19B,EAAK3I,sBACL,MAAM,IAAIyE,MAAM,UAAGu8B,EAAO,uCAG9B,IAAMiD,EAAW,IAAIxjC,MAErBxB,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIr4B,EAAKuK,MAAQ,KAExC,IAAMk0B,EAAW,SAACC,GAId,GAHA1K,EAAW2K,mBAAmBD,EAAsBrG,GACpDrE,EAAWwJ,eAAex9B,EAAM0+B,GAEb9iC,MAAfoE,EAAKlB,OAAqB,CAC1B,IAAMA,EAAS48B,GAAUtD,IAAI,UAAGC,EAAO,WAAW,EAAKh9B,MAAMsD,QAASqB,EAAKlB,QAC3Ew8B,EAASngC,KACL,EAAKyjC,gBAAgB,mBAAY9/B,EAAOL,OAASK,GAAQ,SAAC+/B,GACtDA,EAAc59B,OAASy9B,CAC3B,IAER,CAEA,GAAI1+B,EAAKukB,SACL,IAAoB,UAAAvkB,EAAKukB,SAAL,eAAe,CAA9B,IAAM9lB,EAAK,KACNqgC,EAAYpD,GAAUtD,IAAI,UAAGC,EAAO,qBAAa55B,GAAS,EAAKpD,MAAMlE,MAAOsH,GAClF68B,EAASngC,KACL,EAAK0iC,cAAc,iBAAUiB,EAAUrgC,OAASqgC,GAAW,SAACC,GACxDA,EAAiB99B,OAASy9B,CAC9B,IAER,CAGJhmC,EAAOgmC,EACX,EAEMM,EAAuBpjC,MAAboE,EAAK+I,KACfk2B,EAAU3oC,KAAK8xB,QAAQ7M,WAA0B3f,MAAboE,EAAK4nB,KAE/C,IAAKoX,GAAWC,EAAS,CACrB,IAAMC,EAAWl/B,EAAKuK,MAAQ,cAAOvK,EAAKvB,OAC1CnI,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAM4F,EAAgB,IAAI,EAAAC,cAAcF,EAAU5oC,KAAK+jC,eACvD8E,EAAc7Z,iBAAmBhvB,KAAKijC,gBACtCjjC,KAAK+jC,cAAclV,wBAAyB,EAC3BvpB,MAAboE,EAAK+I,KACL/I,EAAK3I,sBAAwB8nC,EAE7Bn/B,EAAKm+B,6BAA+BgB,EAExCV,EAASU,EACb,CAEA,GAAIH,EACA,GAAIC,EAAS,CAKT,IAAMl2B,EAAO2yB,GAAUtD,IAAI,UAAGC,EAAO,SAAS/hC,KAAK+E,MAAMyN,OAAQ9I,EAAK+I,MACtEuyB,EAASngC,KACL7E,KAAK+oC,eAAe,kBAAWt2B,EAAKtK,OAASuB,EAAM+I,GAAM,SAAC21B,GACtD,IAAMY,EAA8Bt/B,EAAKm+B,6BAGzCO,EAAqBa,UAAW,IAAAC,WAAUF,EAA4BC,SAAUb,EAAqBa,UAAY,CAAC,GAElH,IAAM3X,EAAO8T,GAAUtD,IAAI,UAAGC,EAAO,SAAS,EAAKh9B,MAAM6oB,MAAOlkB,EAAK4nB,MACrE0T,EAASngC,KACL,EAAKskC,eAAe,iBAAU7X,EAAKnpB,OAASuB,EAAM4nB,GAAM,SAACK,GACrD,EAAKgW,kBAAkBj+B,GAAM,SAACwL,GAC1BA,EAAYsc,SAAWG,CAC3B,IAGA,EAAKkS,sBAAsBh/B,MAAK,WAC5B,GAAqBS,MAAjBgsB,EAAKE,SAAuB,CAG5B,IAAM4X,EAAahE,GAAUtD,IAAI,iBAAUxQ,EAAKnpB,MAAK,aAAa,EAAKpD,MAAMlE,MAAOywB,EAAKE,UAAU7mB,OAC/FjB,EAAKvB,QAAUihC,EAAWjhC,MAC1BigC,EAAqBz9B,OAASq+B,EAA4Br+B,OAE1Dy9B,EAAqBz9B,OAASy+B,EAAWroC,qBAEjD,MACIqnC,EAAqBz9B,OAAS,EAAKg5B,iBAGvC,EAAK7R,QAAQvW,uBAAuB8C,gBAAgB,CAAE3U,KAAMs/B,EAA6B5rB,YAAagrB,GAC1G,GACJ,IAER,IAER,MACU31B,EAAO2yB,GAAUtD,IAAI,UAAGC,EAAO,SAAS/hC,KAAK+E,MAAMyN,OAAQ9I,EAAK+I,MACtEuyB,EAASngC,KAAK7E,KAAK+oC,eAAe,kBAAWt2B,EAAKtK,OAASuB,EAAM+I,EAAM01B,IAM/E,OAFAnoC,KAAK0nC,WAEE1kC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAW9B,OAVA,EAAKgkC,kBAAkBj+B,GAAM,SAACwL,GAC1B,IAAMm0B,EAASn0B,GACVm0B,EAAOC,cAAgBD,EAAOzB,UAAYyB,EAAOzB,SAAS2B,4BAE3Dr0B,EAAYs0B,sBAEZt0B,EAAYu0B,qBAAoB,GAAM,EAE9C,IAEO//B,EAAK3I,qBAChB,GACJ,EAEQ,YAAAgoC,eAAR,SAAuBhH,EAAiBr4B,EAAa+I,EAAarQ,GAC9D,IAAMsQ,EAAaD,EAAKC,WACxB,IAAKA,IAAeA,EAAWjQ,OAC3B,MAAM,IAAI+C,MAAM,UAAGu8B,EAAO,6BAGHz8B,MAAvBoN,EAAW,GAAGvK,OACdi9B,GAAUlD,OAAOxvB,GAGrB,IAAMsyB,EAAW,IAAIxjC,MAErBxB,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAItvB,EAAKwB,MAAQ,KAExC,IAAMA,EAAOvK,EAAKuK,MAAQ,cAAOvK,EAAKvB,OAEtC,GAA0B,IAAtBuK,EAAWjQ,OAAc,CACzB,IAAMmtB,EAAYnd,EAAKC,WAAW,GAClCsyB,EAASngC,KACL7E,KAAK0pC,wBAAwB,UAAG3H,EAAO,uBAAenS,EAAUznB,OAAS8L,EAAMvK,EAAM+I,EAAMmd,GAAW,SAAC1a,GACnGxL,EAAK3I,sBAAwBmU,EAC7BxL,EAAKQ,wBAA0B,CAACgL,EACpC,IAER,KAAO,CACHlV,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnDv5B,EAAK3I,sBAAwB,IAAI,EAAA+nC,cAAc70B,EAAMjU,KAAK+jC,eAC1Dr6B,EAAK3I,sBAAsBiuB,iBAAmBhvB,KAAKijC,gBACnDjjC,KAAK+jC,cAAclV,wBAAyB,EAC5CnlB,EAAKQ,wBAA0B,GAC/B,IAAwB,UAAAwI,EAAA,eAAbkd,EAAS,KAChBoV,EAASngC,KACL7E,KAAK0pC,wBAAwB,UAAG3H,EAAO,uBAAenS,EAAUznB,OAAS,UAAG8L,EAAI,qBAAa2b,EAAUznB,OAASuB,EAAM+I,EAAMmd,GAAW,SAAC1a,GACpIA,EAAYvK,OAASjB,EAAK3I,sBAC1B2I,EAAKQ,wBAAyBrF,KAAKqQ,EACvC,IAGZ,CAMA,OAJA9S,EAAOsH,EAAK3I,uBAEZf,KAAK0nC,WAEE1kC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAO+F,EAAK3I,qBAChB,GACJ,EAYO,YAAA2oC,wBAAP,SACI3H,EACA9tB,EACAvK,EACA+I,EACAmd,EACAxtB,GANJ,WAQUglC,EAAmBpnC,KAAK2pC,kCAAkC5H,EAAS9tB,EAAMvK,EAAM+I,EAAMmd,EAAWxtB,GACtG,GAAIglC,EACA,OAAOA,EAGXpnC,KAAKsnC,QAAQ,UAAGvF,IAEhB,IAEI6H,EACAC,EAHEC,EAAgD,IAA/B9pC,KAAKmjC,uBAA+BnjC,KAAK8xB,QAAQvM,iBAAgCjgB,MAAboE,EAAK4nB,OAAsB7e,EAAKC,WAAW,GAAGq3B,QAKzI,GAAID,GAAkBla,EAAUjd,cAC5B3S,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,iBACnD2G,EAAsBha,EAAUjd,cAAcC,kBAAkBo3B,eAAe/1B,IAC3D+a,iBAAmBhvB,KAAKijC,gBAC5CjjC,KAAK+jC,cAAclV,wBAAyB,EAC5Cgb,EAAUja,EAAUjd,cAAck3B,YAC/B,CACH,IAAM7E,EAAW,IAAIxjC,MAErBxB,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAM,EAAc,IAAI,EAAAlU,KAAK9a,EAAMjU,KAAK+jC,eACxC,EAAY/U,iBAAmBhvB,KAAKijC,gBACpCjjC,KAAK+jC,cAAclV,wBAAyB,EAC5C,EAAYuL,gBAAkBp6B,KAAK+jC,cAAc3xB,qBAAuB,EAAAioB,SAASC,gCAAkC,EAAAD,SAAS4P,yBAE5HjqC,KAAKkqC,oBAAoBnI,EAASr4B,EAAM+I,EAAMmd,EAAW,GACzDoV,EAASngC,KACL7E,KAAKmqC,qBAAqBpI,EAASnS,EAAW,GAAajsB,MAAK,SAACymC,GAC7D,OAAO,EAAKC,uBAAuBtI,EAASnS,EAAW,EAAawa,GAAiBzmC,MAAK,WAClF,EAAK4/B,YAIT,EAAKQ,cAAclV,yBAA2B,EAAKoU,gBACnDmH,EAAgBE,YAAY,GAC5BF,EAAgBpb,iBAAmB,EAAKiU,gBACxC,EAAKc,cAAclV,wBAAyB,EAChD,GACJ,KAGJ,IAAMyW,EAAkB5H,EAAW6M,aAAaxI,EAASnS,EAAUxZ,MACnE,GAA0B9Q,MAAtBsqB,EAAUtpB,SAAuB,CACjC,IAAII,EAAkB1G,KAAK4jC,4BAA4B0B,GAClD5+B,IACDA,EAAkB1G,KAAKwqC,uBAAuB,wBAAyBlF,GACvEtlC,KAAK8xB,QAAQrW,2BAA2B4C,gBAAgB3X,GACxD1G,KAAK4jC,4BAA4B0B,GAAmB5+B,GAExD,EAAYJ,SAAWI,CAC3B,MAAO,IAAK1G,KAAK2K,OAAOgb,cAAe,CACnC,IAAMrf,EAAW8+B,GAAUtD,IAAI,UAAGC,EAAO,aAAa/hC,KAAK+E,MAAM6G,UAAWgkB,EAAUtpB,UACtF0+B,EAASngC,KACL7E,KAAKwlC,mBAAmB,qBAAcl/B,EAAS6B,OAAS7B,EAAU,EAAag/B,GAAiB,SAAC5+B,GAC7F,EAAYJ,SAAWI,CAC3B,IAER,CAEAmjC,EAAU7mC,QAAQ6iC,IAAIb,GAElB8E,IACAla,EAAUjd,cAAgB,CACtBC,kBAAmB,EACnBi3B,QAASA,IAIjBD,EAAsB,CAC1B,CAQA,OANAlM,EAAW2K,mBAAmBuB,EAAqB7H,GACnD/hC,KAAK8xB,QAAQxW,uBAAuB+C,gBAAgBurB,GACpDxnC,EAAOwnC,GAEP5pC,KAAK0nC,WAEEmC,EAAQlmC,MAAK,WAChB,OAAOimC,CACX,GACJ,EAEQ,YAAAO,qBAAR,SAA6BpI,EAAiBnS,EAA2B1a,GAAzE,WACUkyB,EAAmBpnC,KAAKyqC,+BAA+B1I,EAASnS,EAAW1a,GACjF,GAAIkyB,EACA,OAAOA,EAGX,IAAMhc,EAAawE,EAAUxE,WAC7B,IAAKA,EACD,MAAM,IAAI5lB,MAAM,UAAGu8B,EAAO,6BAG9B,IAAMiD,EAAW,IAAIxjC,MAEf4oC,EAAkB,IAAI,EAAAvZ,SAAS3b,EAAYjB,KAAMjU,KAAK+jC,eAE5D,GAAyBz+B,MAArBsqB,EAAUW,QACVrb,EAAYw1B,aAAc,MACvB,CACH,IAAMl3B,EAAW4xB,GAAUtD,IAAI,UAAGC,EAAO,YAAY/hC,KAAK+E,MAAM8qB,UAAWD,EAAUW,SACrFyU,EAASngC,KACL7E,KAAK2qC,0BAA0B,qBAAcn3B,EAASrL,OAASqL,GAAU7P,MAAK,SAACyT,GAC3EgzB,EAAgBQ,WAAWxzB,EAC/B,IAER,CAEA,IAAMyzB,EAAgB,SAAC52B,EAAc62B,EAAchuB,GAC/C,GAAwBxX,MAApB8lB,EAAWnX,GAAf,CAIAiB,EAAY61B,WAAa71B,EAAY61B,YAAc,IACL,IAA1C71B,EAAY61B,WAAWx0B,QAAQu0B,IAC/B51B,EAAY61B,WAAWlmC,KAAKimC,GAGhC,IAAMt3B,EAAW4xB,GAAUtD,IAAI,UAAGC,EAAO,uBAAe9tB,GAAQ,EAAKlP,MAAM8qB,UAAWzE,EAAWnX,IACjG+wB,EAASngC,KACL,EAAKmmC,yBAAyB,qBAAcx3B,EAASrL,OAASqL,EAAUs3B,GAAMnnC,MAAK,SAACsnC,GAChF,GAAIA,EAAoBC,YAAc,EAAAjb,aAAakb,eAAiB,EAAKxgC,OAAO6a,2BAA6BtQ,EAAYsc,SAAU,CAC/H,IAAM4Z,EAAsBjJ,GAAqC3uB,GAC7D43B,IACAhB,EAAgBiB,cAAgBD,EAChChB,EAAgBb,6BAA8B,EAEtD,CACAa,EAAgBkB,kBAAkBL,EAAqBz3B,EAASkX,MACpE,KAGAogB,GAAQ,EAAA7a,aAAasb,2BACrBr2B,EAAYs2B,mBAAqB,GAGjC1uB,GACAA,EAAStJ,EA1Bb,CA4BJ,EAqBA,OAnBAq3B,EAAc,WAAY,EAAA5a,aAAakb,cACvCN,EAAc,SAAU,EAAA5a,aAAawb,YACrCZ,EAAc,UAAW,EAAA5a,aAAayb,aACtCb,EAAc,aAAc,EAAA5a,aAAaC,QACzC2a,EAAc,aAAc,EAAA5a,aAAa0b,SACzCd,EAAc,aAAc,EAAA5a,aAAa2b,SACzCf,EAAc,aAAc,EAAA5a,aAAa4b,SACzChB,EAAc,aAAc,EAAA5a,aAAa6b,SACzCjB,EAAc,aAAc,EAAA5a,aAAa8b,SACzClB,EAAc,WAAY,EAAA5a,aAAa+b,qBACvCnB,EAAc,YAAa,EAAA5a,aAAagc,qBACxCpB,EAAc,WAAY,EAAA5a,aAAasb,0BACvCV,EAAc,YAAa,EAAA5a,aAAaic,0BACxCrB,EAAc,UAAW,EAAA5a,aAAakc,WAAW,SAAC34B,GACxB,SAAlBA,EAASpM,OACT8N,EAAYk3B,gBAAiB,EAErC,IAEOppC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAOymC,CACX,GACJ,EAEQ,YAAAF,oBAAR,SAA4BnI,EAAiBr4B,EAAa+I,EAAamd,EAA2B1a,GAC9F,GAAK0a,EAAUma,SAAY/pC,KAAK8xB,QAAQ5M,iBAAxC,CAIA,GAA6B5f,MAAzBoE,EAAKO,iBACLP,EAAKO,iBAAmB2lB,EAAUma,QAAQtnC,YACvC,GAAImtB,EAAUma,QAAQtnC,SAAWiH,EAAKO,iBACzC,MAAM,IAAIzE,MAAM,UAAGu8B,EAAO,wDAG9B,IAAMsK,EAAc55B,EAAK65B,OAAS75B,EAAK65B,OAAOD,YAAc,KAE5DrsC,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD/tB,EAAY/K,mBAAqB,IAAI,EAAAoiC,mBAAmBvsC,KAAK+jC,eAC7D7uB,EAAY/K,mBAAmB6kB,iBAAmBhvB,KAAKijC,gBACvDjjC,KAAK+jC,cAAclV,wBAAyB,EAE5C3Z,EAAY/K,mBAAmBqiC,kBAAmB,EAElD,IAAK,IAAIrkC,EAAQ,EAAGA,EAAQynB,EAAUma,QAAQtnC,OAAQ0F,IAAS,CAC3D,IAAMskC,EAAS/iC,EAAKM,QAAUN,EAAKM,QAAQ7B,GAASsK,EAAKzI,QAAUyI,EAAKzI,QAAQ7B,GAAS,EACnF,EAAOkkC,EAAcA,EAAYlkC,GAAS,qBAAcA,GAC9D+M,EAAY/K,mBAAmBuiC,UAAU,IAAI,EAAAC,YAAY,EAAMF,EAAQv3B,EAAY/C,YAEvF,CAtBA,CAuBJ,EAEQ,YAAAk4B,uBAAR,SAA+BtI,EAAiBnS,EAA2B1a,EAAmBk1B,GAC1F,IAAKxa,EAAUma,UAAY/pC,KAAK8xB,QAAQ5M,iBACpC,OAAOliB,QAAQC,UAMnB,IAHA,IAAM+hC,EAAW,IAAIxjC,MAEf2I,EAAqB+K,EAAY/K,mBAC9BhC,EAAQ,EAAGA,EAAQgC,EAAmByiC,WAAYzkC,IAAS,CAChE,IAAM0kC,EAAqB1iC,EAAmBzC,UAAUS,GACxD68B,EAASngC,KAAK7E,KAAK8sC,gCAAgC,UAAG/K,EAAO,oBAAY55B,GAASiiC,EAAiBxa,EAAUma,QAAQ5hC,GAAQ0kC,GACjI,CAEA,OAAO7pC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9BwG,EAAmBqiC,kBAAmB,CAC1C,GACJ,EAEQ,YAAAM,gCAAR,SAAwC/K,EAAiBqI,EAA2Bhf,EAAwCyhB,GAA5H,WACU7H,EAAW,IAAIxjC,MAEfqpC,EAAgB,SAAC1P,EAAmB2P,EAAciC,GACpD,GAA6BznC,MAAzB8lB,EAAW+P,GAAf,CAIA,IAAM8P,EAAsBb,EAAgB4C,gBAAgBlC,GAC5D,GAAKG,EAAL,CAIA,IAAMz3B,EAAW4xB,GAAUtD,IAAI,UAAGC,EAAO,YAAI5G,GAAa,EAAKp2B,MAAM8qB,UAAWzE,EAAW+P,IAC3F6J,EAASngC,KACL,EAAKooC,wBAAwB,qBAAcz5B,EAASrL,OAASqL,GAAU7P,MAAK,SAACyT,GACzE21B,EAAQ9B,EAAqB7zB,EACjC,IANJ,CALA,CAaJ,EA6EA,OA3EAyzB,EAAc,WAAY,EAAA5a,aAAakb,cAAc,SAACF,EAAqB7zB,GACvE,IAAM2Y,EAAY,IAAIxF,aAAanT,EAAK3U,QACxCwoC,EAAoBx0B,QAAQW,EAAK3U,QAAQ,SAACW,EAAO+E,GAC7C4nB,EAAU5nB,GAASiP,EAAKjP,GAAS/E,CACrC,IAEAypC,EAAmBK,aAAand,EACpC,IAEA8a,EAAc,SAAU,EAAA5a,aAAawb,YAAY,SAACR,EAAqB7zB,GACnE,IAAM0Y,EAAU,IAAIvF,aAAanT,EAAK3U,QACtCwoC,EAAoBx0B,QAAQqZ,EAAQrtB,QAAQ,SAACW,EAAO+E,GAChD2nB,EAAQ3nB,GAASiP,EAAKjP,GAAS/E,CACnC,IAEAypC,EAAmBM,WAAWrd,EAClC,IAEA+a,EAAc,UAAW,EAAA5a,aAAayb,aAAa,SAACT,EAAqB7zB,GACrE,IAAMg2B,EAAW,IAAI7iB,aAAcnT,EAAK3U,OAAS,EAAK,GAClD4qC,EAAY,EAChBpC,EAAoBx0B,QAASW,EAAK3U,OAAS,EAAK,GAAG,SAACW,EAAO+E,IAIlDA,EAAQ,GAAK,GAAM,IACpBilC,EAASC,GAAaj2B,EAAKi2B,GAAajqC,EACxCiqC,IAER,IACAR,EAAmBS,YAAYF,EACnC,IAEAvC,EAAc,aAAc,EAAA5a,aAAaC,QAAQ,SAAC+a,EAAqB7zB,GACnE,IAAM+Y,EAAM,IAAI5F,aAAanT,EAAK3U,QAClCwoC,EAAoBx0B,QAAQW,EAAK3U,QAAQ,SAACW,EAAO+E,GAC7CgoB,EAAIhoB,GAASiP,EAAKjP,GAAS/E,CAC/B,IAEAypC,EAAmBU,OAAOpd,EAC9B,IAEA0a,EAAc,aAAc,EAAA5a,aAAa0b,SAAS,SAACV,EAAqB7zB,GACpE,IAAM+Y,EAAM,IAAI5F,aAAanT,EAAK3U,QAClCwoC,EAAoBx0B,QAAQW,EAAK3U,QAAQ,SAACW,EAAO+E,GAC7CgoB,EAAIhoB,GAASiP,EAAKjP,GAAS/E,CAC/B,IAEAypC,EAAmBW,QAAQrd,EAC/B,IAEA0a,EAAc,UAAW,EAAA5a,aAAakc,WAAW,SAAClB,EAAqB7zB,GACnE,IAAIkZ,EAAS,KACPmd,EAAgBxC,EAAoByC,UAC1C,GAAsB,IAAlBD,EAAqB,CACrBnd,EAAS,IAAI/F,aAAcnT,EAAK3U,OAAS,EAAK,GAC9CwoC,EAAoBx0B,QAAQW,EAAK3U,QAAQ,SAACW,EAAO+E,GAC7C,IAAMwlC,EAAQnN,KAAKoN,MAAMzlC,EAAQ,GAC3BqlB,EAAUrlB,EAAQ,EACxBmoB,EAAO,EAAIqd,EAAQngB,GAAWpW,EAAK,EAAIu2B,EAAQngB,GAAWpqB,CAC9D,IACA,IAAK,IAAIb,EAAI,EAAGA,EAAI6U,EAAK3U,OAAS,IAAKF,EACnC+tB,EAAO,EAAI/tB,EAAI,GAAK,CAE5B,KAAO,IAAsB,IAAlBkrC,EAMP,MAAM,IAAIjoC,MAAM,UAAGu8B,EAAO,2CAAmC0L,EAAa,4BAL1End,EAAS,IAAI/F,aAAanT,EAAK3U,QAC/BwoC,EAAoBx0B,QAAQW,EAAK3U,QAAQ,SAACW,EAAO+E,GAC7CmoB,EAAOnoB,GAASiP,EAAKjP,GAAS/E,CAClC,GAGJ,CACAypC,EAAmBgB,UAAUvd,EACjC,IAEOttB,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EAEe,EAAAujC,eAAf,SAA8Bx9B,EAAaulB,GAGvC,GAAiB3pB,MAAboE,EAAK4nB,KAAT,CAIA,IAAI1nB,EAAW,EAAAgK,QAAQ8e,OACnB5qB,EAAW,EAAAkK,WAAWvH,WACtBV,EAAU,EAAA6J,QAAQk6B,MAElBpkC,EAAKW,OACU,EAAAC,OAAOuJ,UAAUnK,EAAKW,QAC9B6pB,UAAUnqB,EAASjC,EAAU8B,IAEhCF,EAAKC,cACLC,EAAW,EAAAgK,QAAQC,UAAUnK,EAAKC,cAElCD,EAAK5B,WACLA,EAAW,EAAAkK,WAAW6B,UAAUnK,EAAK5B,WAErC4B,EAAK1B,QACL+B,EAAU,EAAA6J,QAAQC,UAAUnK,EAAK1B,SAIzCinB,EAAYrlB,SAAWA,EACvBqlB,EAAYnlB,mBAAqBhC,EACjCmnB,EAAYllB,QAAUA,CAvBtB,CAwBJ,EAEQ,YAAAo/B,eAAR,SAAuBpH,EAAiBr4B,EAAa4nB,EAAalvB,GAAlE,WACI,IAAKpC,KAAK8xB,QAAQ7M,UACd,OAAOjiB,QAAQC,UAGnB,IAAMmkC,EAAmBpnC,KAAK+tC,yBAAyBhM,EAASr4B,EAAM4nB,GACtE,GAAI8V,EACA,OAAOA,EAGX,GAAI9V,EAAKzqB,MAEL,OADAzE,EAAOkvB,EAAKzqB,MAAM8qB,iBACXL,EAAKzqB,MAAMgjC,QAGtB,IAAMmE,EAAa,kBAAW1c,EAAKnpB,OACnCnI,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAMtR,EAAkB,IAAI,EAAAD,SAASJ,EAAKrd,MAAQ+5B,EAAYA,EAAYhuC,KAAK+jC,eAC/EpS,EAAgB3C,iBAAmBhvB,KAAKijC,gBACxCjjC,KAAK+jC,cAAclV,wBAAyB,EAE5C7uB,KAAKiuC,WAAWlM,EAASzQ,EAAMK,GAC/B,IAAMkY,EAAU7pC,KAAKkuC,sCAAsCnM,EAASzQ,GAAM3tB,MAAK,SAACwqC,GAC5E,EAAKC,oBAAoBzc,EAAiBwc,EAC9C,IASA,OAPA7c,EAAKzqB,MAAQ,CACT8qB,gBAAiBA,EACjBkY,QAASA,GAGbznC,EAAOuvB,GAEAkY,CACX,EAEQ,YAAAoE,WAAR,SAAmBlM,EAAiBzQ,EAAaK,GAC7C,GAAqBrsB,MAAjBgsB,EAAKE,UAAyBxxB,KAAK8xB,QAAQhM,8BAA+B,CAC1E,IAAMpb,EAAW1K,KAAKquC,sBAAsB,UAAGtM,EAAO,WAAWzQ,EAAKgd,QACtE,GAAI5jC,EACA,QAAsBpF,IAAlBgsB,EAAKE,SACLF,EAAKE,SAAW9mB,EAASvC,UACtB,CACH,IAUMomC,EAAenJ,GAAUtD,IAAI,UAAGC,EAAO,aAAa/hC,KAAK+E,MAAMlE,MAAOywB,EAAKE,UAC7E+c,IAAiB7jC,GAXJ,SAACjK,EAAUW,GACxB,KAAOA,EAAEuJ,OAAQvJ,EAAIA,EAAEuJ,OACnB,GAAIvJ,EAAEuJ,SAAWlK,EACb,OAAO,EAIf,OAAO,CACX,CAGkC+tC,CAASD,EAAc7jC,KACrD,EAAAqU,OAAOC,KAAK,UAAG+iB,EAAO,6FACtBzQ,EAAKE,SAAW9mB,EAASvC,MAEjC,MAEA,EAAA4W,OAAOC,KAAK,UAAG+iB,EAAO,gCAE9B,CAGA,IADA,IAAM0M,EAA0C,CAAC,EAC7B,MAAAnd,EAAKgd,OAAL,eAAa,CAA5B,IAAMnmC,EAAK,KACNuB,EAAO07B,GAAUtD,IAAI,UAAGC,EAAO,mBAAW55B,GAASnI,KAAK+E,MAAMlE,MAAOsH,GAC3EnI,KAAK0uC,UAAUhlC,EAAM4nB,EAAMK,EAAiB8c,EAChD,CACJ,EAEQ,YAAAJ,sBAAR,SAA8BtM,EAAiBuM,GAC3C,GAAsB,IAAlBA,EAAO7rC,OACP,OAAO,KAIX,IADA,IAAMksC,EAA2C,CAAC,EAC9B,MAAAL,EAAA,eAAQ,CAGxB,IAHC,IAAMnmC,EAAK,KACNjD,EAAgB,GAClBwE,EAAO07B,GAAUtD,IAAI,UAAGC,EAAO,YAAI55B,GAASnI,KAAK+E,MAAMlE,MAAOsH,IAC3C,IAAhBuB,EAAKvB,OACRjD,EAAK0pC,QAAQllC,GACbA,EAAOA,EAAKiB,OAEhBgkC,EAAMxmC,GAASjD,CACnB,CAGA,IADA,IAAIwF,EAA4B,KACvBnI,EAAI,KAAOA,EAAG,CAEnB,GAAIA,IADA2C,EAAOypC,EAAML,EAAO,KACV7rC,OACV,OAAOiI,EAGLhB,EAAOxE,EAAK3C,GAClB,IADA,IACSgsB,EAAI,EAAGA,EAAI+f,EAAO7rC,SAAU8rB,EAEjC,GAAIhsB,IADJ2C,EAAOypC,EAAML,EAAO/f,KACN9rB,QAAUiH,IAASxE,EAAK3C,GAClC,OAAOmI,EAIfA,EAAWhB,CACf,CACJ,EAEQ,YAAAglC,UAAR,SAAkBhlC,EAAa4nB,EAAaK,EAA2B8c,GACnE/kC,EAAKmlC,UAAW,EAEhB,IAAIC,EAAcL,EAAa/kC,EAAKvB,OACpC,GAAI2mC,EACA,OAAOA,EAGX,IAAIC,EAAoC,KACpCrlC,EAAKvB,QAAUmpB,EAAKE,WAChB9nB,EAAKiB,SAAiC,IAAvBjB,EAAKiB,OAAOxC,MAC3B4mC,EAAoB/uC,KAAK0uC,UAAUhlC,EAAKiB,OAAQ2mB,EAAMK,EAAiB8c,QAC9CnpC,IAAlBgsB,EAAKE,UACZ,EAAAzS,OAAOC,KAAK,iBAAUsS,EAAKnpB,MAAK,mDAIxC,IAAM6mC,EAAY1d,EAAKgd,OAAO/3B,QAAQ7M,EAAKvB,OAW3C,OAVA2mC,EAAc,IAAI,EAAA3gB,KAAKzkB,EAAKuK,MAAQ,eAAQvK,EAAKvB,OAASwpB,EAAiBod,EAAmB/uC,KAAKivC,eAAevlC,GAAO,KAAM,KAAMslC,GACrIP,EAAa/kC,EAAKvB,OAAS2mC,EAG3B9uC,KAAK6jC,sBAAsBh/B,MAAK,WAG5BiqC,EAAYI,kBAAkBxlC,EAAK3I,sBACvC,IAEO+tC,CACX,EAEQ,YAAAZ,sCAAR,SAA8CnM,EAAiBzQ,GAC3D,GAAgChsB,MAA5BgsB,EAAK6d,oBACL,OAAOnsC,QAAQC,QAAQ,MAG3B,IAAMuQ,EAAW4xB,GAAUtD,IAAI,UAAGC,EAAO,wBAAwB/hC,KAAK+E,MAAM8qB,UAAWyB,EAAK6d,qBAC5F,OAAOnvC,KAAKitC,wBAAwB,qBAAcz5B,EAASrL,OAASqL,EACxE,EAEQ,YAAA46B,oBAAR,SAA4Bzc,EAA2Bwc,GACnD,IAA0B,UAAAxc,EAAgB5D,MAAhB,eAAuB,CAA5C,IAAM+gB,EAAW,KACZM,EAAa,EAAA9kC,OAAOG,WACpBukC,EAAYF,EAAYloC,OAC1BunC,IAA0C,IAAfa,IAC3B,EAAA1kC,OAAO+kC,eAAelB,EAAqC,GAAZa,EAAgBI,GAC/DA,EAAWE,YAAYF,IAG3B,IAAMG,EAAoBT,EAAYU,YAClCD,GACAH,EAAWnkC,cAAcskC,EAAkBE,+BAAgCL,GAG/EN,EAAYY,aAAaN,GAAY,GAAO,GAC5CN,EAAYa,iCAA4BrqC,GAAW,EACvD,CACJ,EAEQ,YAAA2pC,eAAR,SAAuBvlC,GACnB,OAAOA,EAAKW,OACN,EAAAC,OAAOuJ,UAAUnK,EAAKW,QACtB,EAAAC,OAAOC,QACHb,EAAK1B,MAAQ,EAAA4L,QAAQC,UAAUnK,EAAK1B,OAAS,EAAA4L,QAAQk6B,MACrDpkC,EAAK5B,SAAW,EAAAkK,WAAW6B,UAAUnK,EAAK5B,UAAY,EAAAkK,WAAWvH,WACjEf,EAAKC,YAAc,EAAAiK,QAAQC,UAAUnK,EAAKC,aAAe,EAAAiK,QAAQ8e,OAE/E,EASO,YAAA4V,gBAAP,SAAuBvG,EAAiBv5B,EAAiBpG,QAAA,IAAAA,IAAAA,EAAA,WAAiD,GACtG,IAAMglC,EAAmBpnC,KAAK4vC,2BAA2B7N,EAASv5B,EAAQpG,GAC1E,GAAIglC,EACA,OAAOA,EAGX,IAAMpC,EAAW,IAAIxjC,MAErBxB,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIv5B,EAAOyL,MAAQ,KAE1CjU,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAMsF,EAAgB,IAAI,EAAA9V,WAAWjqB,EAAOyL,MAAQ,gBAASzL,EAAOL,OAAS,EAAAyL,QAAQ8e,OAAQ1yB,KAAK+jC,eAAe,GASjH,OARAwE,EAAcvZ,iBAAmBhvB,KAAKijC,gBACtCjjC,KAAK+jC,cAAclV,wBAAyB,EAC5C0Z,EAAcsH,qBAAsB,EACpCrnC,EAAOC,eAAiB8/B,EAGxBA,EAAczgC,SAASH,IAAI,EAAG64B,KAAKC,GAAI,GAE/Bj4B,EAAOpB,MACX,IAAK,cACD,IAAM+B,EAAcX,EAAOW,YAC3B,IAAKA,EACD,MAAM,IAAI3D,MAAM,UAAGu8B,EAAO,gDAG9BwG,EAAc9+B,IAAMN,EAAYK,KAChC++B,EAAcr/B,KAAOC,EAAYF,MACjCs/B,EAAcv/B,KAAOG,EAAYJ,MAAQ,EACzC,MAEJ,IAAK,eACD,IAAKP,EAAOF,aACR,MAAM,IAAI9C,MAAM,UAAGu8B,EAAO,iDAG9BwG,EAAcnyB,KAAO,EAAAuc,OAAOC,oBAC5B2V,EAAc7/B,WAAaF,EAAOF,aAAaC,KAC/CggC,EAAc5/B,WAAaH,EAAOF,aAAaC,KAC/CggC,EAAc1/B,aAAeL,EAAOF,aAAaM,KACjD2/B,EAAcz/B,SAAWN,EAAOF,aAAaM,KAC7C2/B,EAAcr/B,KAAOV,EAAOF,aAAaW,MACzCs/B,EAAcv/B,KAAOR,EAAOF,aAAaS,KACzC,MAEJ,QACI,MAAM,IAAIvD,MAAM,UAAGu8B,EAAO,kCAA0Bv5B,EAAOpB,KAAI,MAUvE,OANAs2B,EAAW2K,mBAAmBE,EAAexG,GAC7C/hC,KAAK8xB,QAAQpW,yBAAyB2C,gBAAgBkqB,GACtDnmC,EAAOmmC,GAEPvoC,KAAK0nC,WAEE1kC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAO4kC,CACX,GACJ,EAEQ,YAAAd,qBAAR,WACI,IAAMlnC,EAAaP,KAAK+E,MAAMxE,WAC9B,IAAKA,EACD,OAAOyC,QAAQC,UAKnB,IAFA,IAAM+hC,EAAW,IAAIxjC,MAEZ2G,EAAQ,EAAGA,EAAQ5H,EAAWkC,OAAQ0F,IAAS,CACpD,IAAMoK,EAAYhS,EAAW4H,GAC7B68B,EAASngC,KACL7E,KAAK8vC,mBAAmB,sBAAev9B,EAAUpK,OAASoK,GAAW5O,MAAK,SAACosC,GAEtB,IAA7CA,EAAeC,mBAAmBvtC,QAClCstC,EAAe/xB,SAEvB,IAER,CAEA,OAAOhb,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EAQO,YAAAmsC,mBAAP,SAA0B/N,EAAiBxvB,GAA3C,WAEI,OADgBvS,KAAKiwC,8BAA8BlO,EAASxvB,IAMrD,2CAAyC5O,MAAK,SAAC,G,IAAEusC,EAAc,iBAClE,EAAKnM,cAAclV,yBAA2B,EAAKoU,gBACnD,IAAMkN,EAAwB,IAAID,EAAe39B,EAAU0B,MAAQ,mBAAY1B,EAAUpK,OAAS,EAAK47B,eACvGoM,EAAsBnhB,iBAAmB,EAAKiU,gBAC9C,EAAKc,cAAclV,wBAAyB,EAC5Ctc,EAAU7R,uBAAyByvC,EAEnC,IAAMnL,EAAW,IAAIxjC,MAErB4jC,GAAUlD,OAAO3vB,EAAUqiB,UAC3BwQ,GAAUlD,OAAO3vB,EAAU+Y,UAE3B,IAAsB,UAAA/Y,EAAUqiB,SAAV,eAAoB,CAArC,IAAMpH,EAAO,KACdwX,EAASngC,KACL,EAAKurC,2BAA2B,UAAGrO,EAAO,qBAAavU,EAAQrlB,OAAS45B,EAASxvB,EAAWib,GAAS,SAAC6iB,EAAe97B,GACjH87B,EAAc9vC,WAAa8vC,EAAc9vC,YAAc,GACvD8vC,EAAc9vC,WAAWsE,KAAK0P,GAC9B47B,EAAsBG,qBAAqB/7B,EAAkB87B,EACjE,IAER,CAEA,OAAOrtC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAE9B,OADAwsC,EAAsBI,UAAU,GACzBJ,CACX,GACJ,GACJ,EAYa,YAAAC,2BAAb,SACIrO,EACAyO,EACAj+B,EACAib,EACAmR,G,8HAGA,OADMkL,EAAU7pC,KAAKywC,qCAAqC1O,EAASyO,EAAkBj+B,EAAWib,EAASmR,IAE9F,CAAP,EAAOkL,GAGgBvkC,MAAvBkoB,EAAQnoB,OAAOqE,KACR,CAAP,EAAO1G,QAAQC,YAGbsyB,EAAa6P,GAAUtD,IAAI,UAAGC,EAAO,gBAAgB/hC,KAAK+E,MAAMlE,MAAO2sB,EAAQnoB,OAAOqE,MACtFgnC,EAAoBljB,EAAQnoB,OAAOH,MACnCyrC,EAAsC,YAAtBD,KAGCnb,EAAWtrB,mBAAuB0mC,IAAkBpb,EAAWx0B,sBAC3E,CAAP,EAAOiC,QAAQC,WAIdjD,KAAK8xB,QAAQ9M,oBAAuB2rB,GAAkBpb,EAAWsZ,SAItE,GAAM,uCAHK,CAAP,EAAO7rC,QAAQC,Y,OAMnB,OAHA,SAGQytC,GACJ,IAAK,cACDE,EAAsD,QAAzC,YAAiB,gCAAwB,eAAEt9B,cACxD,MAEJ,IAAK,WACDs9B,EAAmD,QAAtC,YAAiB,6BAAqB,eAAEt9B,cACrD,MAEJ,IAAK,QACDs9B,EAAgD,QAAnC,YAAiB,0BAAkB,eAAEt9B,cAClD,MAEJ,IAAK,UACDs9B,EAAkD,QAArC,YAAiB,4BAAoB,eAAEt9B,cACpD,MAEJ,QACI,MAAM,IAAI9N,MAAM,UAAGu8B,EAAO,wCAAgCvU,EAAQnoB,OAAOH,KAAI,MAIrF,IAAK0rC,EACD,MAAM,IAAIprC,MAAM,UAAGu8B,EAAO,kFAA0EvU,EAAQnoB,OAAOH,KAAI,MAQ3H,OALM2rC,EAAwD,CAC1D1qC,OAAQovB,EACRnvB,KAAMwqC,GAGH,CAAP,EAAO5wC,KAAK8wC,yCAAyC/O,EAASyO,EAAkBj+B,EAAWib,EAASqjB,EAAYlS,I,QAc7G,YAAAmS,yCAAP,SACI/O,EACAyO,EACAj+B,EACAib,EACAqjB,EACAlS,GAEA,IAAMtqB,EAAMrU,KAAK2K,OAAOkb,UAClBkrB,EAAS,EAAI18B,EAEbygB,EAAUsQ,GAAUtD,IAAI,UAAGC,EAAO,YAAYxvB,EAAU+Y,SAAUkC,EAAQsH,SAChF,OAAO90B,KAAKgxC,2BAA2B,UAAGR,EAAgB,qBAAahjB,EAAQsH,SAAWA,GAASnxB,MAAK,SAACyT,GAUrG,IATA,IAAI65B,EAAgB,EAEd5rC,EAASwrC,EAAW1qC,OAOC,MANL0qC,EAAWzqC,KAMN,eAAe,CAArC,IAAM8qC,EAAY,KACbC,EAASD,EAAa/8B,UAAU9O,GAChC6vB,EAAQ9d,EAAK8d,MACbC,EAAS/d,EAAK+d,OACd7gB,EAAO,IAAI9S,MAAqB0zB,EAAMzyB,QACxC2uC,EAAe,EAEnB,OAAQh6B,EAAK9D,eACT,IAAK,OACD,IAAK,IAAInL,EAAQ,EAAGA,EAAQ+sB,EAAMzyB,OAAQ0F,IAAS,CAC/C,IAAM/E,EAAQ8tC,EAAah9B,SAAS7O,EAAQ8vB,EAAQic,EAAc,GAClEA,GAAgBD,EAEhB78B,EAAKnM,GAAS,CACV4M,MAAOmgB,EAAM/sB,GAASkM,EACtBjR,MAAOA,EACPkQ,cAAe,EAEvB,CACA,MAEJ,IAAK,cACD,IAASnL,EAAQ,EAAGA,EAAQ+sB,EAAMzyB,OAAQ0F,IAAS,CAC/C,IAAM6M,EAAYk8B,EAAah9B,SAAS7O,EAAQ8vB,EAAQic,EAAcL,GACtEK,GAAgBD,EACV/tC,EAAQ8tC,EAAah9B,SAAS7O,EAAQ8vB,EAAQic,EAAc,GAClEA,GAAgBD,EAChB,IAAMl8B,EAAai8B,EAAah9B,SAAS7O,EAAQ8vB,EAAQic,EAAcL,GACvEK,GAAgBD,EAEhB78B,EAAKnM,GAAS,CACV4M,MAAOmgB,EAAM/sB,GAASkM,EACtBW,UAAWA,EACX5R,MAAOA,EACP6R,WAAYA,EAEpB,CACA,MAEJ,IAAK,SACD,IAAS9M,EAAQ,EAAGA,EAAQ+sB,EAAMzyB,OAAQ0F,IAChC/E,EAAQ8tC,EAAah9B,SAAS7O,EAAQ8vB,EAAQic,EAAc,GAClEA,GAAgBD,EAEhB78B,EAAKnM,GAAS,CACV4M,MAAOmgB,EAAM/sB,GAASkM,EACtBjR,MAAOA,GAOvB,GAAIguC,EAAe,EAGf,IAFA,IAAM,EAAO,UAAG7+B,EAAU0B,MAAQ,mBAAY1B,EAAUpK,OAAO,mBAAWqlB,EAAQrlB,MAAK,YAAI8oC,GAE5D,MADLC,EAAax8B,gBAAgBrP,EAAQ,EAAMgP,EAAKC,GAC3C,eAAmB,CAA7C,IAAMC,EAAgB,KACvB08B,IACAtS,EAAOpqB,EAAiBK,kBAAmBL,EAAiBA,iBAChE,CAER,CACJ,GACJ,EAEQ,YAAAy8B,2BAAR,SAAmCjP,EAAiBjN,GAChD,GAAIA,EAAQjuB,MACR,OAAOiuB,EAAQjuB,MAGnB,IAAMyM,EAAgBwhB,EAAQxhB,eAAiB,SAC/C,OAAQA,GACJ,IAAK,OACL,IAAK,SACL,IAAK,cACD,MAEJ,QACI,MAAM,IAAI9N,MAAM,UAAGu8B,EAAO,0CAAkCjN,EAAQxhB,cAAa,MAIzF,IAAM+9B,EAAgBjM,GAAUtD,IAAI,UAAGC,EAAO,UAAU/hC,KAAK+E,MAAM8qB,UAAWiF,EAAQI,OAChFoc,EAAiBlM,GAAUtD,IAAI,UAAGC,EAAO,WAAW/hC,KAAK+E,MAAM8qB,UAAWiF,EAAQK,QAYxF,OAXAL,EAAQjuB,MAAQ7D,QAAQ6iC,IAAI,CACxB7lC,KAAKitC,wBAAwB,qBAAcoE,EAAclpC,OAASkpC,GAClErxC,KAAKitC,wBAAwB,qBAAcqE,EAAenpC,OAASmpC,KACpE3tC,MAAK,SAAC,G,IAACoxB,EAAS,KAAEC,EAAU,KAC3B,MAAO,CACHE,MAAOH,EACPzhB,cAAeA,EACf6hB,OAAQH,EAEhB,IAEOF,EAAQjuB,KACnB,EAUO,YAAAo4B,gBAAP,SAAuB8C,EAAiBvoB,EAAiBiB,EAAoBC,GACzE,IAAM0sB,EAAmBpnC,KAAKuxC,2BAA2BxP,EAASvoB,EAAQiB,EAAYC,GACtF,GAAI0sB,EACA,OAAOA,EAGX,IAAK5tB,EAAO3S,MACR,GAAI2S,EAAO9B,IACP8B,EAAO3S,MAAQ7G,KAAKwxC,aAAa,UAAGzP,EAAO,QAAQvoB,EAAQA,EAAO9B,SAC/D,CACH,IAAK1X,KAAK8/B,KACN,MAAM,IAAIt6B,MAAM,UAAGu8B,EAAO,oEAG9BvoB,EAAO3S,MAAQ7G,KAAK8/B,KAAKvlB,UAAU,EAAGf,EAAOkB,WACjD,CAGJ,OAAOlB,EAAO3S,MAAMlD,MAAK,SAACyT,GACtB,IACI,OAAO,IAAIuD,WAAWvD,EAAKoC,OAAQpC,EAAKqD,WAAaA,EAAYC,EACrE,CAAE,MAAOnX,GACL,MAAM,IAAIiC,MAAM,UAAGu8B,EAAO,aAAKx+B,EAAE4U,SACrC,CACJ,GACJ,EAQO,YAAAs5B,oBAAP,SAA2B1P,EAAiBnY,GACxC,IAAMwd,EAAmBpnC,KAAK0xC,+BAA+B3P,EAASnY,GACtE,GAAIwd,EACA,OAAOA,EAGX,GAAIxd,EAAW/iB,MACX,OAAO+iB,EAAW/iB,MAGtB,IAAM2S,EAAS4rB,GAAUtD,IAAI,UAAGC,EAAO,WAAW/hC,KAAK+E,MAAMqyB,QAASxN,EAAWpQ,QAGjF,OAFAoQ,EAAW/iB,MAAQ7G,KAAKi/B,gBAAgB,mBAAYzlB,EAAOrR,OAASqR,EAAQoQ,EAAWnP,YAAc,EAAGmP,EAAWlP,YAE5GkP,EAAW/iB,KACtB,EAEQ,YAAA8qC,mBAAR,SAA2B5P,EAAiBvuB,EAAqBvR,GAAjE,WACI,GAAIuR,EAAS3M,MACT,OAAO2M,EAAS3M,MAGpB,IAAM+qC,EAAgBlU,EAAWmU,kBAAkB9P,EAASvuB,EAASpM,MAC/D0qC,EAAaF,EAAgB,EAAA3hB,aAAa8hB,kBAAkBv+B,EAASqW,eACrEpnB,EAASmvC,EAAgBp+B,EAASkX,MAExC,GAA2BplB,MAAvBkO,EAASoW,WACTpW,EAAS3M,MAAQ7D,QAAQC,QAAQ,IAAIhB,EAAYQ,QAC9C,CACH,IAAM,EAAa2iC,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAK+E,MAAM0lB,YAAajX,EAASoW,YAC3FpW,EAAS3M,MAAQ7G,KAAKyxC,oBAAoB,uBAAgB,EAAWtpC,OAAS,GAAYxE,MAAK,SAACyT,GAC5F,GAA+B,OAA3B5D,EAASqW,eAAkDrW,EAASovB,YAAgB,EAAWkP,YAAc,EAAWA,aAAeA,EAEpI,CACH,IAAM,EAAa,IAAI7vC,EAAYQ,GAanC,OAZA,EAAAwtB,aAAa+hB,QACT56B,EACA5D,EAASiH,YAAc,EACvB,EAAWq3B,YAAcA,EACzBF,EACAp+B,EAASqW,cACT,EAAWpnB,OACX+Q,EAASovB,aAAc,GACvB,SAACx/B,EAAO+E,GACJ,EAAWA,GAAS/E,CACxB,IAEG,CACX,CAhBI,OAAOs6B,EAAWuU,eAAelQ,EAASvuB,EAASqW,cAAezS,EAAM5D,EAASiH,WAAYhY,EAiBrG,GACJ,CAEA,GAAI+Q,EAAS0+B,OAAQ,CACjB,IAAM,EAAS1+B,EAAS0+B,OACxB1+B,EAAS3M,MAAQ2M,EAAS3M,MAAMlD,MAAK,SAACyT,GAClC,IAAM+6B,EAAa/6B,EACbg7B,EAAoBhN,GAAUtD,IAAI,UAAGC,EAAO,8BAA8B,EAAKh9B,MAAM0lB,YAAa,EAAO8F,QAAQ3G,YACjHyoB,EAAmBjN,GAAUtD,IAAI,UAAGC,EAAO,6BAA6B,EAAKh9B,MAAM0lB,YAAa,EAAOkR,OAAO/R,YACpH,OAAO5mB,QAAQ6iC,IAAI,CACf,EAAK4L,oBAAoB,uBAAgBW,EAAkBjqC,OAASiqC,GACpE,EAAKX,oBAAoB,uBAAgBY,EAAiBlqC,OAASkqC,KACpE1uC,MAAK,SAAC,G,IAUDg4B,EAVE2W,EAAW,KAAEC,EAAU,KACvBhiB,EAAUmN,EAAWuU,eACvB,UAAGlQ,EAAO,mBACV,EAAOxR,QAAQ1G,cACfyoB,EACA,EAAO/hB,QAAQ9V,WACf,EAAOiQ,OAGL8nB,EAAeZ,EAAgB,EAAOlnB,MAG5C,GAA+B,OAA3BlX,EAASqW,eAAkDrW,EAASovB,WAEjE,CACH,IAAM6P,EAAa/U,EAAWuU,eAAe,UAAGlQ,EAAO,kBAAkBvuB,EAASqW,cAAe0oB,EAAY,EAAO5W,OAAOlhB,WAAY+3B,GACvI7W,EAAS,IAAI15B,EAAYuwC,GACzB,EAAAviB,aAAa+hB,QAAQS,EAAY,EAAGX,EAAYF,EAAep+B,EAASqW,cAAe8R,EAAOl5B,OAAQ+Q,EAASovB,aAAc,GAAO,SAACx/B,EAAO+E,GACxIwzB,EAAOxzB,GAAS/E,CACpB,GACJ,MAPIu4B,EAAS+B,EAAWuU,eAAe,UAAGlQ,EAAO,kBAAkBvuB,EAASqW,cAAe0oB,EAAY,EAAO5W,OAAOlhB,WAAY+3B,GAUjI,IADA,IAAIE,EAAc,EACTC,EAAe,EAAGA,EAAepiB,EAAQ9tB,OAAQkwC,IAEtD,IADA,IAAItF,EAAY9c,EAAQoiB,GAAgBf,EAC/BgB,EAAiB,EAAGA,EAAiBhB,EAAegB,IACzDT,EAAW9E,KAAe1R,EAAO+W,KAIzC,OAAOP,CACX,GACJ,GACJ,CAEA,OAAO3+B,EAAS3M,KACpB,EAKO,YAAAomC,wBAAP,SAA+BlL,EAAiBvuB,GAC5C,OAAOxT,KAAK2xC,mBAAmB5P,EAASvuB,EAAU+W,aACtD,EAKO,YAAAogB,0BAAP,SAAiC5I,EAAiBvuB,GAC9C,GAAsB,WAAlBA,EAASpM,KACT,MAAM,IAAI5B,MAAM,UAAGu8B,EAAO,gCAAwBvuB,EAASpM,OAG/D,GAC+B,OAA3BoM,EAASqW,eACkB,OAA3BrW,EAASqW,eACkB,OAA3BrW,EAASqW,cAET,MAAM,IAAIrkB,MAAM,UAAGu8B,EAAO,yCAAiCvuB,EAASqW,gBAGxE,GAAIrW,EAAS3M,MACT,OAAO2M,EAAS3M,MAGpB,GAAI2M,EAAS0+B,OAAQ,CACjB,IAAMjwC,EAAcy7B,EAAWmV,0BAA0B,UAAG9Q,EAAO,kBAAkBvuB,EAASqW,eAC9FrW,EAAS3M,MAAQ7G,KAAK2xC,mBAAmB5P,EAASvuB,EAAUvR,EAChE,KAAO,CACH,IAAM2nB,EAAawb,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAK+E,MAAM0lB,YAAajX,EAASoW,YAC3FpW,EAAS3M,MAAQ7G,KAAKyxC,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,GAAYjmB,MAAK,SAACyT,GAC5F,OAAOsmB,EAAWuU,eAAelQ,EAASvuB,EAASqW,cAAezS,EAAM5D,EAASiH,WAAYjH,EAASkX,MAC1G,GACJ,CAEA,OAAOlX,EAAS3M,KACpB,EAKO,YAAAisC,2BAAP,SAAkClpB,GAC9B,GAAIA,EAAWmpB,eACX,OAAOnpB,EAAWmpB,eAGtB,IAAMC,EAAShzC,KAAK+jC,cAAc16B,YAKlC,OAJAugB,EAAWmpB,eAAiB/yC,KAAKyxC,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,GAAYjmB,MAAK,SAACyT,GACvG,OAAO,IAAI,EAAA67B,OAAOD,EAAQ57B,GAAM,EACpC,IAEOwS,EAAWmpB,cACtB,EAKO,YAAA/H,yBAAP,SAAgCjJ,EAAiBvuB,EAAqBs3B,G,MAClE,GAAiC,QAA7B,EAAAt3B,EAAS0/B,4BAAoB,eAAGpI,GAChC,OAAOt3B,EAAS0/B,qBAAqBpI,GAGpCt3B,EAAS0/B,uBACV1/B,EAAS0/B,qBAAuB,CAAC,GAGrC,IAAMF,EAAShzC,KAAK+jC,cAAc16B,YAElC,GAAImK,EAAS0+B,QAAiC5sC,MAAvBkO,EAASoW,WAC5BpW,EAAS0/B,qBAAqBpI,GAAQ9qC,KAAKitC,wBAAwBlL,EAASvuB,GAAU7P,MAAK,SAACyT,GACxF,OAAO,IAAI,EAAA6Y,aAAa+iB,EAAQ57B,EAAM0zB,GAAM,EAChD,QACG,CACH,IAAM,EAAa1F,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAK+E,MAAM0lB,YAAajX,EAASoW,YAC3FpW,EAAS0/B,qBAAqBpI,GAAQ9qC,KAAK8yC,2BAA2B,GAAYnvC,MAAK,SAACwvC,GACpF,IAAMvB,EAAgBlU,EAAWmU,kBAAkB9P,EAASvuB,EAASpM,MACrE,OAAO,IAAI,EAAA6oB,aACP+iB,EACAG,EACArI,GACA,OACAxlC,EACA,EAAWwsC,gBACXxsC,EACAkO,EAASiH,WACTm3B,EACAp+B,EAASqW,cACTrW,EAASovB,YACT,OACAt9B,GACA,EAER,GACJ,CAEA,OAAOkO,EAAS0/B,qBAAqBpI,EACzC,EAEQ,YAAAsI,8CAAR,SAAsDrR,EAAiB6O,EAA2ClqC,GAC9G,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAqCrB,OAnCIovC,IACIA,EAAWpkC,iBACX9F,EAAgBiG,YAAc,EAAA0mB,OAAOxf,UAAU+8B,EAAWpkC,iBAC1D9F,EAAgBkG,MAAQgkC,EAAWpkC,gBAAgB,IAEnD9F,EAAgBiG,YAAc,EAAA0mB,OAAOigB,QAGzC5sC,EAAgBsG,SAAwC1H,MAA7BsrC,EAAW7jC,eAA8B,EAAI6jC,EAAW7jC,eACnFrG,EAAgBwG,UAA0C5H,MAA9BsrC,EAAW3jC,gBAA+B,EAAI2jC,EAAW3jC,gBAEjF2jC,EAAW9jC,kBACXk4B,EAASngC,KACL7E,KAAKuzC,qBAAqB,UAAGxR,EAAO,qBAAqB6O,EAAW9jC,kBAAkB,SAACxF,GACnFA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,iBACtCvN,EAAgB8sC,cAAgBlsC,CACpC,KAIJspC,EAAWzjC,2BACXyjC,EAAWzjC,yBAAyBsmC,cAAe,EACnDzO,EAASngC,KACL7E,KAAKuzC,qBAAqB,UAAGxR,EAAO,6BAA6B6O,EAAWzjC,0BAA0B,SAAC7F,GACnGA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,yBACtCvN,EAAgBgtC,gBAAkBpsC,CACtC,KAGJZ,EAAgBitC,sCAAuC,EACvDjtC,EAAgBktC,sCAAuC,EACvDltC,EAAgBmtC,sCAAuC,IAIxD7wC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EAKO,YAAA6hC,mBAAP,SACIzD,EACAz7B,EACA4O,EACAowB,EACAljC,QAAA,IAAAA,IAAAA,EAAA,WAAqD,GAErD,IAAMglC,EAAmBpnC,KAAK8zC,6BAA6B/R,EAASz7B,EAAU4O,EAAaowB,EAAiBljC,GAC5G,GAAIglC,EACA,OAAOA,EAGX9gC,EAASO,MAAQP,EAASO,OAAS,CAAC,EACpC,IAAIktC,EAAcztC,EAASO,MAAMy+B,GACjC,IAAKyO,EAAa,CACd/zC,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIz7B,EAAS2N,MAAQ,KAE5C,IAAMvN,EAAkB1G,KAAKg0C,eAAejS,EAASz7B,EAAUg/B,GAE/DyO,EAAc,CACVrtC,gBAAiBA,EACjButC,cAAe,GACfpK,QAAS7pC,KAAKk0C,4BAA4BnS,EAASz7B,EAAUI,IAGjEJ,EAASO,MAAMy+B,GAAmByO,EAElCrW,EAAW2K,mBAAmB3hC,EAAiBq7B,GAC/C/hC,KAAK8xB,QAAQrW,2BAA2B4C,gBAAgB3X,GAExD1G,KAAK0nC,UACT,CAeA,OAbIxyB,IACA6+B,EAAYE,cAAcpvC,KAAKqQ,GAE/BA,EAAY2G,oBAAoBoF,SAAQ,WACpC,IAAM9Y,EAAQ4rC,EAAYE,cAAc19B,QAAQrB,IACjC,IAAX/M,GACA4rC,EAAYE,cAAcE,OAAOhsC,EAAO,EAEhD,KAGJ/F,EAAO2xC,EAAYrtC,iBAEZqtC,EAAYlK,QAAQlmC,MAAK,WAC5B,OAAOowC,EAAYrtC,eACvB,GACJ,EAEQ,YAAA8jC,uBAAR,SAA+Bv2B,EAAcqxB,GACzCtlC,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAMv8B,EAAkB,IAAI,EAAA2sC,YAAYp/B,EAAMjU,KAAK+jC,eAYnD,OAXAr9B,EAAgBsoB,iBAAmBhvB,KAAKijC,gBACxCjjC,KAAK+jC,cAAclV,wBAAyB,EAE5CnoB,EAAgBI,SAAWw+B,EAC3B5+B,EAAgB0tC,4BAA6B,EAC7C1tC,EAAgB2tC,sBAAwBr0C,KAAK8xB,QAAQxM,uBACrD5e,EAAgB4tC,sBAAwBt0C,KAAK8xB,QAAQxM,uBACrD5e,EAAgB6tC,iBAAmB,EAAAlB,YAAYmB,mBAC/C9tC,EAAgBsG,SAAW,EAC3BtG,EAAgBwG,UAAY,EAErBxG,CACX,EASO,YAAAstC,eAAP,SAAsBjS,EAAiBz7B,EAAqBg/B,GACxD,IAAM8B,EAAmBpnC,KAAKy0C,0BAA0B1S,EAASz7B,EAAUg/B,GAC3E,GAAI8B,EACA,OAAOA,EAGX,IAAMnzB,EAAO3N,EAAS2N,MAAQ,kBAAW3N,EAAS6B,OAGlD,OAFwBnI,KAAKwqC,uBAAuBv2B,EAAMqxB,EAG9D,EASO,YAAA4O,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GACrE,IAAM0gC,EAAmBpnC,KAAK00C,uCAAuC3S,EAASz7B,EAAUI,GACxF,GAAI0gC,EACA,OAAOA,EAGX,IAAMpC,EAAW,IAAIxjC,MAUrB,OARAwjC,EAASngC,KAAK7E,KAAK20C,gCAAgC5S,EAASz7B,EAAUI,IAElEJ,EAASiG,sBACTy4B,EAASngC,KAAK7E,KAAKozC,8CAA8C,UAAGrR,EAAO,yBAAyBz7B,EAASiG,qBAAsB7F,IAGvI1G,KAAK40C,4BAA4B7S,EAASz7B,EAAUI,GAE7C1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EASO,YAAAgxC,gCAAP,SAAuC5S,EAAiBz7B,EAAqBI,GACzE,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAkDrB,OAhDAkF,EAAgBoF,cAAgBxF,EAASuF,eAAiB,EAAAwnB,OAAOxf,UAAUvN,EAASuF,gBAAkB,IAAI,EAAAwnB,OAAO,EAAG,EAAG,GACnH/sB,EAASs6B,cACTl6B,EAAgB81B,iBAAkB,EAClC91B,EAAgBmuC,kBAAmB,GAGnCvuC,EAAS2F,gBACT3F,EAAS2F,cAAcwnC,cAAe,EACtCzO,EAASngC,KACL7E,KAAKuzC,qBAAqB,UAAGxR,EAAO,kBAAkBz7B,EAAS2F,eAAe,SAAC3E,GAC3EA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,aACtCvN,EAAgBsH,YAAc1G,CAClC,KAGJZ,EAAgBouC,kBAAoB90C,KAAK+jC,cAAc3xB,qBACvD1L,EAAgBquC,iBAAmB/0C,KAAK+jC,cAAc3xB,qBAClB9M,MAAhCgB,EAAS2F,cAAcjE,OAAsBtB,EAAgBsH,cAC7DtH,EAAgBsH,YAAY9B,MAAQ5F,EAAS2F,cAAcjE,OAG/DtB,EAAgBsuC,2BAA4B,GAG5C1uC,EAAS6F,mBACT7F,EAAS6F,iBAAiBsnC,cAAe,EACzCzO,EAASngC,KACL7E,KAAKuzC,qBAAqB,UAAGxR,EAAO,qBAAqBz7B,EAAS6F,kBAAkB,SAAC7E,GACjFA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,gBACtCvN,EAAgBuuC,eAAiB3tC,CACrC,KAGJZ,EAAgBwuC,uBAAwB,EACE5vC,MAAtCgB,EAAS6F,iBAAiBC,WAC1B1F,EAAgB2F,uBAAyB/F,EAAS6F,iBAAiBC,WAIvE9F,EAASyF,iBACTi5B,EAASngC,KACL7E,KAAKuzC,qBAAqB,UAAGxR,EAAO,oBAAoBz7B,EAASyF,iBAAiB,SAACzE,GAC/EA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,eACtCvN,EAAgBqF,gBAAkBzE,CACtC,KAIDtE,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EASO,YAAAixC,4BAAP,SAAmC7S,EAAiBz7B,EAAqBI,GACrE,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAI9B,OADkBz7B,EAASw2B,WAAa,UAEpC,IAAK,SACDp2B,EAAgB6tC,iBAAmB,EAAAlB,YAAYmB,mBAC/C9tC,EAAgBkG,MAAQ,EACxB,MAEJ,IAAK,OACDlG,EAAgB6tC,iBAAmB,EAAAlB,YAAY8B,sBAC/CzuC,EAAgB0uC,YAAsC9vC,MAAxBgB,EAAS+uC,YAA2B,GAAM/uC,EAAS+uC,YAC7E3uC,EAAgB8sC,gBAChB9sC,EAAgB8sC,cAAc8B,UAAW,GAE7C,MAEJ,IAAK,QACD5uC,EAAgB6tC,iBAAmB,EAAAlB,YAAYkC,uBAC3C7uC,EAAgB8sC,gBAChB9sC,EAAgB8sC,cAAc8B,UAAW,EACzC5uC,EAAgB8uC,2BAA4B,GAEhD,MAEJ,QACI,MAAM,IAAIhwC,MAAM,UAAGu8B,EAAO,sCAA8Bz7B,EAASw2B,UAAS,MAGtF,EASO,YAAAyW,qBAAP,SAA4BxR,EAAiB0T,EAA2BrzC,GAAxE,gBAAwE,IAAAA,IAAAA,EAAA,WAAuD,GAC3H,IAAMglC,EAAmBpnC,KAAK01C,gCAAgC3T,EAAS0T,EAAarzC,GACpF,GAAIglC,EACA,OAAOA,EAKX,GAFApnC,KAAKsnC,QAAQ,UAAGvF,IAEZ0T,EAAYE,UAAa,EACzB,MAAM,IAAInwC,MAAM,UAAGu8B,EAAO,qCAA6B0T,EAAYE,SAAQ,MAG/E,IAAMruC,EAAU89B,GAAUtD,IAAI,UAAGC,EAAO,UAAU/hC,KAAK+E,MAAMsb,SAAUo1B,EAAYttC,OACnFb,EAAQsuC,aAAeH,EAEvB,IAAM5L,EAAU7pC,KAAK61C,kBAAkB,oBAAaJ,EAAYttC,OAASb,GAAS,SAACyxB,GAC/EA,EAAe+c,iBAAmBL,EAAYE,UAAY,EAC1DjY,EAAW2K,mBAAmBtP,EAAgBgJ,GAC9C,EAAKjQ,QAAQtW,0BAA0B6C,gBAAgB0a,GACvD32B,EAAO22B,EACX,IAIA,OAFA/4B,KAAK0nC,WAEEmC,CACX,EAKO,YAAAgM,kBAAP,SAAyB9T,EAAiBz6B,EAAmBlF,QAAA,IAAAA,IAAAA,EAAA,WAAuD,GAChH,IAAMglC,EAAmBpnC,KAAK+1C,4BAA4BhU,EAASz6B,EAASlF,GAC5E,GAAIglC,EACA,OAAOA,EAGXpnC,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIz6B,EAAQ2M,MAAQ,KAE3C,IAAM6gB,EAA6BxvB,MAAnBgC,EAAQwtB,QAAuB4I,EAAWsY,eAAiB5Q,GAAUtD,IAAI,UAAGC,EAAO,YAAY/hC,KAAK+E,MAAMumB,SAAUhkB,EAAQwtB,SACtImhB,EAAQ7Q,GAAUtD,IAAI,UAAGC,EAAO,WAAW/hC,KAAK+E,MAAMsyB,OAAQ/vB,EAAQqM,QACtEk2B,EAAU7pC,KAAKk2C,oBAAoBnU,EAASjN,EAASmhB,EAAO7zC,OAAQkD,GAAYgC,EAAQsuC,aAAanC,cAI3G,OAFAzzC,KAAK0nC,WAEEmC,CACX,EAKO,YAAAqM,oBAAP,SACInU,EACAjN,EACAmhB,EACA7zC,EACA+zC,EACAC,GANJ,gBAII,IAAAh0C,IAAAA,EAAA,WAAuD,GAIvD,IAAMi0C,EAAcr2C,KAAKs2C,aAAa,oBAAaxhB,EAAQ3sB,OAAS2sB,GAE9DkQ,EAAW,IAAIxjC,MAEf+0C,EAAW,IAAI,EAAAC,SACrBx2C,KAAK+jC,cAAclV,yBAA2B7uB,KAAKijC,gBACnD,IAAMwT,EAAkD,CACpDC,SAAUL,EAAYM,UACtBC,SAAS,EACTxd,aAAcid,EAAYjd,aAC1BuF,OAAQ,WACC,EAAK4E,WACNgT,EAAStzC,SAEjB,EACAmW,QAAS,SAACjB,EAAkB0+B,GACnB,EAAKtT,WACNgT,EAASrzC,OAAO,IAAIsC,MAAM,UAAGu8B,EAAO,aAAK8U,GAAaA,EAAU1+B,QAAU0+B,EAAU1+B,QAAUA,GAAW,2BAEjH,EACAmC,SAAU27B,EAAM37B,SAChBw8B,cAAeX,EACfC,gBAAiBA,GAAiBp2C,KAAK8xB,QAAQlM,gBAE7CmT,EAAiB,IAAI,EAAArQ,QAAQ,KAAM1oB,KAAK+jC,cAAe0S,GA2B7D,OA1BA1d,EAAe/J,iBAAmBhvB,KAAKijC,gBACvCjjC,KAAK+jC,cAAclV,wBAAyB,EAC5CmW,EAASngC,KAAK0xC,EAAS1M,SAEvB7E,EAASngC,KACL7E,KAAK+2C,eAAe,kBAAWd,EAAM9tC,OAAS8tC,GAAOtyC,MAAK,SAACyT,GACvD,IAAMnD,EAAOgiC,EAAMv+B,KAAO,UAAG,EAAK+rB,UAAS,iBAASwS,EAAM9tC,OACpD6uC,EAAU,eAAQ,EAAKtT,gBAAc,OAAGzvB,GAC9C8kB,EAAeke,UAAUD,EAAS5/B,GAGlC,IAAM8/B,EAAkBne,EAAeoe,qBACnCD,IACAA,EAAgBjzC,MAAQgyC,EAAMhiC,KAEtC,KAGJ8kB,EAAeY,MAAQ0c,EAAY1c,MACnCZ,EAAec,MAAQwc,EAAYxc,MACnCz3B,EAAO22B,GAEH/4B,KAAK8xB,QAAQ/L,sBACbgT,EAAe9kB,KAAOgiC,EAAMhiC,MAAQgiC,EAAMv+B,KAAO,eAAQu+B,EAAM9tC,QAG5DnF,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAOo1B,CACX,GACJ,EAEQ,YAAAud,aAAR,SAAqBvU,EAAiBjN,GAUlC,OATKA,EAAQjuB,QACTiuB,EAAQjuB,MAAQ,CACZ8vC,UAAiC,OAAtB7hB,EAAQoE,WAAgE,OAAtBpE,EAAQoE,UACrEE,aAAcsE,EAAW0Z,wBAAwBrV,EAASjN,GAC1D6E,MAAO+D,EAAW2Z,oBAAoB,UAAGtV,EAAO,UAAUjN,EAAQ4E,OAClEG,MAAO6D,EAAW2Z,oBAAoB,UAAGtV,EAAO,UAAUjN,EAAQ8E,SAInE9E,EAAQjuB,KACnB,EAQO,YAAAkwC,eAAP,SAAsBhV,EAAiBkU,GACnC,IAAKA,EAAMpvC,MAAO,CAGd,GAFA7G,KAAKsnC,QAAQ,UAAGvF,EAAO,YAAIkU,EAAMhiC,MAAQ,KAErCgiC,EAAMv+B,IACNu+B,EAAMpvC,MAAQ7G,KAAKwxC,aAAa,UAAGzP,EAAO,QAAQkU,EAAOA,EAAMv+B,SAC5D,CACH,IAAMkS,EAAawb,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAK+E,MAAM0lB,YAAawrB,EAAMrsB,YACxFqsB,EAAMpvC,MAAQ7G,KAAKyxC,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,EAC/E,CAEA5pB,KAAK0nC,UACT,CAEA,OAAOuO,EAAMpvC,KACjB,EASO,YAAA2qC,aAAP,SAAoBzP,EAAiBuV,EAAqB5/B,GAA1D,WACU0vB,EAAmBpnC,KAAKu3C,wBAAwBxV,EAASuV,EAAU5/B,GACzE,GAAI0vB,EACA,OAAOA,EAGX,IAAK1J,EAAW8Z,aAAa9/B,GACzB,MAAM,IAAIlS,MAAM,UAAGu8B,EAAO,cAAMrqB,EAAG,iBAGvC,IAAI,IAAA+/B,iBAAgB//B,GAAM,CACtB,IAAMN,EAAO,IAAIuD,YAAW,IAAAkG,yBAAwBnJ,IAEpD,OADA1X,KAAK03C,IAAI,UAAG3V,EAAO,qBAAarqB,EAAI2M,UAAU,EAAG,IAAG,gBAAQjN,EAAK3U,OAAM,YAChEO,QAAQC,QAAQmU,EAC3B,CAIA,OAFApX,KAAK03C,IAAI,UAAG3V,EAAO,qBAAarqB,IAEzB1X,KAAK8xB,QAAQ3T,mBAAmBne,KAAKwjC,SAAW9rB,GAAK/T,MAAK,SAAC2U,GAC9D,OAAO,IAAItV,SAAQ,SAACC,EAASC,GACzB,EAAK4uB,QAAQ5S,UACT,EAAK6kB,cACLzrB,GACA,SAAClB,GACQ,EAAKmsB,YACN,EAAKmU,IAAI,UAAG3V,EAAO,oBAAYrqB,EAAG,aAAMN,EAAqBsD,WAAU,YACvEzX,EAAQ,IAAI0X,WAAWvD,IAE/B,IACA,GACA,SAACiK,GACGne,EAAO,IAAI,EAAAy0C,cAAc,UAAG5V,EAAO,6BAAqBrqB,EAAG,YAAI2J,EAAU,KAAOA,EAAQuX,OAAS,IAAMvX,EAAQwX,WAAa,IAAMxX,GACtI,GAER,GACJ,GACJ,EAOc,EAAAgnB,mBAAd,SAAiCuP,EAA8BC,GAC3DD,EAAc3O,SAAW2O,EAAc3O,UAAY,CAAC,EACpD,IAAMA,EAAY2O,EAAcE,kBAAoBF,EAAcE,mBAAqB,CAAC,EAClFhlC,EAAQm2B,EAASn2B,KAAOm2B,EAASn2B,MAAQ,CAAC,GAC9BA,EAAKilC,SAAWjlC,EAAKilC,UAAY,IAC1ClzC,KAAKgzC,EAClB,EAEe,EAAAR,oBAAf,SAAmCtV,EAAiB3rB,GAIhD,OAFAA,EAAe9Q,MAAR8Q,EAAoB,MAAyBA,GAGhD,KAAK,MACD,OAAO,EAAAsS,QAAQC,kBACnB,KAAK,MACD,OAAO,EAAAD,QAAQG,mBACnB,KAAK,MACD,OAAO,EAAAH,QAAQK,iBACnB,QAEI,OADA,EAAAhK,OAAOC,KAAK,UAAG+iB,EAAO,4BAAoB3rB,EAAI,MACvC,EAAAsS,QAAQK,iBAE3B,EAEe,EAAAquB,wBAAf,SAAuCrV,EAAiBjN,GAEpD,IAAMkjB,EAAiC1yC,MAArBwvB,EAAQkjB,UAAyB,KAA0BljB,EAAQkjB,UAC/E9e,EAAiC5zB,MAArBwvB,EAAQoE,UAAyB,KAAwCpE,EAAQoE,UAEnG,GAAkB,OAAd8e,EACA,OAAQ9e,GACJ,KAAK,KACD,OAAO,EAAAxQ,QAAQuvB,eACnB,KAAK,KACD,OAAO,EAAAvvB,QAAQwvB,cACnB,KAAK,KACD,OAAO,EAAAxvB,QAAQyvB,0BACnB,KAAK,KACD,OAAO,EAAAzvB,QAAQ0vB,yBACnB,KAAK,KACD,OAAO,EAAA1vB,QAAQ2vB,yBACnB,KAAK,KACD,OAAO,EAAA3vB,QAAQ4vB,wBACnB,QAEI,OADA,EAAAv5B,OAAOC,KAAK,UAAG+iB,EAAO,sCAA8B7I,EAAS,MACtD,EAAAxQ,QAAQ4vB,6BAOvB,OAJkB,OAAdN,GACA,EAAAj5B,OAAOC,KAAK,UAAG+iB,EAAO,sCAA8BiW,EAAS,MAGzD9e,GACJ,KAAK,KACD,OAAO,EAAAxQ,QAAQ6vB,gBACnB,KAAK,KACD,OAAO,EAAA7vB,QAAQ8vB,eACnB,KAAK,KACD,OAAO,EAAA9vB,QAAQ+vB,2BACnB,KAAK,KACD,OAAO,EAAA/vB,QAAQgwB,0BACnB,KAAK,KACD,OAAO,EAAAhwB,QAAQiwB,0BACnB,KAAK,KACD,OAAO,EAAAjwB,QAAQkwB,yBACnB,QAEI,OADA,EAAA75B,OAAOC,KAAK,UAAG+iB,EAAO,sCAA8B7I,EAAS,MACtD,EAAAxQ,QAAQ+vB,2BAG/B,EAEe,EAAA5F,0BAAf,SAAyC9Q,EAAiBlY,GACtD,IACI,OAAO,IAAAgvB,0BAAyBhvB,EACpC,CAAE,MAAOtmB,GACL,MAAM,IAAIiC,MAAM,UAAGu8B,EAAO,aAAKx+B,EAAE4U,SACrC,CACJ,EAEe,EAAA85B,eAAf,SAA8BlQ,EAAiBlY,EAAsCD,EAA6BnP,EAAgChY,GAC9I,IAAM+W,EAASoQ,EAAWpQ,OAC1BiB,EAAamP,EAAWnP,YAAcA,GAAc,GAEpD,IAAMxY,EAAcy7B,EAAWmV,0BAA0B,UAAG9Q,EAAO,kBAAkBlY,GAE/EivB,EAAsB,EAAA7oB,aAAa8hB,kBAAkBloB,GAC3D,OAAIpP,EAAaq+B,GAAwB,GAErC,EAAA/5B,OAAOC,KAAK,UAAG+iB,EAAO,4CAAoCtnB,EAAU,8DAAsDq+B,EAAmB,MACtI,IAAI72C,EAAYuX,EAAOO,MAAMU,EAAYA,EAAahY,EAASq2C,GAAsB,IAGzF,IAAI72C,EAAYuX,EAAQiB,EAAYhY,EAC/C,EAEe,EAAAovC,kBAAf,SAAiC9P,EAAiB36B,GAC9C,OAAQA,GACJ,IAAK,SACD,OAAO,EACX,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,EACX,IAAK,OAEL,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,EACX,IAAK,OACD,OAAO,GAGf,MAAM,IAAI5B,MAAM,UAAGu8B,EAAO,2BAAmB36B,EAAI,KACrD,EAEe,EAAAowC,aAAf,SAA4B9/B,GACxB,OAAO,EAAAiC,MAAM6e,SAAS9gB,KAA+B,IAAvBA,EAAInB,QAAQ,KAC9C,EAKc,EAAAg0B,aAAd,SAA2BxI,EAAiB3rB,GAKxC,OAJY9Q,MAAR8Q,IACAA,EAAO,GAGHA,GACJ,KAAK,EACD,OAAO,EAAAikB,SAAS0e,kBACpB,KAAK,EACD,OAAO,EAAA1e,SAAS2e,iBACpB,KAAK,EACD,OAAO,EAAA3e,SAAS4e,iBACpB,KAAK,EACD,OAAO,EAAA5e,SAAS6e,kBACpB,KAAK,EACD,OAAO,EAAA7e,SAASkL,iBACpB,KAAK,EACD,OAAO,EAAAlL,SAAS8e,sBACpB,KAAK,EACD,OAAO,EAAA9e,SAAS+e,oBAGxB,MAAM,IAAI5zC,MAAM,UAAGu8B,EAAO,0CAAkC3rB,EAAI,KACpE,EAEQ,YAAAsvB,uBAAR,sBACI1lC,KAAK8xB,QAAQpV,yBAAyB,qBAEtC,IAAMsoB,EAAW,IAAIxjC,MAErB,GAAIxB,KAAK+E,MAAM6G,UACX,IAAuB,UAAA5L,KAAK+E,MAAM6G,UAAX,eAAsB,CAAxC,IAAMtF,EAAQ,KACf,GAAIA,EAASO,MACT,IAAK,IAAMy+B,KAAmBh/B,EAASO,MAEnC,IADA,IAAMktC,EAAcztC,EAASO,MAAMy+B,GACT,MAAAyO,EAAYE,cAAZ,eAA2B,CAAhD,IAAM/+B,EAAW,KAElBA,EAAYnK,oBAAmB,GAE/B,IAAMrE,EAAkBqtC,EAAYrtC,gBACpCs+B,EAASngC,KAAK6B,EAAgB2yC,sBAAsBnkC,IACpD8vB,EAASngC,KAAK6B,EAAgB2yC,sBAAsBnkC,EAAa,CAAEokC,cAAc,KAC7Et5C,KAAK8xB,QAAQ1M,eACb4f,EAASngC,KAAK6B,EAAgB2yC,sBAAsBnkC,EAAa,CAAEqkC,WAAW,KAC9EvU,EAASngC,KAAK6B,EAAgB2yC,sBAAsBnkC,EAAa,CAAEqkC,WAAW,EAAMD,cAAc,KAE1G,CAGZ,CAGJ,OAAOt2C,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,EAAKmuB,QAAQlV,uBAAuB,oBACxC,GACJ,EAEQ,YAAA+oB,8BAAR,sBACI3lC,KAAK8xB,QAAQpV,yBAAyB,6BAKtC,IAHA,IAAMsoB,EAAW,IAAIxjC,MAGD,MADLxB,KAAK+jC,cAAc1yB,OACd,eAAQ,CAAvB,IACKtO,EADM,KACYy2C,qBACpBz2C,GACAiiC,EAASngC,KAAK9B,EAAUs2C,wBAEhC,CAEA,OAAOr2C,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,EAAKmuB,QAAQlV,uBAAuB,4BACxC,GACJ,EAEQ,YAAA68B,mBAAR,SAA2BjS,GACvB,IAAwB,UAAAxnC,KAAKsjC,YAAL,eAAkB,CAArC,IAAM7F,EAAS,KACZA,EAAUkJ,SACVa,EAAO/J,EAEf,CACJ,EAEQ,YAAAic,iBAAR,SAA4BpC,EAAqBqC,EAAsBC,GACnE,IAAwB,UAAA55C,KAAKsjC,YAAL,eAAkB,CAArC,IAAM7F,EAAS,KAChB,GAAIA,EAAUkJ,QAAS,CACnB,IAAMvuB,EAAK,UAAGqlB,EAAUxpB,KAAI,YAAI0lC,GAC1BE,EAAiBvC,EACvBuC,EAAeC,gCAAkCD,EAAeC,iCAAmC,CAAC,EACpG,IAAMC,EAAiCF,EAAeC,gCACtD,IAAKC,EAA+B3hC,GAAK,CACrC2hC,EAA+B3hC,IAAM,EAErC,IACI,IAAM3U,EAASm2C,EAAYnc,GAC3B,GAAIh6B,EACA,OAAOA,CAEf,C,eACWs2C,EAA+B3hC,EAC1C,CACJ,CACJ,CACJ,CAEA,OAAO,IACX,EAEQ,YAAA2sB,qBAAR,WACI/kC,KAAKy5C,oBAAmB,SAAChc,GAAc,OAAAA,EAAUuc,WAAavc,EAAUuc,WAAjC,GAC3C,EAEQ,YAAAhU,mBAAR,WACIhmC,KAAKy5C,oBAAmB,SAAChc,GAAc,OAAAA,EAAUwc,SAAWxc,EAAUwc,SAA/B,GAC3C,EAEQ,YAAA5S,0BAAR,SAAkCtF,EAAiBxjB,GAC/C,OAAOve,KAAK05C,iBAAiBn7B,EAAO,aAAa,SAACkf,GAAc,OAAAA,EAAU0H,gBAAkB1H,EAAU0H,eAAepD,EAASxjB,EAA9D,GACpE,EAEQ,YAAA2pB,yBAAR,SAAiCnG,EAAiBr4B,EAAatH,GAC3D,OAAOpC,KAAK05C,iBAAiBhwC,EAAM,YAAY,SAAC+zB,GAAc,OAAAA,EAAU8J,eAAiB9J,EAAU8J,cAAcxF,EAASr4B,EAAMtH,EAAlE,GAClE,EAEQ,YAAAwtC,2BAAR,SAAmC7N,EAAiBv5B,EAAiBpG,GACjE,OAAOpC,KAAK05C,iBAAiBlxC,EAAQ,cAAc,SAACi1B,GAAc,OAAAA,EAAU6K,iBAAmB7K,EAAU6K,gBAAgBvG,EAASv5B,EAAQpG,EAAxE,GACtE,EAEQ,YAAAqoC,+BAAR,SAAuC1I,EAAiBnS,EAA2B1a,GAC/E,OAAOlV,KAAK05C,iBAAiB9pB,EAAW,kBAAkB,SAAC6N,GAAc,OAAAA,EAAU0M,sBAAwB1M,EAAU0M,qBAAqBpI,EAASnS,EAAW1a,EAArF,GAC7E,EAEQ,YAAAy0B,kCAAR,SACI5H,EACA9tB,EACAvK,EACA+I,EACAmd,EACAxtB,GAEA,OAAOpC,KAAK05C,iBACR9pB,EACA,qBACA,SAAC6N,GAAc,OAAAA,EAAUiM,yBAA2BjM,EAAUiM,wBAAwB3H,EAAS9tB,EAAMvK,EAAM+I,EAAMmd,EAAWxtB,EAA7G,GAEvB,EAEQ,YAAA0xC,6BAAR,SACI/R,EACAz7B,EACA4O,EACAowB,EACAljC,GAEA,OAAOpC,KAAK05C,iBACRpzC,EACA,gBACA,SAACm3B,GAAc,OAAAA,EAAU+H,oBAAsB/H,EAAU+H,mBAAmBzD,EAASz7B,EAAU4O,EAAaowB,EAAiBljC,EAA9G,GAEvB,EAEQ,YAAAqyC,0BAAR,SAAkC1S,EAAiBz7B,EAAqBg/B,GACpE,OAAOtlC,KAAK05C,iBAAiBpzC,EAAU,kBAAkB,SAACm3B,GAAc,OAAAA,EAAUuW,gBAAkBvW,EAAUuW,eAAejS,EAASz7B,EAAUg/B,EAAxE,GAC5E,EAEQ,YAAAoP,uCAAR,SAA+C3S,EAAiBz7B,EAAqBI,GACjF,OAAO1G,KAAK05C,iBACRpzC,EACA,0BACA,SAACm3B,GAAc,OAAAA,EAAUyW,6BAA+BzW,EAAUyW,4BAA4BnS,EAASz7B,EAAUI,EAAlG,GAEvB,EAEQ,YAAAgvC,gCAAR,SAAwC3T,EAAiB0T,EAA2BrzC,GAChF,OAAOpC,KAAK05C,iBAAiBjE,EAAa,mBAAmB,SAAChY,GAAc,OAAAA,EAAU8V,sBAAwB9V,EAAU8V,qBAAqBxR,EAAS0T,EAAarzC,EAAvF,GAChF,EAEQ,YAAA2zC,4BAAR,SAAoChU,EAAiBz6B,EAAmBlF,GACpE,OAAOpC,KAAK05C,iBAAiBpyC,EAAS,eAAe,SAACm2B,GAAc,OAAAA,EAAUoY,mBAAqBpY,EAAUoY,kBAAkB9T,EAASz6B,EAASlF,EAA7E,GACxE,EAEQ,YAAA6tC,8BAAR,SAAsClO,EAAiBxvB,GACnD,OAAOvS,KAAK05C,iBAAiBnnC,EAAW,iBAAiB,SAACkrB,GAAc,OAAAA,EAAUqS,oBAAsBrS,EAAUqS,mBAAmB/N,EAASxvB,EAAtE,GAC5E,EAEQ,YAAAk+B,qCAAR,SACI1O,EACAyO,EACAj+B,EACAib,EACAmR,GAEA,OAAO3+B,KAAK05C,iBACRnnC,EACA,wBACA,SAACkrB,GAAc,OAAAA,EAAU2S,4BAA8B3S,EAAU2S,2BAA2BrO,EAASyO,EAAkBj+B,EAAWib,EAASmR,EAA5H,GAEvB,EAEQ,YAAAoP,yBAAR,SAAiChM,EAAiBr4B,EAAa4nB,GAC3D,OAAOtxB,KAAK05C,iBAAiBpoB,EAAM,YAAY,SAACmM,GAAc,OAAAA,EAAU0L,gBAAkB1L,EAAU0L,eAAepH,EAASr4B,EAAM4nB,EAApE,GAClE,EAEQ,YAAAimB,wBAAR,SAAgCxV,EAAiBuV,EAAqB5/B,GAClE,OAAO1X,KAAK05C,iBAAiBpC,EAAU,WAAW,SAAC7Z,GAAc,OAAAA,EAAUyc,eAAiBzc,EAAUyc,cAAcnY,EAASuV,EAAU5/B,EAAtE,GACrE,EAEQ,YAAAg6B,+BAAR,SAAuC3P,EAAiBnY,GACpD,OAAO5pB,KAAK05C,iBAAiB9vB,EAAY,kBAAkB,SAAC6T,GAAc,OAAAA,EAAUgU,qBAAuBhU,EAAUgU,oBAAoB1P,EAASnY,EAAxE,GAC9E,EAEQ,YAAA2nB,2BAAR,SAAmCxP,EAAiBvoB,EAAiBiB,EAAoBC,GACrF,OAAO1a,KAAK05C,iBAAiBlgC,EAAQ,cAAc,SAACikB,GAAc,OAAAA,EAAUwB,iBAAmBxB,EAAUwB,gBAAgB8C,EAASvoB,EAAQiB,EAAYC,EAApF,GACtE,EAUc,EAAAy/B,mBAAd,SACIpY,EACAuV,EACAzX,EACA+Z,GAEA,IAAKtC,EAASpsC,WACV,OAAO,KAGX,IAEMuyB,EAFa6Z,EAASpsC,WAEC20B,GAC7B,OAAKpC,EAIEmc,EAAY,UAAG7X,EAAO,uBAAelC,GAAiBpC,GAHlD,IAIf,EAUc,EAAA2c,eAAd,SACIrY,EACAuV,EACAzX,EACA+Z,GAEA,IAAKtC,EAAShL,OACV,OAAO,KAGX,IAEM+N,EAFS/C,EAAShL,OAEHzM,GACrB,OAAKwa,EAIET,EAAY,UAAG7X,EAAO,mBAAWlC,GAAiBwa,GAH9C,IAIf,EAOO,YAAAzT,gBAAP,SAAuB3yB,GACnB,QAASjU,KAAK+E,MAAM0yB,iBAA+D,IAA7Cz3B,KAAK+E,MAAM0yB,eAAelhB,QAAQtC,EAC5E,EAMO,YAAAqzB,QAAP,SAAenvB,GACXnY,KAAK8xB,QAAQ7N,SAAS9L,EAC1B,EAKO,YAAAuvB,SAAP,WACI1nC,KAAK8xB,QAAQ5N,WACjB,EAMO,YAAAwzB,IAAP,SAAWv/B,GACPnY,KAAK8xB,QAAQvV,KAAKpE,EACtB,EAMO,YAAAmiC,wBAAP,SAA+B/1B,GAC3BvkB,KAAK8xB,QAAQpV,yBAAyB6H,EAC1C,EAMO,YAAAg2B,sBAAP,SAA6Bh2B,GACzBvkB,KAAK8xB,QAAQlV,uBAAuB2H,EACxC,EAvvFuB,EAAAyxB,eAA2B,CAAE7tC,OAAQ,GAwvFhE,C,CA3xFA,GA6xFA4Y,EAAe0B,mBAAqB,SAAC9X,GAAW,WAAI,GAAWA,EAAf,E,cC58F1C6vC,GAAO,yBA0Bb,cAiBI,WAAYC,GAbI,KAAAxmC,KAAOumC,GAcnBx6C,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB4T,GAChD,CA+GJ,OA5GW,YAAAx8B,QAAP,WACKhe,KAAKic,QAAkB,YACjBjc,KAAKuR,OAChB,EAGO,YAAAyoC,UAAP,WACI,IAAM9uC,EAAalL,KAAKic,QAAQnJ,KAAK5H,WACrC,GAAIA,GAAcA,EAAWlL,KAAKiU,MAAO,CACrC,IAAMwpB,EAAYvyB,EAAWlL,KAAKiU,MAClCjU,KAAKuR,QAAUksB,EAAUpsB,MAC7B,CACJ,EAKO,YAAA8zB,eAAP,SAAsBpD,EAAiBxjB,GAAvC,WACI,OAAO,GAAW47B,mBAAkEpY,EAASxjB,EAAOve,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC9H,EAAKxhB,QAAQmnB,4BAA6B,EAE1C,IAAM4B,EAAW,IAAIxjC,MAErBwjC,EAASngC,KAAK,EAAKoX,QAAQkpB,eAAepD,EAASxjB,IAEnD,EAAKtC,QAAQqrB,QAAQ,UAAGoT,IAExB,IAAMjvC,EAAQ25B,GAAUtD,IAAI,UAAG4Y,EAAgB,UAAU,EAAKnpC,QAASksB,EAAUhyB,OASjF,OARAu5B,EAASngC,KACL,EAAK81C,gBAAgB,sBAAe,EAAK1mC,KAAI,mBAAWwpB,EAAUhyB,OAASA,GAAO9H,MAAK,SAAC2D,GACpF,EAAK2U,QAAQ2+B,aAAaC,mBAAqBvzC,CACnD,KAGJ,EAAK2U,QAAQyrB,WAEN1kC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAg3C,gBAAR,SAAwB5Y,EAAiBt2B,GAAzC,WACI,IAAKA,EAAMiW,QAAS,CAChB,IAAMsjB,EAAW,IAAIxjC,MAErBxB,KAAKic,QAAQqrB,QAAQ,UAAGvF,IAGxB,IADA,IAAM,EAAY,IAAIvgC,MAA8BiK,EAAMqvC,eAAer4C,Q,WAChEs4C,GACL,IAAMC,EAAQvvC,EAAMqvC,eAAeC,GACnC,EAAUA,GAAU,IAAIv5C,MAAuBw5C,EAAMv4C,QACrD,I,eAASw4C,GACL,IAAMC,EAAuB,UAAGnZ,EAAO,2BAAmBgZ,EAAM,YAAIE,GACpE,EAAKh/B,QAAQqrB,QAAQ,UAAG4T,IAExB,IAAM/yC,EAAQ6yC,EAAMC,GACdhF,EAAQ7Q,GAAUtD,IAAIoZ,EAAsB,EAAKj/B,QAAQnJ,KAAKukB,OAAQlvB,GAC5E68B,EAASngC,KACL,EAAKoX,QAAQ86B,eAAe,kBAAW5uC,GAAS8tC,GAAOtyC,MAAK,SAACyT,GACzD,EAAU2jC,GAAQE,GAAQ7jC,CAC9B,KAGJ,EAAK6E,QAAQyrB,U,EAZRuT,EAAO,EAAGA,EAAOD,EAAMv4C,OAAQw4C,I,EAA/BA,E,SAHJF,EAAS,EAAGA,EAAStvC,EAAMqvC,eAAer4C,OAAQs4C,I,EAAlDA,GAmBT/6C,KAAKic,QAAQyrB,WAEbj8B,EAAMiW,QAAU1e,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WACvC,IAAMo1B,EAAiB,IAAI,EAAAoiB,eAAe,EAAKl/B,QAAQ2+B,aAAc,KAAMnvC,EAAM2vC,mBAQjF,GAPAriB,EAAe9kB,KAAOxI,EAAMwI,MAAQ,cACpCxI,EAAMsG,gBAAkBgnB,EAEDzzB,MAAnBmG,EAAMD,YACNutB,EAAe7sB,MAAQT,EAAMD,WAG7BC,EAAM3D,SAAU,CAChB,IAAIA,EAAW,EAAAkK,WAAW6B,UAAUpI,EAAM3D,UAGrC,EAAKmU,QAAQ2+B,aAAaxoC,uBAC3BtK,EAAW,EAAAkK,WAAWK,QAAQvK,IAGlC,EAAAwC,OAAOgI,oBAAoBxK,EAAUixB,EAAe7mB,6BACxD,CAEA,IAAKzG,EAAM4vC,uBACP,MAAM,IAAI71C,MAAM,UAAGu8B,EAAO,0CAG9B,IAAMuZ,EAAqB,EAAAC,mBAAmB1nC,UAAUpI,EAAM4vC,wBAC9DC,EAAmBxnC,aAAarI,EAAMD,WAEtC8vC,EAAmBE,wCACnB,IAAMC,EAAsB,EAAAC,oBAAoBC,cAAcL,GAGxDM,GAAsB,EAAUn5C,OAAS,GAAK+9B,KAAKqb,KAAKpwC,EAAM2vC,mBACpE,OAAOriB,EAAe+iB,gBAAgB,EAAWL,EAAqBG,EAC1E,GACJ,CAEA,OAAOnwC,EAAMiW,QAAQ/d,MAAK,WACtB,OAAO8H,EAAMsG,eACjB,GACJ,EACJ,EAnIA,GAqIA6vB,GAAwB4Y,IACxB9Y,GAAsB8Y,IAAM,GAAM,SAACC,GAAW,WAAI3oC,GAAuB2oC,EAA3B,IChK9C,IAAM,GAAO,0BAkBb,cAgBI,WAAYA,GAZI,KAAAxmC,KAAO,GAanBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAwEJ,OArEW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAsrB,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAO,GAAW+3C,mBAAyDpY,EAASr4B,EAAM1J,KAAKiU,MAAM,SAACymC,EAAkBjd,GACpH,EAAKxhB,QAAQknB,wBAEb,IAAM0G,EAAU,EAAK5tB,QAAQsrB,cAAc,iBAAU79B,EAAKvB,OAASuB,EAAMtH,GAIzE,GAFA,EAAK6Z,QAAQknB,yBAERz5B,EAAKQ,wBACN,OAAO2/B,EAGX,IAAM7E,EAAW,IAAIxjC,MACjBu6C,EAAgB,EAEdlR,EAAgB,SAAC1P,GACnB,GAAuC71B,MAAnCm4B,EAAUrS,WAAW+P,GAAzB,CAKA,IAAM3nB,EAAW4xB,GAAUtD,IAAI,UAAG4Y,EAAgB,uBAAevf,GAAa,EAAKlf,QAAQnJ,KAAK+c,UAAW4N,EAAUrS,WAAW+P,IAGhI,GAFA6J,EAASngC,KAAK,EAAKoX,QAAQgxB,wBAAwB,qBAAcz5B,EAASoW,YAAcpW,IAElE,IAAlBuoC,EACAA,EAAgBvoC,EAASkX,WACtB,GAAIqxB,IAAkBvoC,EAASkX,MAClC,MAAM,IAAIllB,MAAM,UAAGk1C,EAAgB,sEARvC,MAFI1V,EAASngC,KAAK7B,QAAQC,QAAQ,MAYtC,EAMA,OAJA4nC,EAAc,eACdA,EAAc,YACdA,EAAc,SAEPhB,EAAQlmC,MAAK,SAACykC,GACjB,OAAOplC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,SAAC,G,IAACq4C,EAAiB,KAAEC,EAAc,KAAEC,EAAW,KACxEC,EAAW,IAAI5xB,aAA6B,GAAhBwxB,GAElC,EAAAtZ,WAAW7uB,QAAQ,GAAG8uB,eAAe,EAAG,EAAG,GAC3C,EAAAD,WAAWzwB,WAAW,GAAG0wB,eAAe,EAAG,EAAG,EAAG,GACjD,EAAAD,WAAW7uB,QAAQ,GAAG8uB,eAAe,EAAG,EAAG,GAE3C,IAAK,IAAIngC,EAAI,EAAGA,EAAIw5C,IAAiBx5C,EACjCy5C,GAAqB,EAAApoC,QAAQy7B,eAAe2M,EAAuB,EAAJz5C,EAAO,EAAAkgC,WAAW7uB,QAAQ,IACzFqoC,GAAkB,EAAAjqC,WAAWq9B,eAAe4M,EAAoB,EAAJ15C,EAAO,EAAAkgC,WAAWzwB,WAAW,IACzFkqC,GAAe,EAAAtoC,QAAQy7B,eAAe6M,EAAiB,EAAJ35C,EAAO,EAAAkgC,WAAW7uB,QAAQ,IAE7E,EAAAtJ,OAAO8xC,aAAa,EAAA3Z,WAAW7uB,QAAQ,GAAI,EAAA6uB,WAAWzwB,WAAW,GAAI,EAAAywB,WAAW7uB,QAAQ,GAAI,EAAA6uB,WAAWn4B,OAAO,IAE9G,EAAAm4B,WAAWn4B,OAAO,GAAG+xC,YAAYF,EAAc,GAAJ55C,GAG/C,IAA0B,UAAAmH,EAAKQ,wBAAL,eAAJ,KACIoyC,sBAAsB,SAAUH,EAAU,IAAI,GAGxE,OAAO/T,CACX,GACJ,GACJ,GACJ,EACJ,EA3FA,GA6FAxG,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI8B,GAAwB9B,EAA5B,ICpH9C,IAAM,GAAO,0BAwBb,cAgBI,WAAYA,GAZI,KAAAxmC,KAAO,GAanBjU,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,IACtC5mC,KAAKic,QAAUw+B,CACnB,CAyBJ,OAtBW,YAAAz8B,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAw1B,oBAAP,SAA2B1P,EAAiBnY,GAA5C,WACI,OAAO,GAAWuwB,mBAA4DpY,EAASnY,EAAY5pB,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC7H,IAAM+e,EAAoB5yB,EAC1B,GAAI4yB,EAAkBC,aAClB,OAAOD,EAAkBC,aAG7B,IAAMjjC,EAAS4rB,GAAUtD,IAAI,UAAGC,EAAO,WAAW,EAAK9lB,QAAQnJ,KAAKskB,QAASqG,EAAUjkB,QAKvF,OAJAgjC,EAAkBC,aAAe,EAAKxgC,QAAQgjB,gBAAgB,mBAAYzlB,EAAOrR,OAASqR,EAAQikB,EAAUhjB,YAAc,EAAGgjB,EAAU/iB,YAAY/W,MAAK,SAAC6V,GACrJ,OAAO,EAAAkjC,mBAAmBC,QAAQC,sBAAsBpjC,EAAsBikB,EAAU/S,MAAO+S,EAAUqU,WAAYrU,EAAUrnB,KAAMqnB,EAAUof,OACnJ,IAEOL,EAAkBC,YAC7B,GACJ,EACJ,EA5CA,GA8CA7a,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIqC,GAAwBrC,EAA5B,ICvE9C,IAAM,GAAO,mBAiBb,cAYI,WAAYA,GAVI,KAAAxmC,KAAO,GAWnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CA0BJ,OAvBW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAA45B,kBAAP,SAAyB9T,EAAiBz6B,EAAmBlF,GAA7D,WACI,OAAO,GAAW+3C,mBAAiDpY,EAASz6B,EAAStH,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC/G,IAAM3I,EAA6BxvB,MAAnBgC,EAAQwtB,QAAuB,GAAWkhB,eAAiB5Q,GAAUtD,IAAI,UAAGC,EAAO,YAAY,EAAK9lB,QAAQnJ,KAAKwY,SAAUhkB,EAAQwtB,SAC7ImhB,EAAQ7Q,GAAUtD,IAAI,UAAG4Y,EAAgB,WAAW,EAAKz+B,QAAQnJ,KAAKukB,OAAQoG,EAAU9pB,QAC9F,OAAO,EAAKsI,QAAQi6B,oBAChBnU,EACAjN,EACAmhB,GACA,SAACld,GACG32B,EAAO22B,EACX,QACAzzB,GACCgC,EAAQsuC,aAAanC,aAE9B,GACJ,EACJ,EAzCA,GA2CA7R,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIsC,GAAiBtC,EAArB,IC7D9C,IAAM,GAAO,mBAkBb,cAYI,WAAYA,GAVI,KAAAxmC,KAAO,GAWnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CA0BJ,OAvBW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAA45B,kBAAP,SAAyB9T,EAAiBz6B,EAAmBlF,GAA7D,WACI,OAAO,GAAW+3C,mBAAiDpY,EAASz6B,EAAStH,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC/G,IAAM3I,EAA6BxvB,MAAnBgC,EAAQwtB,QAAuB,GAAWkhB,eAAiB5Q,GAAUtD,IAAI,UAAGC,EAAO,YAAY,EAAK9lB,QAAQnJ,KAAKwY,SAAUhkB,EAAQwtB,SAC7ImhB,EAAQ7Q,GAAUtD,IAAI,UAAG4Y,EAAgB,WAAW,EAAKz+B,QAAQnJ,KAAKukB,OAAQoG,EAAU9pB,QAC9F,OAAO,EAAKsI,QAAQi6B,oBAChBnU,EACAjN,EACAmhB,GACA,SAACld,GACG32B,EAAO22B,EACX,QACAzzB,GACCgC,EAAQsuC,aAAanC,aAE9B,GACJ,EACJ,EAzCA,GA2CA7R,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIuC,GAAiBvC,EAArB,ICvD9C,IAAM,GAAO,iBAiBb,cAkBI,WAAYA,GAdI,KAAAxmC,KAAO,GAenBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAmFJ,OAhFW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,YACjBjc,KAAKuR,OAChB,EAGO,YAAAyoC,UAAP,WACI,IAAM9uC,EAAalL,KAAKic,QAAQnJ,KAAK5H,WACrC,GAAIA,GAAcA,EAAWlL,KAAKiU,MAAO,CACrC,IAAMwpB,EAAYvyB,EAAWlL,KAAKiU,MAClCjU,KAAKuR,QAAUksB,EAAUpsB,OACzB+zB,GAAUlD,OAAOliC,KAAKuR,QAC1B,CACJ,EAKO,YAAAg2B,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAO,GAAW+3C,mBAAgEpY,EAASr4B,EAAM1J,KAAKiU,MAAM,SAAOymC,EAAkBjd,GAAS,2C,6EAMpH,OALtBz9B,KAAKic,QAAQmnB,4BAA6B,EAKpB,GAAMpjC,KAAKic,QAAQsrB,cAAcxF,EAASr4B,GAAM,SAACwL,GAEnE,IAAMjB,GADNxI,EAAQ25B,GAAUtD,IAAI4Y,EAAkB,EAAKnpC,QAASksB,EAAUhyB,QAC7CwI,MAAQiB,EAAYjB,KAEvC,EAAKgI,QAAQ2+B,aAAa/rB,yBAA2B,EAAK5S,QAAQgnB,iBAElEga,EAAmB,IAAI,EAAA1xC,UAAU0I,EAAM,EAAAL,QAAQ8e,OAAQ,EAAA9e,QAAQspC,WAAY,EAAG,EAAG,EAAKjhC,QAAQ2+B,eAC7EptC,MAAQgzB,KAAKC,GAAK,EACnCwc,EAAiBrrC,WAAa,EAE9BqrC,EAAiBjuB,iBAAmB,EAAK/S,QAAQgnB,gBACjD,EAAKhnB,QAAQ2+B,aAAa/rB,wBAAyB,EACnDpjB,EAAM6F,cAAgB2rC,EAEtBA,EAAiBE,YAAc,EAAAC,MAAMC,aACrCJ,EAAiBtxC,QAAU8xB,EAAU/xB,MAAQ,EAAA2nB,OAAOxf,UAAU4pB,EAAU/xB,OAAS,EAAA2nB,OAAOigB,QACxF2J,EAAiBzxC,UAAYiyB,EAAUryB,YAAc,EACrD6xC,EAAiBxrC,MAAQgc,OAAO8I,UAChC0mB,EAAiBtyC,OAASuK,EAE1B,EAAK+G,QAAQinB,eAAer+B,KAAKo4C,GAEjC,GAAW5U,mBAAmB4U,EAAkBvC,GAEhDt4C,EAAO8S,EACX,K,cAzBM2zB,EAAgB,SA6BlBp9B,EAAOiM,IACM,GAAM1X,KAAKic,QAAQu1B,aAAazP,EAASt2B,EAAQA,EAAOiM,MADrE,M,cACA4lC,EAAa,S,aAGA,OADP1zB,EAAawb,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAKic,QAAQnJ,KAAK2X,YAAahf,EAAOme,YACnF,GAAM5pB,KAAKic,QAAQw1B,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,I,OAAxF0zB,EAAa,S,iBAmBjB,OAjBAL,EAAkBM,kBAAoB,IAAI,EAAA70B,QACtCzU,KAAO,cACPjU,KAAKic,QAAQ2+B,cACb,GACA,OACAt1C,EACA,KACA,KACAg4C,GACA,OACAh4C,OACAA,OACAA,OACAA,EACA,QAGG,CAAP,EAAOujC,G,SAEf,EACJ,EAxGA,GA0GAjH,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAItvC,GAAesvC,EAAnB,IC9H9C,IAAM,GAAO,6BAqBb,cA0BI,WAAYA,GAtBI,KAAAxmC,KAAO,GAehB,KAAAupC,+BAAgC,EAQnCx9C,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU,EAAA8W,aAAaC,kBAAoB19C,KAAKic,QAAQ2qB,gBAAgB,GACjF,CAyEJ,OAtEW,YAAA5oB,QAAP,kBACWhe,KAAK29C,aACX39C,KAAKic,QAAkB,IAC5B,EAKO,YAAAkuB,qBAAP,SAA4BpI,EAAiBnS,EAA2B1a,GAAxE,WACI,OAAO,GAAWilC,mBAAuDpY,EAASnS,EAAW5vB,KAAKiU,MAAM,SAACymC,EAAkBjd,GACvH,GAAsBn4B,MAAlBsqB,EAAUxZ,MACa,IAAnBwZ,EAAUxZ,MAA2D,IAAnBwZ,EAAUxZ,KAC5D,MAAM,IAAI5Q,MAAM,UAAGu8B,EAAO,8BAAsBnS,EAAUxZ,OAIlE,IAAMgV,EAAyC,CAAC,EAC1CwX,EAA0C,CAAC,EAC3CiI,EAAgB,SAAC52B,EAAc62B,GACjC,IAAM8S,EAAWngB,EAAUrS,WAAWnX,GACtC,GAAgB3O,MAAZs4C,IAIJ1oC,EAAY61B,WAAa71B,EAAY61B,YAAc,IACL,IAA1C71B,EAAY61B,WAAWx0B,QAAQu0B,IAC/B51B,EAAY61B,WAAWlmC,KAAKimC,GAGhC1f,EAAW0f,GAAQ8S,EAEf,EAAKJ,+BAA+B,CACpC,IAAMhqC,EAAW4xB,GAAUnD,OAAO,EAAKhmB,QAAQnJ,KAAK+c,UAAWD,EAAUxE,WAAWnX,IAChFT,IACAovB,EAAWkI,GAAQt3B,EAASovB,aAAc,EAElD,CACJ,EAEAiI,EAAc,WAAY,EAAA5a,aAAakb,cACvCN,EAAc,SAAU,EAAA5a,aAAawb,YACrCZ,EAAc,UAAW,EAAA5a,aAAayb,aACtCb,EAAc,aAAc,EAAA5a,aAAaC,QACzC2a,EAAc,aAAc,EAAA5a,aAAa0b,SACzCd,EAAc,aAAc,EAAA5a,aAAa2b,SACzCf,EAAc,aAAc,EAAA5a,aAAa4b,SACzChB,EAAc,aAAc,EAAA5a,aAAa6b,SACzCjB,EAAc,aAAc,EAAA5a,aAAa8b,SACzClB,EAAc,WAAY,EAAA5a,aAAa+b,qBACvCnB,EAAc,YAAa,EAAA5a,aAAagc,qBACxCpB,EAAc,UAAW,EAAA5a,aAAakc,WAEtC,IAAMviB,EAAawb,GAAUtD,IAAI4Y,EAAkB,EAAKz+B,QAAQnJ,KAAK2X,YAAagT,EAAU7T,YAe5F,OAdKA,EAAWi0B,wBACZj0B,EAAWi0B,sBAAwB,EAAK5hC,QAAQw1B,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,GAAYjmB,MAAK,SAACyT,GACtH,IAAMumC,EAAe,EAAKA,cAAgB,EAAAF,aAAad,QACjDmB,EAAmB1Y,GAAUnD,OAAO,EAAKhmB,QAAQnJ,KAAK+c,UAAWD,EAAUxE,WAAqB,UAChGggB,EACD,EAAKnvB,QAAQtR,OAAO6a,0BAA6BtQ,EAAYsc,WAAYssB,EAA4E,KAAzD3b,GAAqC2b,GACtI,OAAOH,EACFI,kCAAkC7oC,EAAYjB,KAAM,EAAKgI,QAAQ2+B,aAAcxjC,EAAMgU,EAAYwX,EAAYwI,GAC7GjF,OAAM,SAAC9sB,GACJ,MAAM,IAAI7T,MAAM,UAAGu8B,EAAO,aAAK1oB,EAAMlB,SACzC,GACR,KAGGyR,EAAWi0B,qBACtB,GACJ,EACJ,EAtGA,GAwGAjc,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIuD,GAA2BvD,EAA/B,IC1H9C,IAAM,GAAO,sBAiBb,cAkBI,WAAYA,GAdI,KAAAxmC,KAAO,GAenBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA2EJ,OAxEW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,YACjBjc,KAAKuR,OAChB,EAGO,YAAAyoC,UAAP,WACI,IAAM9uC,EAAalL,KAAKic,QAAQnJ,KAAK5H,WACrC,GAAIA,GAAcA,EAAWlL,KAAKiU,MAAO,CACrC,IAAMwpB,EAAYvyB,EAAWlL,KAAKiU,MAClCjU,KAAKuR,QAAUksB,EAAUpsB,OACzB+zB,GAAUlD,OAAOliC,KAAKuR,QAC1B,CACJ,EAKO,YAAAg2B,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAO,GAAW+3C,mBAAqEpY,EAASr4B,EAAM1J,KAAKiU,MAAM,SAACymC,EAAkBjd,GAGhI,OAFA,EAAKxhB,QAAQmnB,4BAA6B,EAEnC,EAAKnnB,QAAQsrB,cAAcxF,EAASr4B,GAAM,SAACwL,GAC9C,IAAI+oC,EAEExyC,EAAQ25B,GAAUtD,IAAI4Y,EAAkB,EAAKnpC,QAASksB,EAAUhyB,OAChEwI,EAAOxI,EAAMwI,MAAQiB,EAAYjB,KAIvC,OAFA,EAAKgI,QAAQ2+B,aAAa/rB,yBAA2B,EAAK5S,QAAQgnB,gBAE1Dx3B,EAAMrE,MACV,IAAK,cACD,IAAM82C,EAA0B,IAAI,EAAA1qB,iBAAiBvf,EAAM,EAAAL,QAAQspC,WAAY,EAAKjhC,QAAQ2+B,cAC5FsD,EAAwBt0C,SAASu0C,OAAO,GACxCF,EAAeC,EACf,MAEJ,IAAK,QACDD,EAAe,IAAI,EAAAtqB,WAAW1f,EAAM,EAAAL,QAAQ8e,OAAQ,EAAKzW,QAAQ2+B,cACjE,MAEJ,IAAK,OACD,IAAMqC,EAAmB,IAAI,EAAA1xC,UAAU0I,EAAM,EAAAL,QAAQ8e,OAAQ,EAAA9e,QAAQspC,WAAY,EAAG,EAAG,EAAKjhC,QAAQ2+B,cACpGqC,EAAiBzvC,MAAqE,GAA3D/B,EAAMiG,MAAQjG,EAAMiG,KAAKG,gBAAmB2uB,KAAKC,GAAK,GACjFwc,EAAiBrrC,WAAgE,GAAjDnG,EAAMiG,MAAQjG,EAAMiG,KAAKC,gBAAmB,GAC5EssC,EAAehB,EACf,MAEJ,QAEI,MADA,EAAKhhC,QAAQ2+B,aAAa/rB,wBAAyB,EAC7C,IAAIrpB,MAAM,UAAGk1C,EAAgB,iCAAyBjvC,EAAMrE,KAAI,MAI9E62C,EAAajvB,iBAAmB,EAAK/S,QAAQgnB,gBAC7C,EAAKhnB,QAAQ2+B,aAAa/rB,wBAAyB,EACnDpjB,EAAM6F,cAAgB2sC,EAEtBA,EAAad,YAAc,EAAAC,MAAMC,aACjCY,EAAatyC,QAAUF,EAAMC,MAAQ,EAAA2nB,OAAOxf,UAAUpI,EAAMC,OAAS,EAAA2nB,OAAOigB,QAC5E2K,EAAazyC,UAA+BlG,MAAnBmG,EAAMD,UAAyB,EAAIC,EAAMD,UAClEyyC,EAAaxsC,MAAuBnM,MAAfmG,EAAMgG,MAAqBgc,OAAO8I,UAAY9qB,EAAMgG,MACzEwsC,EAAatzC,OAASuK,EAEtB,EAAK+G,QAAQinB,eAAer+B,KAAKo5C,GAEjC,GAAW5V,mBAAmB4V,EAAcvD,GAE5Ct4C,EAAO8S,EACX,GACJ,GACJ,EACJ,EAhGA,GAkGA0sB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI2D,GAAW3D,EAAf,IC1H9C,IAAM,GAAO,sCAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA+DJ,OA5DW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAuDpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACtH,IAAMuH,EAAW,IAAIxjC,MAIrB,OAHAwjC,EAASngC,KAAK,EAAKoX,QAAQ04B,gCAAgC5S,EAASz7B,EAAUI,IAC9Es+B,EAASngC,KAAK,EAAKw5C,uCAAuC3D,EAAkBjd,EAAW/2B,IACvF,EAAKuV,QAAQ24B,4BAA4B7S,EAASz7B,EAAUI,GACrD1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA06C,uCAAR,SAA+Ctc,EAAiB6O,EAAgDlqC,GAC5G,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAoCrB,OAlCAkF,EAAgBsG,SAAW,KAC3BtG,EAAgBwG,UAAY,KAExB0jC,EAAW0N,eACX53C,EAAgBiG,YAAc,EAAA0mB,OAAOxf,UAAU+8B,EAAW0N,eAC1D53C,EAAgBkG,MAAQgkC,EAAW0N,cAAc,IAEjD53C,EAAgBiG,YAAc,EAAA0mB,OAAOigB,QAGzC5sC,EAAgB63C,kBAAoB3N,EAAWhhC,eAAiB,EAAAyjB,OAAOxf,UAAU+8B,EAAWhhC,gBAAkB,EAAAyjB,OAAOigB,QACrH5sC,EAAgB83C,aAA8Cl5C,MAA/BsrC,EAAW6N,iBAAgC,EAAI7N,EAAW6N,iBAErF7N,EAAW8N,gBACX1Z,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,mBAAmB6O,EAAW8N,gBAAgB,SAACp3C,GACvFA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,cACtCvN,EAAgB8sC,cAAgBlsC,CACpC,KAIJspC,EAAW+N,4BACX3Z,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,8BAA8B6O,EAAW+N,2BAA2B,SAACr3C,GAC7GA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,0BACtCvN,EAAgBk4C,oBAAsBt3C,EACtCZ,EAAgBk4C,oBAAoBtJ,UAAW,CACnD,KAGJ5uC,EAAgBm4C,yCAA0C,GAGvD77C,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAvFA,GAyFAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIqE,GAAoCrE,EAAxC,IC5G9C,IAAM,GAAO,sBAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAoDJ,OAjDW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAmBpY,EAASz7B,EAAUtG,KAAKiU,MAAM,WAC/D,OAAO,EAAK8qC,0BAA0Bhd,EAASz7B,EAAUI,EAC7D,GACJ,EAEQ,YAAAq4C,0BAAR,SAAkChd,EAAiBz7B,EAAqBI,GACpE,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MACrBkF,EAAgBs4C,OAAQ,EAExB,IAAMpO,EAAatqC,EAASiG,qBA0B5B,OAzBIqkC,IACIA,EAAWpkC,iBACX9F,EAAgBiG,YAAc,EAAA0mB,OAAOxf,UAAU+8B,EAAWpkC,iBAC1D9F,EAAgBkG,MAAQgkC,EAAWpkC,gBAAgB,IAEnD9F,EAAgBiG,YAAc,EAAA0mB,OAAOigB,QAGrC1C,EAAW9jC,kBACXk4B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,qBAAqB6O,EAAW9jC,kBAAkB,SAACxF,GAC3FA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,iBACtCvN,EAAgB8sC,cAAgBlsC,CACpC,MAKRhB,EAASs6B,cACTl6B,EAAgB81B,iBAAkB,EAClC91B,EAAgBmuC,kBAAmB,GAGvC70C,KAAKic,QAAQ24B,4BAA4B7S,EAASz7B,EAAUI,GAErD1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EA5EA,GA8EAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIwE,GAAoBxE,EAAxB,IChG9C,IAAM,GAAO,0BAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA+EJ,OA5EW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA2CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC1G,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKq6C,8BAA8BxE,EAAkBjd,EAAW/2B,IACvE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAu7C,8BAAR,SAAsCnd,EAAiB6O,EAAoClqC,GACvF,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAqDrB,OAnDAkF,EAAgBkH,UAAUuxC,WAAY,EACtCz4C,EAAgBkH,UAAUwxC,6BAA8B,EACxD14C,EAAgBkH,UAAUyxC,0BAA2B,EAEnB/5C,MAA9BsrC,EAAWjjC,gBACXjH,EAAgBkH,UAAUpC,UAAYolC,EAAWjjC,gBAEjDjH,EAAgBkH,UAAUpC,UAAY,EAGtColC,EAAW9iC,kBACXk3B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,qBAAqB6O,EAAW9iC,kBAAkB,SAACxG,GAC3FA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,gBACtCvN,EAAgBkH,UAAUtG,QAAUA,CACxC,KAImChC,MAAvCsrC,EAAW/iC,yBACXnH,EAAgBkH,UAAUV,UAAY0jC,EAAW/iC,yBAEjDnH,EAAgBkH,UAAUV,UAAY,EAGtC0jC,EAAW3iC,4BACV2iC,EAAW3iC,0BAA2CwlC,cAAe,EACtEzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,8BAA8B6O,EAAW3iC,2BAA2B,SAAC3G,GAC7GA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,0BACtCvN,EAAgBkH,UAAU0xC,iBAAmBh4C,CACjD,MAIJspC,EAAW7iC,yBACV6iC,EAAW7iC,uBAAwC0lC,cAAe,EACnEzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,2BAA2B6O,EAAW7iC,wBAAwB,SAACzG,GACvGA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,uBACtCvN,EAAgBkH,UAAUI,YAAc1G,CAC5C,KAGJZ,EAAgBouC,kBAAoBpuC,EAAgByL,WAAWC,qBAC/D1L,EAAgBquC,iBAAmBruC,EAAgByL,WAAWC,qBACf9M,MAA3CsrC,EAAW7iC,uBAAuB/F,QAClCtB,EAAgBkH,UAAUI,YAAa9B,MAAQ0kC,EAAW7iC,uBAAuB/F,QAIlFhF,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAvGA,GAyGAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI/sC,GAAwB+sC,EAA5B,IC5H9C,IAAM,GAAO,4BAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAqDJ,OAlDW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA6CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC5G,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAK06C,gCAAgC7E,EAAkBjd,EAAW/2B,IACzE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA47C,gCAAR,SAAwCxd,EAAiB6O,EAAsClqC,G,cAC3F,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MA2BrB,OAzBAkF,EAAgBmI,YAAYswC,WAAY,EAExCz4C,EAAgBmI,YAAYrD,UAAwC,QAA5B,EAAAolC,EAAWhiC,yBAAiB,QAAI,EACxElI,EAAgBmI,YAAYH,kBAAmF,QAA/D,EAAyB,QAAzB,EAAAkiC,EAAW9hC,sBAAc,QAAK8hC,EAAmB4O,sBAAc,QAAI,IACnH94C,EAAgBmI,YAAYM,iBAAyD,QAAtC,EAAAyhC,EAAW1hC,mCAA2B,QAAI,IACzFxI,EAAgBmI,YAAYI,iBAAyD,QAAtC,EAAA2hC,EAAW5hC,mCAA2B,QAAI,IAErF4hC,EAAW7hC,oBACXi2B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,uBAAuB6O,EAAW7hC,oBAAoB,SAACzH,GAC/FA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,kBACtCvN,EAAgBmI,YAAYvH,QAAUA,CAC1C,KAIJspC,EAAWxhC,6BACX41B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,gCAAgC6O,EAAWxhC,6BAA6B,SAAC9H,GACjHA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,4BACtCvN,EAAgBmI,YAAYsC,iBAAmB7J,CACnD,KAIDtE,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EA7EA,GA+EAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI9rC,GAA0B8rC,EAA9B,ICjG9C,IAAM,GAAO,2BAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA2CJ,OAxCW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA4CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC3G,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAK06C,gCAAgC7E,EAAkBjd,EAAW/2B,IACzE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA47C,gCAAR,SAAwCxd,EAAiB6O,EAAqClqC,G,QAC1F,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAiBrB,OAfAkF,EAAgB4G,WAAW6xC,WAAY,EAEvCz4C,EAAgB4G,WAAW9B,UAAyC,QAA7B,EAAAolC,EAAWvjC,0BAAkB,QAAI,EACxE3G,EAAgB4G,WAAWE,MAAqC,QAA7B,EAAAojC,EAAWrjC,0BAAkB,QAAI,EAEhEqjC,EAAWnjC,oBACVmjC,EAAWnjC,kBAAmCgmC,cAAe,EAC9DzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,sBAAsB6O,EAAWnjC,mBAAmB,SAACnG,GAC7FA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,2BACtCvN,EAAgB4G,WAAWhG,QAAUA,CACzC,MAIDtE,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAnEA,GAqEAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIrtC,GAAyBqtC,EAA7B,ICvF9C,IAAM,GAAO,kCAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA2BJ,OAxBW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAkDpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACjH,OAAO,EAAKxhB,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,GAAiB/C,MAAK,WACrF,EAAK87C,wBAAwB/E,EAAkBjd,EAAW/2B,EAC9D,GACJ,GACJ,EAEQ,YAAA+4C,wBAAR,SAAgC1d,EAAiB6O,EAA2ClqC,GACxF,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,uCAGMz8B,IAAhCsrC,EAAWtiC,mBACX5H,EAAgB6H,kBAAoBqiC,EAAWtiC,iBAEvD,EACJ,EAnDA,GAqDAszB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIpsC,GAAgCosC,EAApC,ICtE9C,IAAM,GAAO,sBAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAiEJ,OA9DW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAuCpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACtG,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAK66C,0BAA0BhF,EAAkBjd,EAAW/2B,IACnE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA+7C,0BAAR,SAAkC3d,EAAiB6O,EAAgClqC,GAC/E,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MAuCrB,OArCAkF,EAAgB6I,MAAM4vC,WAAY,EAClCz4C,EAAgB6I,MAAM/D,UAAY,EAEClG,MAA/BsrC,EAAWthC,iBACX5I,EAAgB6I,MAAM7D,MAAQ,EAAA2nB,OAAOxf,UAAU+8B,EAAWthC,kBAE1D5I,EAAgB6I,MAAM7D,MAAQ,EAAA2nB,OAAOssB,QAGrC/O,EAAWphC,mBACXw1B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,sBAAsB6O,EAAWphC,mBAAmB,SAAClI,GAC7FA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,kBACtCvN,EAAgB6I,MAAMjI,QAAUA,CACpC,UAIgChC,IAApCsrC,EAAWnhC,qBACX/I,EAAgB6I,MAAMrC,UAAY0jC,EAAWnhC,qBAE7C/I,EAAgB6I,MAAMrC,UAAY,EAGlC0jC,EAAWlhC,wBACVkhC,EAAWlhC,sBAAuC+jC,cAAe,EAClEzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,0BAA0B6O,EAAWlhC,uBAAuB,SAACpI,GACrGA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,sBACtCvN,EAAgB6I,MAAM+vC,iBAAmBh4C,CAC7C,MAIRZ,EAAgB6I,MAAMqwC,eAAgB,EACtCl5C,EAAgB6I,MAAM6vC,6BAA8B,EAE7Cp8C,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAzFA,GA2FAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIprC,GAAoBorC,EAAxB,IC9G9C,IAAM,GAAO,yBAiBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAwDJ,OArDW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA0CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACzG,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKg7C,6BAA6BnF,EAAkBjd,EAAW/2B,IACtE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAk8C,6BAAR,SAAqC9d,EAAiB6O,EAAmClqC,GACrF,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAMiD,EAAW,IAAIxjC,MA8BrB,YA5BkC8D,IAA9BsrC,EAAWhhC,iBACXlJ,EAAgBmJ,iBAAmB+gC,EAAWhhC,qBAGXtK,IAAnCsrC,EAAW9gC,sBACXpJ,EAAgBqJ,yBAA2B,EAAAsjB,OAAOxf,UAAU+8B,EAAW9gC,sBAGvE8gC,EAAW5gC,kBACV4gC,EAAW5gC,gBAAiCyjC,cAAe,EAC5DzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,oBAAoB6O,EAAW5gC,iBAAiB,SAAC1I,GACzFA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,eACtCvN,EAAgBo5C,2BAA6Bx4C,EAC7CZ,EAAgBq5C,+CAAgD,CACpE,MAIJnP,EAAW3gC,sBACX+0B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,yBAAyB6O,EAAW3gC,sBAAsB,SAAC3I,GACnGA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,qBACtCvN,EAAgBs5C,mBAAqB14C,CACzC,KAIDtE,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAhFA,GAkFAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI9qC,GAAuB8qC,EAA3B,ICrG9C,IAAM,GAAO,oBAiBb,cA0BI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAgCJ,OA7BW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAqCpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACpG,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKo7C,wBAAwBvF,EAAkBjd,EAAW/2B,IACjE1D,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAs8C,wBAAR,SAAgCle,EAAiB6O,EAA8BlqC,GAC3E,KAAMA,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAS9B,YANuBz8B,IAAnBsrC,EAAWniC,IACX/H,EAAgBgI,kBAAoBkiC,EAAWniC,IAE/C/H,EAAgBgI,kBAAoBF,EAAkB0xC,aAGnDl9C,QAAQC,SACnB,EAxDwB,EAAAi9C,aAAe,IAyD3C,C,CA7DA,GA+DAte,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIjsC,GAAkBisC,EAAtB,IC7E9C,IAAM,GAAO,yBAuDb,cAkBI,WAAYA,GAdI,KAAAxmC,KAAO,GAenBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAwRJ,OArRW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAOc,EAAAkkC,qBAAd,SAAmCz1C,GAC/B,IAAM01C,EAAoBpgD,KAAKqgD,sBAAsB31C,GACrD,OAAK01C,EAIE/+C,OAAOiT,KAAK8rC,EAAkBE,UAH1B,EAIf,EAOO,YAAAC,qBAAP,SAA4B71C,GACxB,OAAO81C,EAAuBL,qBAAqBz1C,EACvD,EAOc,EAAA+1C,cAAd,SAA4B/1C,EAAyBg2C,GACjD,IAAMN,EAAoBpgD,KAAKqgD,sBAAsB31C,GACrD,IAAK01C,EACD,MAAM,IAAI56C,MAAM,sEAA+D,GAAI,eAGvF,IAAMm7C,EAAS,SAACD,GACZ,IAAME,EAAUR,EAAkBE,SAASI,GAC3C,GAAIE,EACA,IAAoB,UAAAA,EAAA,eAAS,CAAxB,IAAMC,EAAK,KACZA,EAAMpuC,KAAKnM,SAAWu6C,EAAMv6C,QAChC,CAER,EAEA,GAAIo6C,aAAuBl/C,MACvB,IAAmB,UAAAk/C,EAAA,eACfC,EADW,WAIfA,EAAOD,GAGXN,EAAkBU,aAAeJ,CACrC,EAOO,YAAAK,cAAP,SAAqBr2C,EAAyBg2C,GAC1CF,EAAuBC,cAAc/1C,EAAUg2C,EACnD,EAMc,EAAAM,MAAd,SAAoBt2C,GAChB,IAAM01C,EAAoBpgD,KAAKqgD,sBAAsB31C,GACrD,IAAK01C,EACD,MAAM,IAAI56C,MAAM,6DAAsD,GAAI,eAG9E,IAAoB,UAAA46C,EAAkBa,SAAlB,eAA4B,CAA3C,IAAMJ,EAAK,KACZA,EAAMpuC,KAAKnM,SAAWu6C,EAAMv6C,QAChC,CAEA85C,EAAkBU,aAAe,IACrC,EAMO,YAAAI,MAAP,SAAax2C,GACT81C,EAAuBQ,MAAMt2C,EACjC,EAOc,EAAAy2C,uBAAd,SAAqCz2C,GACjC,IAAM01C,EAAoBpgD,KAAKqgD,sBAAsB31C,GACrD,IAAK01C,EACD,MAAM,IAAI56C,MAAM,qFAA8E,GAAI,eAGtG,OAAO46C,EAAkBU,YAC7B,EAOO,YAAAM,uBAAP,SAA8B12C,GAC1B,OAAO81C,EAAuBW,uBAAuBz2C,EACzD,EAEe,EAAA21C,sBAAf,SAAqC31C,G,QACjC,OAAwC,QAAjC,EAA2B,QAA3B,EAAAA,aAAQ,EAARA,EAAUotC,yBAAiB,eAAEhlC,YAAI,eAAG,MAAS,IACxD,EAGO,YAAAknC,UAAP,WACI,IAAM9uC,EAAalL,KAAKic,QAAQnJ,KAAK5H,WACrC,GAAIA,GAAcA,EAAWlL,KAAKiU,MAAO,CACrC,IAAMwpB,EAAYvyB,EAAWlL,KAAKiU,MAClCjU,KAAKqhD,UAAY5jB,EAAU6iB,QAC/B,CACJ,EAGO,YAAArG,QAAP,W,MACUvvC,EAAW1K,KAAKic,QAAQqlC,gBAC9B,GAAI52C,EAAU,CACV,IAAM8M,EAAUxX,KAAKic,QAAQtR,OAAOqb,iBAAiB,KACjDxO,aAAO,EAAPA,EAAS+pC,iBACTf,EAAuBC,cAAc/1C,EAAU8M,EAAQ+pC,gBAG1C,QAAjB,EAAA/pC,aAAO,EAAPA,EAASgqC,gBAAQ,gBAAG,CAChB,YAAIlB,GACA,OAAOE,EAAuBL,qBAAqBz1C,EACvD,EACA,mBAAI+2C,GACA,IAAMC,EAAsBlB,EAAuBW,uBAAuBz2C,GAC1E,OAAKg3C,EAGDlgD,MAAMmgD,QAAQD,GACPA,EAAoB,GAExBA,EALIlB,EAAuBL,qBAAqBz1C,GAAU,EAMrE,EACA,mBAAI+2C,CAAgBf,GAChBF,EAAuBC,cAAc/1C,EAAUg2C,EACnD,GAER,CACJ,EAKO,YAAAhX,wBAAP,SACI3H,EACA9tB,EACAvK,EACA+I,EACAmd,EACAxtB,GANJ,WAQI,OAAO,GAAW+3C,mBAA+DpY,EAASnS,EAAW5vB,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC/H,IAAMuH,EAAW,IAAIxjC,MAsGrB,OArGAwjC,EAASngC,KACL,EAAKoX,QAAQytB,wBAAwB3H,EAAS9tB,EAAMvK,EAAM+I,EAAMmd,GAAW,SAAC1a,GAGxE,GAFA9S,EAAO8S,GAEHA,aAAuB,EAAA6Z,KAAM,CAC7B,IAAMuW,EAAkB,GAAWiF,aAAaxI,EAASnS,EAAUxZ,MAE7D,EAAO,EAAK6F,QAAQqlC,gBACpBrY,EAAW,EAAQ,EAAK6O,kBAAoB,EAAKA,mBAAqB,CAAC,EAAK,CAAC,EAC7EhlC,EAAQm2B,EAASn2B,KAAOm2B,EAASn2B,MAAQ,CAAC,EAC1C,EAAyCA,EAAK,IAAQA,EAAK,KAAS,CAAEguC,aAAc,KAAMG,SAAU,GAAIX,SAAU,CAAC,GAGzH,EAAkBW,SAASp8C,KAAK,CAAE4N,KAAMyC,EAAa5O,SAAU4O,EAAY5O,WAG3E,I,eAASs7C,GACL,IAAMC,EAAUpkB,EAAUqkB,SAASF,GAC7Bt7C,EAAW8+B,GAAUtD,IAAI,UAAG4Y,EAAgB,qBAAakH,EAAY,aAAa,EAAK3lC,QAAQnJ,KAAKlH,UAAWi2C,EAAQv7C,UAC7H0+B,EAASngC,KACL,EAAKoX,QAAQupB,mBAAmB,sBAAeqc,EAAQv7C,UAAYA,EAAU4O,EAAaowB,GAAiB,SAAC5+B,GACxG,I,eAASq7C,GACL,IAAMC,EAAeH,EAAQvB,SAASyB,GAChCE,EAAU7c,GAAUtD,IAAI,sBAAe,GAAI,qBAAakgB,GAAgB,EAAKX,UAAWW,GAC9F,EAAkB1B,SAAS2B,EAAQhuC,MAAQ,EAAkBqsC,SAAS2B,EAAQhuC,OAAS,GACvF,EAAkBqsC,SAAS2B,EAAQhuC,MAAMpP,KAAK,CAC1C4N,KAAMyC,EACN5O,SAAUI,IAIdwO,EAAYgtC,mBAAmBjlC,KAAI,SAACklC,GAChC,IAAMvzB,EAAUuzB,EACZlZ,EAAyC,KACzCmZ,EAA0BxzB,EAG9B,EAAG,CAEC,KADAwzB,EAAUA,EAASz3C,QAEf,OAEJs+B,EAAWuX,EAAuBH,sBAAsB+B,EAC5D,OAAsB,OAAbnZ,GAGT,GAAI,GAAQA,IAAauX,EAAuBH,sBAAsB,GAAO,CAGzE,IAAK,IAAMptC,KADXmvC,EAAQtK,kBAAoB,CAAC,EACX,EAAKA,kBACnBsK,EAAQtK,kBAAkB7kC,GAAO,EAAK6kC,kBAAkB7kC,GAK5D,IAAK,IAAMA,KADXmvC,EAAQtK,kBAAkBhlC,KAAO,GACf,EAAKglC,kBAAkBhlC,KACrCsvC,EAAQtK,kBAAkBhlC,KAAKG,GAAO,EAAK6kC,kBAAkBhlC,KAAKG,GAItEmvC,EAAQtK,kBAAkBhlC,KAAK,IAAQ,CAAEguC,aAAc,KAAMG,SAAU,GAAIX,SAAU,CAAC,GACtF,IAAuB,UAAArX,EAASgY,SAAT,eAAmB,CAArC,IAAMA,EAAQ,KACfmB,EAAQtK,kBAAkBhlC,KAAK,IAAMmuC,SAASp8C,KAAK,CAC/C4N,KAAMwuC,EAASxuC,KACfnM,SAAU26C,EAAS36C,UAE3B,CACA,IAAK,IAAM2M,KAAOg2B,EAASqX,SACvB,GAAIj/C,OAAOK,UAAUC,eAAeC,KAAKqnC,EAASqX,SAAUrtC,GAAM,CAC9DmvC,EAAQtK,kBAAkBhlC,KAAK,IAAMwtC,SAASrtC,GAAO,GACrD,IAA2B,UAAAg2B,EAASqX,SAASrtC,GAAlB,eAAwB,CAA9C,IAAMovC,EAAY,KACnBD,EAAQtK,kBAAkBhlC,KAAK,IAAMwtC,SAASrtC,GAAKpO,KAAK,CACpD4N,KAAM4vC,EAAa5vC,KACnBnM,SAAU+7C,EAAa/7C,UAE/B,CACJ,CAGJ2iC,EAAWmZ,EAAQtK,kBAAkBhlC,KAAK,GAC9C,CAGA,IAAqB,UAAAm2B,EAAUgY,SAAV,gBAAV57C,EAAM,MACFoN,OAASyC,IAChB7P,EAAOoN,KAAOmc,GAGtB,IAAqB,UAAAqa,EAAUqX,SAAS2B,EAAQhuC,MAA3B,eAAkC,CAAlD,IAAM5O,KAAM,MACFoN,OAASyC,IAChB7P,EAAOoN,KAAOmc,EAEtB,CACJ,G,EAxEKmzB,EAAsB,EAAGA,EAAsBF,EAAQvB,SAAS79C,SAAUs/C,E,EAA1EA,EA0Eb,I,EA/ECH,EAAe,EAAGA,EAAenkB,EAAUqkB,SAASr/C,SAAUm/C,E,EAA9DA,EAkFb,CACJ,KAEG5+C,QAAQ6iC,IAAIb,GAAUrhC,MAAK,SAAC,GAC/B,OAD2C,IAE/C,GACJ,GACJ,EACJ,EA7SA,GA+SAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI+F,GAAuB/F,EAA3B,IClT9C,kBAuCI,WAAYjjC,EAA8C+G,GAA1D,WAhBQ,KAAA+jC,oBAAqD,KACrD,KAAAC,mBAAqC,GACrC,KAAAC,wBAA0C,GAC1C,KAAAC,mBAAyE,CAAC,EAc9EziD,KAAK0iD,UAAW,oBACTC,EAAmBC,sBACnBprC,GAEPxX,KAAK6iD,OAAStkC,EACdve,KAAK6iD,OAAOC,oBAAsB9iD,KAElCA,KAAK4b,kBAAoB,IAAI,EAAAP,WAC7Brb,KAAK6iD,OAAOhnC,oBAAoBoF,SAAQ,WACpC,EAAKjD,SACT,IAEAhe,KAAK+iD,cACL/iD,KAAKgjD,qBACT,CA8LJ,OA/OmB,EAAAJ,mBAAf,WACI,MAAO,CACHK,WAAY,KACZC,QAAS,EACTtH,mBAAoB,EACpBuH,qBAAsB,EACtBC,wBAAyB,EAAAr8C,UAAUs8C,uBACnCC,iBAAiB,EAEzB,EA8CO,YAAAC,cAAP,SAAqB/rC,GAArB,WAEUgsC,EAAYniD,OAAOiT,KAAKkD,GAASqlC,QAAO,SAAC5pC,GAAgB,OAAC,EAAKyvC,SAAiBzvC,KAAUuE,EAAgBvE,EAAjD,IAC/D,GAAKuwC,EAAU/gD,OAAf,CAIA,IAAMghD,GAAa,oBACZzjD,KAAK0iD,UACLlrC,GAGDksC,EAAa1jD,KAAK0iD,SACxB1iD,KAAK0iD,SAAWe,EAIZA,EAAWR,aAAeS,EAAWT,YACrCQ,EAAWL,0BAA4BM,EAAWN,yBAClDK,EAAWH,kBAAoBI,EAAWJ,iBACzCtjD,KAAKsiD,qBAINtiD,KAAKsiD,oBAAoBY,QAAUO,EAAWP,QAC9CljD,KAAKsiD,oBAAoB1G,mBAAqB6H,EAAW7H,mBACzD57C,KAAKsiD,oBAAoBa,oBAAsBM,EAAWN,qBAJ1DnjD,KAAKgjD,qBAjBT,CAuBJ,EAKO,YAAAW,gBAAP,WACI,OAAO3jD,KAAKsiD,mBAChB,EAEQ,YAAAsB,4BAAR,SAAoCt9C,GAChC,QAAKA,MAGDA,aAAoB,EAAA+sC,aAAe/sC,EAAS8H,WAAWy1C,oBAI/D,EAEQ,YAAAC,SAAR,SAAiBrxC,GAAjB,WACIzS,KAAKyiD,mBAAmBhwC,EAAKmrC,UAAYnrC,EAAKsxC,4BAA4B9mC,IAAIjd,KAAKgkD,uBAAuBtlB,KAAK1+B,OAI/G,EAAA2Z,MAAMusB,cAAa,WACX,EAAK0d,4BAA4BnxC,EAAKnM,WACrCmM,EAAKnM,SAAyB29C,kBAAoB,EAAK3B,qBACJ,IAAhD,EAAKE,wBAAwBjsC,QAAQ9D,IACrC,EAAK+vC,wBAAwB39C,KAAK4N,KAGS,IAA3C,EAAK8vC,mBAAmBhsC,QAAQ9D,IAChC,EAAK8vC,mBAAmB19C,KAAK4N,EAGzC,GACJ,EAEQ,YAAAyxC,YAAR,SAAoBzxC,GAChBA,EAAKsxC,4BAA4B/mC,OAAOhd,KAAKyiD,mBAAmBhwC,EAAKmrC,kBAC9D59C,KAAKyiD,mBAAmBhwC,EAAKmrC,UACpC,IAAIuG,EAAMnkD,KAAKwiD,wBAAwBjsC,QAAQ9D,IAClC,IAAT0xC,GACAnkD,KAAKwiD,wBAAwBrO,OAAOgQ,EAAK,IAGhC,KADbA,EAAMnkD,KAAKuiD,mBAAmBhsC,QAAQ9D,KAElCzS,KAAKuiD,mBAAmBpO,OAAOgQ,EAAK,EAE5C,EAEQ,YAAApB,YAAR,WACI/iD,KAAK6iD,OAAOrwC,OAAOiE,QAAQzW,KAAK8jD,SAASplB,KAAK1+B,OAE9CA,KAAK6iD,OAAOuB,yBAAyBnnC,IAAIjd,KAAK8jD,SAASplB,KAAK1+B,OAE5DA,KAAK6iD,OAAOwB,wBAAwBpnC,IAAIjd,KAAKkkD,YAAYxlB,KAAK1+B,MAClE,EAGQ,YAAAgkD,uBAAR,SAA+BvxC,GAC3B,IAAM6xC,EAAiBtkD,KAAKwiD,wBAAwBjsC,QAAQ9D,GACtD8xC,EAAYvkD,KAAKuiD,mBAAmBhsC,QAAQ9D,GAG1BzS,KAAK4jD,4BAA4BnxC,EAAKnM,WAEtDmM,EAAKnM,oBAAoB,EAAA+sC,cACzB5gC,EAAKnM,SAAS8H,WAAW61C,kBAAoBjkD,KAAKsiD,sBAEnC,IAAfiC,GACAvkD,KAAKuiD,mBAAmBpO,OAAOoQ,EAAW,GAC1CvkD,KAAKwiD,wBAAwB39C,KAAK4N,KACP,IAApB6xC,GACPtkD,KAAKwiD,wBAAwB39C,KAAK4N,KAId,IAApB6xC,GACAtkD,KAAKwiD,wBAAwBrO,OAAOmQ,EAAgB,GACpDtkD,KAAKuiD,mBAAmB19C,KAAK4N,KACP,IAAf8xC,GACPvkD,KAAKuiD,mBAAmB19C,KAAK4N,EAGzC,EAOO,YAAA+xC,qBAAP,W,MACI,OAA0D,QAA3B,QAAxB,EAAAxkD,KAAKsiD,2BAAmB,eAAEnL,qBACrC,EAMO,YAAA6L,oBAAP,e,IAuBQyB,EAvBR,OACQzkD,KAAKsiD,qBACLtiD,KAAKsiD,oBAAoBtkC,UAE7Bhe,KAAKsiD,oBAAsB,IAAI,EAAAoC,oBAC3B,qBACA1kD,KAAK0iD,SAASO,WACdjjD,KAAK6iD,OACL7iD,KAAK0iD,SAASY,qBACdh+C,EACAtF,KAAK0iD,SAASU,yBAElBpjD,KAAKsiD,oBAAoBqC,sBAAuB,EAChD3kD,KAAKsiD,oBAAoBsC,WAAa5kD,KAAKuiD,mBAC3CviD,KAAKsiD,oBAAoBuC,WAA8C,QAAjC,EAAwB,QAAxB,EAAA7kD,KAAK0iD,SAASmC,kBAAU,eAAExvC,eAAO,QAAIrV,KAAK6iD,OAAOgC,WAAWxvC,QAClGrV,KAAKsiD,oBAAoBwC,YAAa,EACtC9kD,KAAKsiD,oBAAoB1G,mBAAqB57C,KAAK0iD,SAAS9G,mBAC5D57C,KAAKsiD,oBAAoBa,oBAAsBnjD,KAAK0iD,SAASS,oBAC7DnjD,KAAKsiD,oBAAoBY,QAAUljD,KAAK0iD,SAASQ,QACjDljD,KAAKsiD,oBAAoByC,eAAgB,EACzC/kD,KAAKsiD,oBAAoB0C,iBAAkB,EAC3ChlD,KAAKsiD,oBAAoB2C,qBAAsB,EAG/CjlD,KAAKsiD,oBAAoB4C,uBAAuBjoC,KAAI,SAACkoC,GACjDV,EAAwB,EAAK5B,OAAOuC,qBACpC,EAAKvC,OAAOuC,qBAAuB,EAC9B,EAAK1C,SAASmC,WAGfM,EAAmBN,WAAWh7C,SAAS,EAAK64C,SAASmC,YAFrD,EAAKhC,OAAOgC,WAAWQ,mBAAmBF,EAAmBN,WAAY,EAAKhC,OAAOx5C,YAAYi8C,wBAIzG,IACAtlD,KAAKsiD,oBAAoBiD,wBAAwBtoC,KAAI,WACjD,EAAK4lC,OAAOuC,qBAAuBX,CACvC,IAEAzkD,KAAKwiD,wBAAwB/rC,SAAQ,SAAChE,GAC9B,EAAKmxC,4BAA4BnxC,EAAKnM,YACrCmM,EAAKnM,SAAyB29C,kBAAoB,EAAK3B,oBAEhE,GACJ,EAKO,YAAAtkC,QAAP,WACIhe,KAAK6iD,OAAOC,yBAAsBx9C,EAC9BtF,KAAKsiD,sBACLtiD,KAAKsiD,oBAAoBtkC,UACzBhe,KAAKsiD,oBAAsB,MAE/BtiD,KAAKwiD,wBAA0B,GAC/BxiD,KAAKuiD,mBAAqB,EAC9B,EACJ,EApPA,GAsPM,GAAO,6BAiBb,cAqBI,WAAY9H,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,IACxC5mC,KAAK2mC,UACL8T,EAAO9vC,OAAO2a,wBAAyB,EAE/C,CA8DJ,OA3DW,YAAAtH,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA8CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC7G,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAK2gD,gCAAgC9K,EAAkBp0C,EAAUI,EAAiB+2B,IACzFz6B,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA6hD,gCAAR,SAAwCzjB,EAAiBz7B,EAAqBI,EAA2B+2B,G,QACrG,KAAM/2B,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAE9B,IAAM0jB,EAAc/+C,EAWpB,GARA++C,EAAYr3C,WAAWy1C,qBAAsB,EAG7C4B,EAAYr3C,WAAWs3C,wBAA0B,EAGjDD,EAAYr3C,WAAWu3C,2BAA4B,OAEdrgD,IAAjCm4B,EAAUttB,mBAYV,OAFAs1C,EAAYr3C,WAAWgC,oBAAsB,EAC7Cq1C,EAAYr3C,WAAWy1C,qBAAsB,EACtC7gD,QAAQC,UAXfwiD,EAAYr3C,WAAWgC,oBAAsBqtB,EAAUttB,mBACvD,IAAMoO,EAAQknC,EAAYtzC,WAe9B,OAdQszC,EAAYr3C,WAAWgC,sBAAwBmO,EAAMukC,oBACrD,IAAIH,GAAmB,CAAC,EAAG8C,EAAYtzC,YAChCszC,EAAYr3C,WAAWgC,uBAAiD,QAAzB,EAAAmO,EAAMukC,2BAAmB,eAAE0B,0BAExD,QAAzB,EAAAjmC,EAAMukC,2BAAmB,SAAEE,uBAQnCyC,EAAYr3C,WAAWe,iBAAmB,EAC1Cs2C,EAAYr3C,WAAWa,iBAAmB,EACtCwuB,EAAUptB,qBACTotB,EAAUptB,oBAAqCojC,cAAe,EACxDzzC,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,wBAAwBtE,EAAUptB,yBAAqB/K,GAAW3B,MAAK,SAAC2D,GACvHA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,mBACtCwxC,EAAYr3C,WAAWw3C,2BAA6Bt+C,EACpDm+C,EAAYr3C,WAAWy3C,sBAAuB,CAClD,KAEO7iD,QAAQC,SAEvB,EACJ,EAzFA,GA2FA2+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIvqC,GAA2BuqC,EAA/B,IC3Z9C,IAAM,GAAO,qCAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,IACxC5mC,KAAK2mC,UACL8T,EAAO9vC,OAAO2a,wBAAyB,EAE/C,CA6EJ,OA1EW,YAAAtH,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAqDpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACpH,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKihD,gCAAgCpL,EAAkBp0C,EAAUI,EAAiB+2B,IACzFz6B,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAmiD,gCAAR,SAAwC/jB,EAAiBz7B,EAAqBI,EAA2B+2B,GACrG,KAAM/2B,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAG9B,IAAM0jB,EAAc/+C,EAcpB,GAXA++C,EAAYr3C,WAAW23C,uBAAwB,EAI/CN,EAAYr3C,WAAWs3C,wBAA0B,EACjDD,EAAYr3C,WAAWe,iBAAmB,EAC1Cs2C,EAAYr3C,WAAWa,iBAAmB,EAG1Cw2C,EAAYr3C,WAAW43C,6BAA8B,OAET1gD,IAAxCm4B,EAAUltB,0BAKV,OAFAk1C,EAAYr3C,WAAWoC,sBAAwB,EAC/Ci1C,EAAYr3C,WAAW23C,uBAAwB,EACxC/iD,QAAQC,UAJfwiD,EAAYr3C,WAAWoC,sBAAwBitB,EAAUltB,0BAO7D,IAAMy0B,EAAW,IAAIxjC,MA6BrB,OA3BAikD,EAAYr3C,WAAWy3C,sBAAuB,EAE1CpoB,EAAUhtB,6BACTgtB,EAAUhtB,2BAA4CgjC,cAAe,EACtEzO,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,+BAA+BtE,EAAUhtB,4BAA4B9M,MAAK,SAAC2D,GACnHA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,2BACtCwxC,EAAYr3C,WAAW63C,6BAA+B3+C,CAC1D,WAIyChC,IAA7Cm4B,EAAU/sB,+BACV+0C,EAAYr3C,WAAWuC,kBAAoB,EAAA0iB,OAAOxf,UAAU4pB,EAAU/sB,gCAEtE+0C,EAAYr3C,WAAWuC,kBAAoB,EAAA0iB,OAAOigB,QAGlD7V,EAAU7sB,iCACVo0B,EAASngC,KACL7E,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,oCAAoCtE,EAAU7sB,iCAAiCjN,MAAK,SAAC2D,GAC7HA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,iCACtCwxC,EAAYr3C,WAAW83C,yBAA2B5+C,CACtD,KAIDtE,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,EACJ,EAxGA,GA0GAi+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAInqC,GAAmCmqC,EAAvC,IC7H9C,IAAM,GAAO,uBAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,IACxC5mC,KAAK2mC,SAEL3mC,KAAKic,QAAQknB,uBAErB,CAuDJ,OApDW,YAAAnlB,QAAP,WACQhe,KAAK2mC,SACL3mC,KAAKic,QAAQknB,wBAEhBnjC,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAAwCpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACvG,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKshD,2BAA2BzL,EAAkBp0C,EAAUI,EAAiB+2B,IACpFz6B,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAAwiD,2BAAR,SAAmCpkB,EAAiBz7B,EAAqBI,EAA2B+2B,GAChG,KAAM/2B,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAK9B,IAAMr7B,EAAgB0H,WAAWy1C,sBAAwBn9C,EAAgB0H,WAAW23C,wBAA2BtoB,EAAUvsB,gBACrH,OAAOlO,QAAQC,UAInByD,EAAgB0H,WAAWs3C,wBAA0Bh/C,EAAgBgI,kBACrE,IAAMsC,OAAwD1L,IAAlCm4B,EAAUzsB,oBAAoCysB,EAAUzsB,oBAAsByc,OAAO8I,UASjH,OARA7vB,EAAgB0H,WAAW6C,oBAAsBD,OACd1L,IAA/Bm4B,EAAU3sB,kBAAuE,GAArC2sB,EAAU3sB,iBAAiBrO,QACvEiE,EAAgB0H,WAAW2C,UAAU2xB,eAAejF,EAAU3sB,iBAAiB,GAAI2sB,EAAU3sB,iBAAiB,GAAI2sB,EAAU3sB,iBAAiB,IAGjJpK,EAAgB0H,WAAWe,iBAAmB,EAC9CzI,EAAgB0H,WAAWa,iBAAmBwuB,EAAUvsB,gBACxDxK,EAAgB0H,WAAWg4C,qBAAsB,EAC7C3oB,EAAUtsB,kBACTssB,EAAUtsB,iBAAkCsiC,cAAe,EACrDzzC,KAAKic,QAAQs3B,qBAAqB,UAAGxR,EAAO,qBAAqBtE,EAAUtsB,kBAAkBxN,MAAK,SAAC2D,GACtGA,EAAQ2M,KAAO,UAAGvN,EAAgBuN,KAAI,gBACtCvN,EAAgB0H,WAAW+C,iBAAmB7J,EAC9CZ,EAAgB0H,WAAWy3C,sBAAuB,CACtD,KAEO7iD,QAAQC,SAEvB,EACJ,EAnFA,GAqFA2+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI5pC,GAAqB4pC,EAAzB,ICzG9C,IAAM,GAAO,2BAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAiCJ,OA9BW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAWyzC,mBAA4CpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC3G,IAAMuH,EAAW,IAAIxjC,MAGrB,OAFAwjC,EAASngC,KAAK,EAAKoX,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,IAC1Es+B,EAASngC,KAAK,EAAKwhD,+BAA+B3L,EAAkBp0C,EAAUI,EAAiB+2B,IACxFz6B,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAEQ,YAAA0iD,+BAAR,SAAuCtkB,EAAiBz7B,EAAqBI,EAA2B+2B,GACpG,KAAM/2B,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGu8B,EAAO,kCAK9B,OAAKr7B,EAAgB0H,WAAWy1C,qBAAwBpmB,EAAUtvB,YAGlEzH,EAAgB0H,WAAWk4C,qBAAsB,EACjD5/C,EAAgB0H,WAAWD,WAAasvB,EAAUtvB,WAC3CnL,QAAQC,WAJJD,QAAQC,SAKvB,EACJ,EAzDA,GA2DA2+B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIvsC,GAAyBusC,EAA7B,ICpF9C,IAAM,GAAO,wBAiBb,cAcI,WAAYA,GAVI,KAAAxmC,KAAO,GAWnBjU,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CAIJ,OADW,YAAA5oB,QAAP,WAAkB,EACtB,EApBA,GAsBA4jB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI8L,GAAsB9L,EAA1B,ICpC9C,IAAM,GAAO,qBAiBb,cAYI,WAAYA,GAVI,KAAAxmC,KAAO,GAWnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CA0BJ,OAvBW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAA45B,kBAAP,SAAyB9T,EAAiBz6B,EAAmBlF,GAA7D,WACI,OAAO,GAAW+3C,mBAAmDpY,EAASz6B,EAAStH,KAAKiU,MAAM,SAACymC,EAAkBjd,GACjH,IAAM3I,EAA6BxvB,MAAnBgC,EAAQwtB,QAAuB,GAAWkhB,eAAiB5Q,GAAUtD,IAAI,UAAGC,EAAO,YAAY,EAAK9lB,QAAQnJ,KAAKwY,SAAUhkB,EAAQwtB,SAC7ImhB,EAAQ7Q,GAAUtD,IAAI,UAAG4Y,EAAgB,WAAW,EAAKz+B,QAAQnJ,KAAKukB,OAAQoG,EAAU9pB,QAC9F,OAAO,EAAKsI,QAAQi6B,oBAChBnU,EACAjN,EACAmhB,GACA,SAACld,GACG32B,EAAO22B,EACX,GACAzxB,EAAQsuC,aAAanC,aAAe,CAAE+S,uCAAuC,QAASlhD,GACrFgC,EAAQsuC,aAAanC,aAE9B,GACJ,EACJ,EAzCA,GA2CA7R,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIgM,GAAmBhM,EAAvB,IC3D9C,IAAM,GAAO,wBAiBb,cAgBI,WAAYA,GAZI,KAAAxmC,KAAO,GAanBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA2CJ,OAxCW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAs3B,qBAAP,SAA4BxR,EAAiB0T,EAA2BrzC,GAAxE,WACI,OAAO,GAAW+3C,mBAAsDpY,EAAS0T,EAAaz1C,KAAKiU,MAAM,SAACymC,EAAkBjd,GACxH,OAAO,EAAKxhB,QAAQs3B,qBAAqBxR,EAAS0T,GAAa,SAAC1c,GAC5D,KAAMA,aAA0B,EAAArQ,SAC5B,MAAM,IAAIljB,MAAM,UAAGk1C,EAAgB,iCAGnCjd,EAAUv2B,SACV6xB,EAAevxB,QAAUi2B,EAAUv2B,OAAO,GAC1C6xB,EAAetxB,QAAUg2B,EAAUv2B,OAAO,IAI9C6xB,EAAe2tB,gBAAkB,EACjC3tB,EAAe4tB,gBAAkB,EAE7BlpB,EAAU31B,WACVixB,EAAehxB,MAAQ01B,EAAU31B,UAGjC21B,EAAUz1B,QACV+wB,EAAe9wB,OAASw1B,EAAUz1B,MAAM,GACxC+wB,EAAe7wB,OAASu1B,EAAUz1B,MAAM,IAGlB1C,MAAtBm4B,EAAUkY,WACV5c,EAAe+c,iBAAmBrY,EAAUkY,UAGhDvzC,EAAO22B,EACX,GACJ,GACJ,EACJ,EA9DA,GAgEA6I,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIzuC,GAAsByuC,EAA1B,ICvF9C,IAAM,GAAO,kBAkBb,cAqBI,WAAYA,GAjBI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAQX9mC,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAyBJ,OAtBW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAA+9B,UAAP,W,UACI,GAAqC,OAAjCh6C,KAAKic,QAAQqlC,gBAAjB,CAIA,IAAMsF,EAAuC,QAA5B,EAAA5mD,KAAKic,QAAQnJ,KAAK5H,kBAAU,eAAE27C,gBACzCC,EAA8C,QAAnC,EAAuB,QAAvB,EAAA9mD,KAAKic,QAAQnJ,KAAKkP,aAAK,eAAE9W,kBAAU,eAAE27C,gBACtD,GAAID,GAAYE,EAAU,CACtB,IAAMC,GAAUD,EAASC,OACrBH,EAASI,SAAWD,EAASH,EAASI,QAAQvkD,SAC9CzC,KAAKic,QAAQqlC,gBAAgBrY,SAAWjpC,KAAKic,QAAQqlC,gBAAgBrY,UAAY,CAAC,EAClFjpC,KAAKic,QAAQqlC,gBAAgBrY,SAASge,IAAML,EAASI,QAAQD,GAErE,CAVA,CAWJ,EACJ,EAjDA,GCdA,SAASG,GAAUxzC,EAAcC,EAAsBzM,EAAgBc,GACnE,OAAO,EAAAqrB,OAAOxf,UAAUF,EAAQzM,GAAQc,MAAMA,EAClD,CAMA,SAASm/C,GAASzzC,EAAcC,EAAsBzM,EAAgBc,GAClE,OAAO2L,EAAOzM,GAAUc,CAC5B,CAEA,SAASo/C,GAAc1zC,EAAcC,EAAsBzM,EAAgBc,GACvE,OAAQ2L,EAAOzM,GAAUc,CAC7B,CAEA,SAASq/C,GAAa3zC,EAAcC,EAAsBzM,EAAgBc,GACtE,OAAO2L,EAAOzM,EAAS,GAAKc,CAChC,CAEA,SAASs/C,GAAY5zC,EAAcC,EAAsBzM,EAAgBc,GACrE,OAAO2L,EAAOzM,GAAUc,EAAQ,CACpC,CAEA,SAASu/C,GAAwBC,GAC7B,MAAO,CACHx/C,MAAO,CACH,IAAIy/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,UAAG8xC,EAAW,WAAWL,IAAU,WAAM,YAC1G,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,UAAG8xC,EAAW,WAAWH,IAAc,WAAM,aAElHngD,OAAQ,CACJ,IAAIugD,GAA8B,EAAAjzC,UAAUkB,oBAAqB,UAAG8xC,EAAW,YAAYL,IAAU,WAAM,YAC3G,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,UAAG8xC,EAAW,YAAYH,IAAc,WAAM,aAEnHv/C,SAAU,CAAC,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,UAAG8xC,EAAW,SAASJ,IAAe,WAAM,aAEhI,CD6BAxlB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIoM,GAAgBpM,EAApB,IC5B9C,gC,8CAKA,QAL0C,aAE/B,YAAA/lC,gBAAP,SAAuBrP,EAAiB4O,EAAcI,EAAaC,GAC/D,MAAO,CAAC,CAAEM,kBAAmBvP,EAAOoD,eAAiB8L,iBAAkBvU,KAAKoU,gBAAgBH,EAAMI,EAAKC,IAC3G,EACJ,EALA,CAA0C,GAAAO,uBAO1C,4B,8CAYA,QAZ4C,aAEjC,YAAAH,gBAAP,SAAuBrP,EAAmB4O,EAAcI,EAAaC,GACjE,IAAMK,EAAuF,GAC7F,IAAK,IAAM7N,KAAYzB,EAAOwB,MAC1B8N,EAAkB9P,KAAK,CACnB+P,kBAAmBvP,EAAOwB,MAAOC,GAAUJ,gBAC3C6N,iBAAkBvU,KAAKoU,gBAAgBH,EAAMI,EAAKC,KAG1D,OAAOK,CACX,EACJ,EAZA,CAA4C,GAAAE,uBAc5C,4B,8CAKA,QALyC,aAE9B,YAAAH,gBAAP,SAAuBrP,EAAkC4O,EAAcI,EAAaC,GAChF,MAAO,CAAC,CAAEM,kBAAmBvP,EAAOiM,cAAgBiD,iBAAkBvU,KAAKoU,gBAAgBH,EAAMI,EAAKC,IAC1G,EACJ,EALA,CAAyC,GAAAO,wBAOzC,SAAuB,gCAAiC,CACpD,IAAI6yC,GAA4B,EAAAlzC,UAAUkB,oBAAqB,YAAa0xC,IAAe,WAAM,YACjG,IAAIM,GAA4B,EAAAlzC,UAAUkB,oBAAqB,aAAc2xC,IAAc,WAAM,eAGrG,SAAuB,gCAAiC,CACpD,IAAIK,GAA4B,EAAAlzC,UAAUkB,oBAAqB,cAAe0xC,IAAe,WAAM,YACnG,IAAIM,GAA4B,EAAAlzC,UAAUkB,oBAAqB,WAAY2xC,IAAc,WAAM,eAGnG,SAAuB,gCAAiC,CAAC,IAAIK,GAA4B,EAAAlzC,UAAUkB,oBAAqB,OAAQyxC,IAAU,WAAM,eAChJ,SAAuB,iCAAkC,CAAC,IAAIO,GAA4B,EAAAlzC,UAAUkB,oBAAqB,OAAQyxC,IAAU,WAAM,eAEjJ,SAAuB,+BAAgC,CAAC,IAAIO,GAA4B,EAAAlzC,UAAUkB,oBAAqB,MAAOyxC,IAAU,WAAM,eAC9I,SAAuB,+BAAgC,CAAC,IAAIO,GAA4B,EAAAlzC,UAAUkB,oBAAqB,OAAQyxC,IAAU,WAAM,eAC/I,SAAuB,gCAAiC,CAAC,IAAIO,GAA4B,EAAAlzC,UAAUkB,oBAAqB,OAAQyxC,IAAU,WAAM,eAGhJ,SAAuB,qDAAsD,CACzE,IAAIM,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,cAAeT,IAAW,WAAM,YAClG,IAAIO,GAA8B,EAAAjzC,UAAUkB,oBAAqB,SAlFrE,SAAkBhC,EAAcC,EAAsBzM,EAAgBc,GAClE,OAAO2L,EAAOzM,EAAS,GAAKc,CAChC,IAgFwF,WAAM,eAE9F,SAAuB,oDAAqD,CAAC,IAAIy/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,WAAYyxC,IAAU,WAAM,eAC1K,SAAuB,oDAAqD,CAAC,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,YAAayxC,IAAU,WAAM,cAC3K,IAAMS,GAAgCL,GAAwB,kBAC9D,SAAuB,6FAA8FK,GAA8B5/C,QACnJ,SAAuB,8FAA+F4/C,GAA8B1gD,SACpJ,SAAuB,gGAAiG0gD,GAA8B9/C,UAEtJ,IAAM+/C,GAAwCN,GAAwB,oBACtE,SAAuB,qEAAsEM,GAAsC7/C,QACnI,SAAuB,sEAAuE6/C,GAAsC3gD,SACpI,SAAuB,wEAAyE2gD,GAAsC//C,WAEtI,SAAuB,+BAAgC,CAAC,IAAI2/C,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,gBAAiBT,IAAW,WAAM,cAC5J,IAAMY,GAA6BP,GAAwB,gBAC3D,SAAuB,oCAAqC,CAAC,IAAIE,GAA8B,EAAAjzC,UAAUkB,oBAAqB,oBAAqByxC,IAAU,WAAM,eAEnK,SAAuB,qEAAsEW,GAA2B9/C,QACxH,SAAuB,sEAAuE8/C,GAA2B5gD,SACzH,SAAuB,wEAAyE4gD,GAA2BhgD,WAE3H,SAAuB,0CAA2C,CAAC,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,yBAA0ByxC,IAAU,WAAM,cAE9K,IAAMY,GAAgCR,GAAwB,mBAC9D,SAAuB,wEAAyEQ,GAA8B//C,QAC9H,SAAuB,yEAA0E+/C,GAA8B7gD,SAC/H,SAAuB,2EAA4E6gD,GAA8BjgD,UACjI,IAAMkgD,GAA+BT,GAAwB,oBAC7D,SAAuB,uEAAwES,GAA6BhgD,QAC5H,SAAuB,wEAAyEggD,GAA6B9gD,SAC7H,SAAuB,0EAA2E8gD,GAA6BlgD,WAG/H,SAAuB,uEAAwE,CAC3F,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,uBAAwByxC,IAAU,WAAM,eAE7G,SAAuB,uEAAwE,CAC3F,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,mBAAoByxC,IAAU,WAAM,cAEzG,IAAMc,GAAiCV,GAAwB,uBAC/D,SAAuB,6GAA8GU,GAA+BjgD,QACpK,SAAuB,8GAA+GigD,GAA+B/gD,SACrK,SAAuB,gHAAiH+gD,GAA+BngD,WACvK,SAAuB,mEAAoE,CACvF,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,sBAAuByxC,IAAU,WAAM,eAE5G,SAAuB,4EAA6E,CAChG,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,sBAAuByxC,IAAU,WAAM,cAE5G,IAAMe,GAAgCX,GAAwB,sBAC9D,SAAuB,2GAA4GW,GAA8BlgD,QACjK,SAAuB,4GAA6GkgD,GAA8BhhD,SAClK,SAAuB,8GAA+GghD,GAA8BpgD,UACpK,IAAMqgD,GAAsCZ,GAAwB,0BACpE,SAAuB,gFAAiF,CACpG,IAAIE,GAA8B,EAAAjzC,UAAUkB,oBAAqB,8BAA+ByxC,IAAU,WAAM,eAEpH,SAAuB,iHAAkHgB,GAAoCngD,QAC7K,SACI,kHACAmgD,GAAoCjhD,SAExC,SACI,oHACAihD,GAAoCrgD,UAExC,IAAMsgD,GAAyCb,GAAwB,+BACvE,SACI,oHACAa,GAAuCpgD,QAE3C,SACI,qHACAogD,GAAuClhD,SAE3C,SACI,uHACAkhD,GAAuCtgD,WAG3C,SAAuB,qEAAsE,CACzF,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,wBAAyByxC,IAAU,WAAM,eAE9G,SAAuB,4EAA6E,CAChG,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,oBAAqByxC,IAAU,WAAM,eAE1G,SAAuB,iDAAkD,CACrE,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,oBAAqByxC,IAAU,WAAM,eAE1G,SAAuB,uEAAwE,CAC3F,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,wBAAyByxC,IAAU,WAAM,eAE9G,SAAuB,oEAAqE,CACxF,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,gCAAiCyxC,IAAU,WAAM,eAEtH,SAAuB,iFAAkF,CACrG,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,+BAAgCyxC,IAAU,WAAM,eAErH,SAAuB,iFAAkF,CACrG,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,+BAAgCyxC,IAAU,WAAM,cAGrH,IAAMkB,GAAkCd,GAAwB,wBAChE,SAAuB,+GAAgHc,GAAgCrgD,QACvK,SAAuB,gHAAiHqgD,GAAgCnhD,SACxK,SAAuB,kHAAmHmhD,GAAgCvgD,UAE1K,IAAMwgD,GAA2Cf,GAAwB,iCACzE,SACI,wHACAe,GAAyCtgD,QAE7C,SACI,yHACAsgD,GAAyCphD,SAE7C,SACI,2HACAohD,GAAyCxgD,WAG7C,SAAuB,gEAAiE,CACpF,IAAI2/C,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,cAAeT,IAAW,WAAM,eAEtG,SAAuB,oEAAqE,CACxF,IAAIO,GAA8B,EAAAjzC,UAAUkB,oBAAqB,kBAAmByxC,IAAU,WAAM,cAGxG,IAAMoB,GAA4BhB,GAAwB,kBAC1D,SAAuB,wGAAyGgB,GAA0BvgD,QAC1J,SAAuB,yGAA0GugD,GAA0BrhD,SAC3J,SAAuB,2GAA4GqhD,GAA0BzgD,UAE7J,IAAM0gD,GAAqCjB,GAAwB,2BACnE,SAAuB,4GAA6GiB,GAAmCxgD,QACvK,SAAuB,6GAA8GwgD,GAAmCthD,SACxK,SAAuB,+GAAgHshD,GAAmC1gD,WAE1K,SAAuB,iEAAkE,CACrF,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,mBAAoByxC,IAAU,WAAM,eAEzG,SAAuB,sEAAuE,CAC1F,IAAIM,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,2BAA4BT,IAAW,WAAM,cAGnH,IAAMuB,GAA+BlB,GAAwB,+BAC7D,SAAuB,yGAA0GkB,GAA6BzgD,QAC9J,SAAuB,0GAA2GygD,GAA6BvhD,SAC/J,SAAuB,4GAA6GuhD,GAA6B3gD,UACjK,IAAM4gD,GAAoCnB,GAAwB,uBAClE,SAAuB,8GAA+GmB,GAAkC1gD,QACxK,SAAuB,+GAAgH0gD,GAAkCxhD,SACzK,SACI,iHACAwhD,GAAkC5gD,WAGtC,SAAuB,yEAA0E,CAC7F,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,iCAAkCyxC,IAAU,WAAM,cAEvH,IAAMwB,GAAmCpB,GAAwB,0CACjE,SAAuB,iHAAkHoB,GAAiC3gD,QAC1K,SAAuB,kHAAmH2gD,GAAiCzhD,SAC3K,SACI,oHACAyhD,GAAiC7gD,WAGrC,SAAuB,iEAAkE,CACrF,IAAI2/C,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,uBAAwBT,IAAW,WAAM,eAG/G,SAAuB,oEAAqE,CACxF,IAAIO,GAA8B,EAAAjzC,UAAUkB,oBAAqB,iCAAkCyxC,IAAU,WAAM,eAEvH,SAAuB,gEAAiE,CACpF,IAAIM,GAA8B,EAAAjzC,UAAUkB,oBAAqB,8BAA+ByxC,IAAU,WAAM,cAGpH,IAAMyB,GAAgCrB,GAAwB,gCAC9D,SAAuB,wGAAyGqB,GAA8B5gD,QAC9J,SAAuB,yGAA0G4gD,GAA8B1hD,SAC/J,SAAuB,2GAA4G0hD,GAA8B9gD,WAEjK,SAAuB,wFAAyF,CAC5G,IAAI2/C,GAA8B,EAAAjzC,UAAUkB,oBAAqB,mCAAoCyxC,IAAU,WAAM,cAGzH,IAAM0B,GAA0CtB,GAAwB,4CACxE,SACI,+HACAsB,GAAwC7gD,QAE5C,SACI,gIACA6gD,GAAwC3hD,SAE5C,SACI,kIACA2hD,GAAwC/gD,WAG5C,SAAuB,6FAA8F,CACjH,IAAI2/C,GAA8B,EAAAjzC,UAAUmzC,qBAAsB,+BAAgCT,IAAW,WAAM,cAGvH,IAAM4B,GAA+CvB,GAAwB,wCAC7E,SACI,oIACAuB,GAA6C9gD,QAEjD,SACI,qIACA8gD,GAA6C5hD,SAEjD,SACI,uIACA4hD,GAA6ChhD,WAGjD,SAAuB,kDAAmD,CAAC,IAAIihD,GAA2B,EAAAv0C,UAAUmzC,qBAAsB,UAAWT,IAAW,WAAM,eACtK,SAAuB,sDAAuD,CAAC,IAAI6B,GAA2B,EAAAv0C,UAAUkB,oBAAqB,YAAayxC,IAAU,WAAM,eAC1K,SAAuB,kDAAmD,CAAC,IAAI4B,GAA2B,EAAAv0C,UAAUkB,oBAAqB,QAASyxC,IAAU,WAAM,eAClK,SAAuB,gEAAiE,CACpF,IAAI4B,GAA2B,EAAAv0C,UAAUkB,oBAAqB,aAAc4xC,IAAa,WAAM,eAEnG,SAAuB,gEAAiE,CACpF,IAAIyB,GAA2B,EAAAv0C,UAAUkB,oBAAqB,QAAS4xC,IAAa,WAAM,eAG9F,SAAuB,4CAA6C,CAAC,IAAIyB,GAA2B,EAAAv0C,UAAUmzC,qBAAsB,UAAWT,IAAW,WAAM,eAChK,SAAuB,iDAAkD,CAAC,IAAI6B,GAA2B,EAAAv0C,UAAUkB,oBAAqB,YAAayxC,IAAU,WAAM,cCzTrK,IAAM,GAAO,wBAkBb,cAYI,WAAY1M,GARI,KAAAxmC,KAAO,GASnBjU,KAAKic,QAAUw+B,EACfz6C,KAAKgpD,wBAAyB,SAAyBhpD,KAAKic,QAAQnJ,KACxE,CAwEJ,OAnEI,sBAAW,sBAAO,C,IAAlB,WACI,OAAO9S,KAAKic,QAAQ2qB,gBAAgB,GACxC,E,gCAGO,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,YACjBjc,KAAKgpD,sBAChB,EAWO,YAAA5Y,2BAAP,SACIrO,EACAyO,EACAj+B,EACAib,EACAmR,G,MAEMlB,EAAqC,QAAzB,EAAAjQ,EAAQnoB,OAAO6F,kBAAU,eAAE+9C,sBAC7C,IAAKxrB,IAAcz9B,KAAKgpD,uBACpB,OAAO,KAGiB,YAAxBx7B,EAAQnoB,OAAOH,MACf,EAAA6Z,OAAOC,KAAK,UAAG+iB,EAAO,gCAAwBvU,EAAQnoB,OAAOH,KAAI,4DAAoElF,KAAKiU,KAAI,eAGvH3O,MAAvBkoB,EAAQnoB,OAAOqE,MACf,EAAAqV,OAAOC,KAAK,UAAG+iB,EAAO,gCAAwBvU,EAAQnoB,OAAOqE,KAAI,gDAAwC1J,KAAKiU,KAAI,eAGtH,IAAMymC,EAAmB,UAAG3Y,EAAO,uBAAe/hC,KAAKiU,MAEjD4jC,EAAUpa,EAAUoa,QAC1B,IAAKA,EACD,MAAM,IAAIryC,MAAM,UAAGk1C,EAAgB,yBAGvC,IACI,IAAMvkC,EAAMnW,KAAKgpD,uBAAuB/jD,QAAQ4yC,GAChD,IAAK1hC,EAAI/P,KAAKkN,cACV,MAAM,IAAI9N,MAAM,UAAGk1C,EAAgB,uCAEvC,OAAO16C,KAAKic,QAAQ60B,yCAChB/O,EACAyO,EACAj+B,EACAib,EACA,CACIrnB,OAAQgQ,EAAIhQ,OACZC,KAAM+P,EAAI/P,KAAKkN,eAEnBqrB,EAER,CAAE,MAAOp7B,GAEL,OADA,EAAAwb,OAAOC,KAAK,UAAG07B,EAAgB,sCAA8B7C,EAAO,cAC7D,IACX,CACJ,EACJ,EAvFA,GAyFAjW,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIwO,GAAsBxO,EAA1B,ICxG9C,IAAM,GAAO,qBAyCb,cAkBI,WAAYA,GAdI,KAAAxmC,KAAO,GAenBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA8OJ,OA3OW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,KACvBjc,KAAKkpD,OAAiB,KACtBlpD,KAAKmpD,UAAoB,IAC9B,EAGO,YAAAnP,UAAP,WACI,IAAM9uC,EAAalL,KAAKic,QAAQnJ,KAAK5H,WACrC,GAAIA,GAAcA,EAAWlL,KAAKiU,MAAO,CACrC,IAAMwpB,EAAYvyB,EAAWlL,KAAKiU,MAElCjU,KAAKkpD,OAASzrB,EAAU2rB,MACxBppD,KAAKmpD,UAAY1rB,EAAU4rB,SAE3BjkB,GAAUlD,OAAOliC,KAAKkpD,QACtB9jB,GAAUlD,OAAOliC,KAAKmpD,UAC1B,CACJ,EAKO,YAAAhkB,eAAP,SAAsBpD,EAAiBxjB,GAAvC,WACI,OAAO,GAAW47B,mBAAwDpY,EAASxjB,EAAOve,KAAKiU,MAAM,SAACymC,EAAkBjd,GACpH,IAAMuH,EAAW,IAAIxjC,MAErBwjC,EAASngC,KAAK,EAAKoX,QAAQkpB,eAAepD,EAASxjB,IAEnD,IAA2B,UAAAkf,EAAU4rB,SAAV,eAAoB,CAA1C,IAAMC,EAAY,KACbC,EAAUnkB,GAAUtD,IAAI,UAAG4Y,EAAgB,aAAa,EAAKyO,UAAWG,GAC9E,GAC2BhkD,MAAvBikD,EAAQC,aACelkD,MAAvBikD,EAAQE,aACiBnkD,MAAzBikD,EAAQG,eACiBpkD,MAAzBikD,EAAQI,eACcrkD,MAAtBikD,EAAQ33C,YACctM,MAAtBikD,EAAQK,WAER,MAAM,IAAIpkD,MAAM,UAAGk1C,EAAgB,uFAGvC1V,EAASngC,KAAK,EAAKglD,kBAAkB,UAAGnP,EAAgB,qBAAa6O,EAAQphD,OAASohD,GAC1F,CAEA,OAAOvmD,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAAO,GAC7C,GACJ,EAKO,YAAA4jC,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAO,GAAW+3C,mBAAuEpY,EAASr4B,EAAM1J,KAAKiU,MAAM,SAACymC,EAAkBjd,GAClI,IAAMuH,EAAW,IAAIxjC,MAErB,OAAO,EAAKya,QACPsrB,cAAcmT,EAAkBhxC,GAAM,SAACwL,GACpC,I,eAAWo0C,GACP,IAAMC,EAAUnkB,GAAUtD,IAAI,UAAG4Y,EAAgB,aAAa,EAAKyO,UAAWG,GAC9EtkB,EAASngC,KACL,EAAKglD,kBAAkB,UAAGnP,EAAgB,qBAAa6O,EAAQphD,OAASohD,GAAS5lD,MAAK,WAClF,IAAoB,UAAA4lD,EAAQO,eAAR,eAAwB,CAAvC,IAAMC,EAAK,KACZA,EAAMC,aAAa90C,GACO5P,MAAtBikD,EAAQ33C,YAAiDtM,MAAtBikD,EAAQK,aAC3CG,EAAME,wBAAwB,EAAAr2C,QAAQs2C,WACtCH,EAAMI,mBACF,EAAI,EAAAxwC,MAAMywC,UAAgC9kD,MAAtBikD,EAAQ33C,WAA0B4uB,KAAKC,GAAK8oB,EAAQ33C,YACxE,EAAI,EAAA+H,MAAMywC,UAAgC9kD,MAAtBikD,EAAQK,WAA0BppB,KAAKC,GAAK8oB,EAAQK,YACxE,GAGZ,CACJ,I,EAfmB,MAAAnsB,EAAU4rB,SAAV,e,EAAJ,MAmBvBjnD,EAAO8S,EACX,IACCvR,MAAK,SAACuR,GACH,OAAOlS,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAOuR,CACX,GACJ,GACR,GACJ,EAKO,YAAA46B,mBAAP,SAA0B/N,EAAiBxvB,GAA3C,WACI,OAAO,GAAW4nC,mBAA2DpY,EAASxvB,EAAWvS,KAAKiU,MAAM,SAACymC,EAAkBjd,GAC3H,OAAO,EAAKxhB,QAAQ6zB,mBAAmB/N,EAASxvB,GAAW5O,MAAK,SAACwsC,GAC7D,IAAMnL,EAAW,IAAIxjC,MAErB4jC,GAAUlD,OAAOzE,EAAU4sB,QAC3B,IAAoB,UAAA5sB,EAAU4sB,OAAV,eAAkB,CAAjC,IAAM,EAAK,KACZrlB,EAASngC,KAAK,EAAKylD,yBAAyB,UAAG5P,EAAgB,mBAAW,EAAMvyC,OAAS45B,EAASxvB,EAAW,EAAO49B,GACxH,CAEA,OAAOntC,QAAQ6iC,IAAIb,GAAUrhC,MAAK,WAC9B,OAAOwsC,CACX,GACJ,GACJ,GACJ,EAEQ,YAAAoa,eAAR,SAAuBxoB,EAAiByoB,GACpC,GAAIA,EAAKC,WACL,OAAOD,EAAKC,WAGhB,IAAI5gB,EACJ,GAAI2gB,EAAK9yC,IACLmyB,EAAU7pC,KAAKic,QAAQu1B,aAAazP,EAASyoB,EAAMA,EAAK9yC,SACrD,CACH,IAAMkS,EAAawb,GAAUtD,IAAI,UAAGC,EAAO,eAAe/hC,KAAKic,QAAQnJ,KAAK2X,YAAa+/B,EAAK5gC,YAC9FigB,EAAU7pC,KAAKic,QAAQw1B,oBAAoB,uBAAgB7nB,EAAWzhB,OAASyhB,EACnF,CAMA,OAJA4gC,EAAKC,WAAa5gB,EAAQlmC,MAAK,SAACyT,GAC5B,OAAO4B,IAAIC,gBAAgB,IAAIC,KAAK,CAAC9B,GAAO,CAAEhQ,KAAMojD,EAAKlwC,WAC7D,IAEOkwC,EAAKC,UAChB,EAEQ,YAAAZ,kBAAR,SAA0B9nB,EAAiBwnB,GAA3C,WAEI,GADAA,EAAQO,eAAiBP,EAAQO,gBAAkB,IAC9CP,EAAQmB,aAAc,CASvB,IARA,IAAMC,EAAe,IAAInpD,MACnB,EAAO+nD,EAAQt1C,MAAQ,iBAAUs1C,EAAQphD,OACzC,EAAU,CACZyiD,MAAM,EACNC,UAAU,EACVC,OAA0BxlD,MAAlBikD,EAAQuB,OAAsB,EAAIvB,EAAQuB,Q,WAG7CvoD,GACL,IAAMwoD,EAAc,sBAAe,EAAK92C,KAAI,UACtCu2C,EAAOplB,GAAUtD,IAAIipB,EAAa,EAAK7B,OAAQK,EAAQH,MAAM7mD,GAAGioD,MACtEG,EAAa9lD,KACT,EAAK0lD,eAAe,UAAGQ,EAAW,YAAIxB,EAAQH,MAAM7mD,GAAGioD,MAAQA,GAAM7mD,MAAK,SAACqnD,GACvE,IAAMjB,EAASR,EAAQO,eAAevnD,GAAK,IAAI,EAAA0oD,MAAM,EAAMD,EAAW,EAAK/uC,QAAQ2+B,aAAc,KAAM,GACvGmP,EAAMP,YAAcD,EAAQC,aAAe,EAC3CO,EAAMN,YAAcF,EAAQE,aAAe,IAC3CM,EAAML,cAAgBH,EAAQG,eAAiB,EAC/CK,EAAMJ,cAAgBJ,EAAQI,eAAiB,aACnD,I,SAVCpnD,EAAI,EAAGA,EAAIgnD,EAAQH,MAAM3mD,OAAQF,I,EAAjCA,GAcT,IAAMsnC,EAAU7mC,QAAQ6iC,IAAI8kB,GAAchnD,MAAK,WAC3C,IAAMqG,EAAUu/C,EAAQH,MAAM5oD,KAAI,SAACgqD,GAC/B,OAAOA,EAAK/d,QAAU,CAC1B,IACMye,EAAgB,IAAI,EAAAC,cAAc5B,EAAQqB,OAAQ,EAAOrB,EAAQO,eAAgB9/C,GACnFu/C,EAAQ33C,aACRs5C,EAAcE,0BAA4B,EAAI,EAAAzxC,MAAMywC,UAAUb,EAAQ33C,aAEtE23C,EAAQK,aACRsB,EAAcG,0BAA4B,EAAI,EAAA1xC,MAAMywC,UAAUb,EAAQK,aAEtEL,EAAQuB,SACRI,EAAcJ,OAASvB,EAAQuB,QAEnCvB,EAAQmB,aAAcX,MAAQmB,CAClC,IAEA3B,EAAQmB,aAAe,CACnB9oC,OAAQioB,EAEhB,CAEA,OAAO0f,EAAQmB,aAAa9oC,MAChC,EAEQ,YAAA0pC,gBAAR,SACIvpB,EACAgoB,EACAviB,EACA+jB,EACAC,GAEA,OAAQhkB,GACJ,IAAK,OACD,OAAO,SAACikB,GACJ,IAAMC,GAAeF,GAAe,IAAMC,EAAeF,GACzDxB,EAAM4B,KAAKD,EACf,EAEJ,IAAK,OACD,OAAO,WACH3B,EAAM6B,MACV,EAEJ,IAAK,QACD,OAAO,WACH7B,EAAM8B,OACV,EAEJ,QACI,MAAM,IAAIrmD,MAAM,UAAGu8B,EAAO,gCAAwByF,IAG9D,EAEQ,YAAA8iB,yBAAR,SACIvoB,EACAyO,EACAj+B,EACA+O,EACA6uB,GALJ,WAOI,GAAuD,GAAnDA,EAAsBH,mBAAmBvtC,OACzC,OAAOO,QAAQC,UAEnB,IAAMsR,EAAmB47B,EAAsBH,mBAAmB,GAC5DsZ,EAAehoC,EAAMioC,QACrBA,EAAUnkB,GAAUtD,IAAI,sBAAe9hC,KAAKiU,KAAI,aAAajU,KAAKmpD,UAAWG,GACnF,OAAOtpD,KAAK6pD,kBAAkB9nB,EAASwnB,GAAS5lD,MAAK,WACjD,IAAMomD,EAAQR,EAAQmB,aAAcX,MACpC,GAAIA,EAAO,CACP,IAAM+B,EAAwB,IAAI,EAAAC,eAAezqC,EAAMiqC,KAAM,EAAKD,gBAAgBvpB,EAASgoB,EAAOzoC,EAAMkmB,OAAQlmB,EAAMiqC,KAAMjqC,EAAMkqC,cAClIj3C,EAAiBhC,UAAUy5C,SAASF,GAEpC3b,EAAsB8b,8BAA8BhvC,KAAI,WACpD8sC,EAAM6B,MACV,IACAzb,EAAsB+b,gCAAgCjvC,KAAI,WACtD8sC,EAAM8B,OACV,GACJ,CACJ,GACJ,EACJ,EAnQA,GAqQAjqB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI0R,GAAmB1R,EAAvB,ICpT9C,IAAM,GAAO,WA4Bb,cAoDI,WAAYA,G,QAhDI,KAAAxmC,KAAO,GAUhB,KAAA6yB,MAAQ,IAKR,KAAAslB,cAAgB,GAOhB,KAAAC,2BAA6B,IAAI,EAAAhxC,WAOjC,KAAAixC,+BAAiC,IAAI,EAAAjxC,WAIpC,KAAAkxC,YAAc,IAAI/qD,MAElB,KAAAgrD,cAAkC,KAClC,KAAAC,gBAAkB,IAAIjrD,MACtB,KAAAkrD,iBAAmB,IAAIlrD,MACvB,KAAAmrD,gBAAkB,IAAInrD,MAEtB,KAAAorD,kBAAsC,KACtC,KAAAC,oBAAsB,IAAIrrD,MAC1B,KAAAsrD,qBAAuB,IAAItrD,MAC3B,KAAAurD,oBAAsB,IAAIvrD,MAM9BxB,KAAKic,QAAUw+B,EAGfz6C,KAAKosD,cAAyE,QAAzD,EAA0C,QAA1C,EAAApsD,KAAKic,QAAQtR,OAAOqb,iBAAiB,WAAK,eAAEomC,qBAAa,QAAIpsD,KAAKosD,cACvFpsD,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA+UJ,OA5UW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,KAExBjc,KAAKwsD,cAAgB,KACrBxsD,KAAKysD,gBAAgBhqD,OAAS,EAC9BzC,KAAK0sD,iBAAiBjqD,OAAS,EAC/BzC,KAAK2sD,gBAAgBlqD,OAAS,EAE9BzC,KAAK4sD,kBAAoB,KACzB5sD,KAAK6sD,oBAAoBpqD,OAAS,EAClCzC,KAAK8sD,qBAAqBrqD,OAAS,EACnCzC,KAAK+sD,oBAAoBtqD,OAAS,EAElCzC,KAAKssD,+BAA+BluC,QACpCpe,KAAKqsD,2BAA2BjuC,OACpC,EAGO,YAAA67B,QAAP,WACI,IADJ,W,WACa+S,GACL,IAAMnjB,EAAU7mC,QAAQ6iC,IAAI,EAAK6mB,iBAAiBM,IAAWrpD,MAAK,WAC7C,IAAbqpD,IACA,EAAK/wC,QAAQs+B,sBAAsB,mBAAYyS,IAC/C,EAAK/wC,QAAQy7B,IAAI,0BAAmBsV,KAGxC,EAAKX,2BAA2BhuC,gBAAgB2uC,GAE5CA,IAAa,EAAKN,iBAAiBjqD,OAAS,IAC5C,EAAKwZ,QAAQq+B,wBAAwB,mBAAY0S,EAAW,IAC5D,EAAKC,eAAe,EAAKN,gBAAiBK,EAAW,GACjD,EAAKP,gBAAgBO,IACrB,EAAKP,gBAAgBO,GAAU/pD,UAG3C,IAEA,EAAKgZ,QAAQ+mB,kBAAkBn+B,KAAKglC,E,SAlB/BmjB,EAAW,EAAGA,EAAWhtD,KAAK0sD,iBAAiBjqD,OAAQuqD,I,EAAvDA,G,eAqBAA,GACL,IAAMnjB,EAAU7mC,QAAQ6iC,IAAI,EAAKinB,qBAAqBE,IAAWrpD,MAAK,WACjD,IAAbqpD,IACA,EAAK/wC,QAAQs+B,sBAAsB,uBAAgByS,IACnD,EAAK/wC,QAAQy7B,IAAI,8BAAuBsV,KAG5C,EAAKV,+BAA+BjuC,gBAAgB2uC,GAEhDA,IAAa,EAAKF,qBAAqBrqD,OAAS,IAChD,EAAKwZ,QAAQq+B,wBAAwB,uBAAgB0S,EAAW,IAChE,EAAKC,eAAe,EAAKF,oBAAqBC,EAAW,GACrD,EAAKH,oBAAoBG,IACzB,EAAKH,oBAAoBG,GAAU/pD,UAG/C,IAEA,EAAKgZ,QAAQ+mB,kBAAkBn+B,KAAKglC,E,SAlBxC,IAASmjB,EAAW,EAAGA,EAAWhtD,KAAK8sD,qBAAqBrqD,OAAQuqD,I,EAA3DA,EAoBb,EAKO,YAAA7nB,eAAP,SAAsBpD,EAAiBxjB,GACnC,IAAMsrB,EAAU7pC,KAAKic,QAAQkpB,eAAepD,EAASxjB,GAErD,OADAve,KAAKitD,eAAejtD,KAAKusD,YAAa,GAC/B1iB,CACX,EAKO,YAAAtC,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAO,GAAW+3C,mBAA4CpY,EAASr4B,EAAM1J,KAAKiU,MAAM,SAACymC,EAAkBjd,GACvG,IAAIyvB,EAEEC,EAAW,EAAKC,SAAS1S,EAAkBhxC,EAAM,EAAKuS,QAAQnJ,KAAKjS,MAAO48B,EAAU4vB,KAC1F,EAAKpxC,QAAQqrB,QAAQ,UAAGoT,IAExB,I,eAASsS,GACL,IAAMM,EAAUH,EAASH,GAER,IAAbA,IACA,EAAKR,cAAgBQ,EACrB,EAAKP,gBAAgBO,GAAY,EAAKP,gBAAgBO,IAAa,IAAI,EAAAxW,UAG3E,IAKM3M,EAAU,EAAK5tB,QAAQsrB,cAAc,iBAAU+lB,EAAQnlD,OAASmlD,GALnD,SAACllB,GAChBhmC,EAAOgmC,GACPA,EAAqBtC,YAAW,EACpC,IAE2FniC,MAAK,SAACuR,GAC7F,GAAiB,IAAb83C,EAAgB,CAEhB,IAAMO,EAAkBJ,EAASH,EAAW,GACxCO,EAAgBxsD,wBAChB,EAAKysD,sBAAsBD,EAAgBxsD,8BACpCwsD,EAAgBxsD,sBAE/B,CAGA,OADAmU,EAAY4wB,YAAW,GAChB5wB,CACX,IAEA,EAAKw3C,iBAAiBM,GAAY,EAAKN,iBAAiBM,IAAa,GAEpD,IAAbA,EACAE,EAAerjB,GAEf,EAAK2iB,cAAgB,KACrB,EAAKE,iBAAiBM,GAAUnoD,KAAKglC,G,EAjCpCmjB,EAAW,EAAGA,EAAWG,EAAS1qD,OAAQuqD,I,EAA1CA,GAsCT,OADA,EAAK/wC,QAAQyrB,WACNwlB,CACX,GACJ,EAKO,YAAA1nB,mBAAP,SACIzD,EACAz7B,EACA4O,EACAowB,EACAljC,GALJ,WAQI,OAAIpC,KAAKwsD,cACE,KAGJ,GAAWrS,mBAAuCpY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACymC,EAAkBjd,GACtG,IAAIyvB,EAEEO,EAAe,EAAKL,SAAS1S,EAAkBp0C,EAAU,EAAK2V,QAAQnJ,KAAKlH,UAAW6xB,EAAU4vB,KACtG,EAAKpxC,QAAQqrB,QAAQ,UAAGoT,IAExB,I,eAASsS,GACL,IAAMU,EAAcD,EAAaT,GAEhB,IAAbA,IACA,EAAKJ,kBAAoBI,GAG7B,IAAMnjB,EAAU,EAAK5tB,QAChBupB,mBAAmB,qBAAckoB,EAAYvlD,OAASulD,EAAax4C,EAAaowB,GAAiB,SAAC5+B,GAC9E,IAAbsmD,GACA5qD,EAAOsE,EAEf,IACC/C,MAAK,SAAC+C,GACH,GAAiB,IAAbsmD,EAAgB,CAChB5qD,EAAOsE,GAGP,IAAMinD,EAAkBF,EAAaT,EAAW,GAAGnmD,MAC/C8mD,EAAgBroB,KAChB,EAAKsoB,kBAAkB,CAACD,EAAgBroB,GAAiB5+B,yBAClDinD,EAAgBroB,GAE/B,CAEA,OAAO5+B,CACX,IAEJ,EAAKomD,qBAAqBE,GAAY,EAAKF,qBAAqBE,IAAa,GAE5D,IAAbA,EACAE,EAAerjB,GAEf,EAAK+iB,kBAAoB,KACzB,EAAKE,qBAAqBE,GAAUnoD,KAAKglC,G,EAlCxCmjB,EAAW,EAAGA,EAAWS,EAAahrD,OAAQuqD,I,EAA9CA,GAuCT,OADA,EAAK/wC,QAAQyrB,WACNwlB,CACX,GACJ,EAKO,YAAAhT,cAAP,SAAqBnY,EAAiBuV,EAAqB5/B,GAA3D,WAEI,GAA2B,OAAvB1X,KAAKwsD,cAAwB,CAC7BxsD,KAAKic,QAAQy7B,IAAI,YACjB,IAAMmW,EAAmB7tD,KAAKwsD,cAAgB,EAE9C,OADAxsD,KAAKysD,gBAAgBoB,GAAoB7tD,KAAKysD,gBAAgBoB,IAAqB,IAAI,EAAArX,SAChFx2C,KAAKysD,gBAAgBzsD,KAAKwsD,cAAgB,GAAG3iB,QAAQlmC,MAAK,WAC7D,OAAO,EAAKsY,QAAQu1B,aAAazP,EAASuV,EAAU5/B,EACxD,GACJ,CAAO,OAA+B,OAA3B1X,KAAK4sD,mBACZ5sD,KAAKic,QAAQy7B,IAAI,YACXmW,EAAmB7tD,KAAK4sD,kBAAoB,EAClD5sD,KAAK6sD,oBAAoBgB,GAAoB7tD,KAAK6sD,oBAAoBgB,IAAqB,IAAI,EAAArX,SACxFx2C,KAAK6sD,oBAAoBgB,GAAkBhkB,QAAQlmC,MAAK,WAC3D,OAAO,EAAKsY,QAAQu1B,aAAazP,EAASuV,EAAU5/B,EACxD,KAGG,IACX,EAKO,YAAAunB,gBAAP,SAAuB8C,EAAiBvoB,EAAiBiB,EAAoBC,GACzE,GAAI1a,KAAKic,QAAQtR,OAAOmU,mBAAqBtF,EAAO9B,IAAK,CACrD,IAAK1X,KAAKic,QAAQ0H,IACd,MAAM,IAAIne,MAAM,UAAGu8B,EAAO,oEAG9B,IAAM9hB,EAAY,SAAC6tC,EAAgCd,GAC/C,IAAMhlB,EAAQvtB,EACRszC,EAAM/lB,EAAQttB,EAAa,EAC7BszC,EAAYF,EAAWd,GAS3B,OARIgB,GACAA,EAAUhmB,MAAQxH,KAAK4B,IAAI4rB,EAAUhmB,MAAOA,GAC5CgmB,EAAUD,IAAMvtB,KAAK6B,IAAI2rB,EAAUD,IAAKA,KAExCC,EAAY,CAAEhmB,MAAOA,EAAO+lB,IAAKA,EAAKnsC,OAAQ,IAAI,EAAA40B,UAClDsX,EAAWd,GAAYgB,GAGpBA,EAAUpsC,OAAOioB,QAAQlmC,MAAK,SAACyT,GAClC,OAAO,IAAIuD,WAAWvD,EAAKoC,OAAQpC,EAAKqD,WAAaA,EAAauzC,EAAUhmB,MAAOttB,EACvF,GACJ,EAIA,OAFA1a,KAAKic,QAAQy7B,IAAI,YAEU,OAAvB13C,KAAKwsD,cACEvsC,EAAUjgB,KAAK2sD,gBAAiB3sD,KAAKwsD,eACV,OAA3BxsD,KAAK4sD,kBACL3sC,EAAUjgB,KAAK+sD,oBAAqB/sD,KAAK4sD,mBAEzC3sC,EAAUjgB,KAAKusD,YAAa,EAE3C,CAEA,OAAO,IACX,EAEQ,YAAAU,eAAR,SAAuBa,EAAgCd,GACnD,IAAMgB,EAAYF,EAAWd,GACzBgB,IACAhuD,KAAKic,QAAQy7B,IAAI,gCAAyBsW,EAAUhmB,MAAK,YAAIgmB,EAAUD,IAAG,MAC1E/tD,KAAKic,QAAQ0H,IAAKpJ,UAAUyzC,EAAUhmB,MAAOgmB,EAAUD,IAAMC,EAAUhmB,MAAQ,GAAGrkC,MAC9E,SAACyT,GACG42C,EAAUpsC,OAAO3e,QAAQmU,EAC7B,IACA,SAACiC,GACG20C,EAAUpsC,OAAO1e,OAAOmW,EAC5B,IAGZ,EASQ,YAAA+zC,SAAR,SAAoBrrB,EAAiBuV,EAAatV,EAAiCqrB,GAC/E,GAAIrtD,KAAKosD,eAAiB,EACtB,MAAM,IAAI5mD,MAAM,2CAKpB,IAFA,IAAMorC,EAAkB,GAEfruC,EAAI8qD,EAAI5qD,OAAS,EAAGF,GAAK,EAAGA,IAEjC,GADAquC,EAAW/rC,KAAKugC,GAAUtD,IAAI,UAAGC,EAAO,gBAAQsrB,EAAI9qD,IAAMy/B,EAAOqrB,EAAI9qD,KACjEquC,EAAWnuC,SAAWzC,KAAKosD,cAC3B,OAAOxb,EAKf,OADAA,EAAW/rC,KAAKyyC,GACT1G,CACX,EAEQ,YAAA4c,sBAAR,SAA8BplB,GAA9B,WACU6lB,EAA+B,GAC/BvnD,EAAmB0hC,EAA8B9hC,SACnDI,GACAunD,EAAiBppD,KAAK6B,GAE1B,IAA0B,UAAA0hC,EAAqB8lB,iBAArB,eAAuC,CAA5D,IAAMh5C,EAAW,KACdA,EAAY5O,UACZ2nD,EAAiBppD,KAAKqQ,EAAY5O,SAE1C,CAEA8hC,EAAqBpqB,UAErB,IAAMmwC,EAA4BF,EAAiBpR,QAAO,SAACn2C,GAAoB,SAAKuV,QAAQ2+B,aAAapoC,OAAO47C,OAAM,SAAC37C,GAAS,OAAAA,EAAKnM,UAAYI,CAAjB,GAAjD,IAC/E1G,KAAK4tD,kBAAkBO,EAC3B,EAEQ,YAAAP,kBAAR,SAA0BK,GAGtB,IAFA,IAAMI,EAAuD,CAAC,EAEhC,MAAAJ,EAAA,eAAkB,CAC5C,IADC,IAC4B,OADtBvnD,EAAe,MACuB4nD,oBAAhB,eAAqC,CAA7D,IAAMv1B,EAAc,KACrBs1B,EAAgBt1B,EAAe6kB,UAAY7kB,CAC/C,CAEAryB,EAAgBsX,SACpB,CAEA,IAAK,IAAM4/B,KAAYyQ,EACnB,IAA8B,UAAAruD,KAAKic,QAAQ2+B,aAAahvC,UAA1B,eAAqC,CAA9D,IAAMlF,KAAe,MACF6nD,WAAWF,EAAgBzQ,YACpCyQ,EAAgBzQ,EAE/B,CAGJ,IAAK,IAAMA,KAAYyQ,EACnBA,EAAgBzQ,GAAU5/B,SAElC,EACJ,EAzYA,GA2YA4jB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI+T,GAAS/T,EAAb,IC5a9C,IAAM,GAAO,qBAeb,cAUI,WAAYA,GARI,KAAAxmC,KAAO,GASnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CA+BJ,OA5BW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAGO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAW0zC,eAAwBrY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACw6C,EAAcpU,GACnF,GAAIA,EAAO,CACP,KAAM3zC,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGipD,EAAY,kCAGnC,IAAM5kB,EAAU,EAAK5tB,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,GAU5E,OARIA,EAAgB6kB,sBAChB7kB,EAAgBgoD,iBAAkB,EAClChoD,EAAgBioD,qBAAsB,GAG1CjoD,EAAgB81B,gBAAkB91B,EAAgBgoD,gBAClDhoD,EAAgBmuC,kBAAmB,EAE5BhL,CACX,CAEA,OAAO,IACX,GACJ,EACJ,EA5CA,GA8CAjI,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAImU,GAAmBnU,EAAvB,IC9D9C,IAAM,GAAO,mBAeb,cAUI,WAAYA,GARI,KAAAxmC,KAAO,GASnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,GAChD,CAgCJ,OA7BW,YAAA5oB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAGO,YAAAi4B,4BAAP,SAAmCnS,EAAiBz7B,EAAqBI,GAAzE,WACI,OAAO,GAAW0zC,eAAwBrY,EAASz7B,EAAUtG,KAAKiU,MAAM,SAACw6C,EAAcpU,GACnF,GAAIA,EAAO,CACP,KAAM3zC,aAA2B,EAAA2sC,aAC7B,MAAM,IAAI7tC,MAAM,UAAGipD,EAAY,kCAGnC,IAAM5kB,EAAU,EAAK5tB,QAAQi4B,4BAA4BnS,EAASz7B,EAAUI,GAEtE4+C,EAA0B5+C,EAAgByL,WAAW9I,YAAYi8C,wBASvE,OARK5+C,EAAgB8sC,eACjB9sC,EAAgBiG,YAAY04C,mBAAmB3+C,EAAgBiG,YAAa24C,GAG3E5+C,EAAgBk4C,qBACjBl4C,EAAgB63C,kBAAkB8G,mBAAmB3+C,EAAgB63C,kBAAmB+G,GAGrFzb,CACX,CAEA,OAAO,IACX,GACJ,EACJ,EA7CA,GC8IO,SAASglB,GAA+BC,GACrC,MAAkBA,EAAkBppD,MAAM,KAChD,OAAOqpD,GAAyB,CAAEpqD,GADzB,KAC6B84B,UADlB,MAExB,CAEO,SAASsxB,GAAyBC,EAA4CC,G,WAAA,IAAAA,IAAAA,GAAA,GACjF,IAAMpN,EAAUmN,EAAYvxB,UAAmE,QAAvD,EAAAyxB,GAAiCF,EAAYvxB,kBAAU,eAAGuxB,EAAYrqD,IAAMwqD,GAAuBH,EAAYrqD,IACvJ,IAAKk9C,IACD,EAAA9iC,OAAOC,KAAK,yCAAkCgwC,EAAYrqD,GAAE,0BAAkBqqD,EAAYvxB,WAAa,sBACnGwxB,GAA0B,CAC1B,IAAMG,EAA4C,CAAC,EAC7C,EAA8C,CAChDC,MAAO,CAAC,GAEZ,GAAIL,EAAYM,kBAEZ,IAAK,IAAMr8C,KADXm8C,EAAOzzB,OAAS,CAAC,EACCqzB,EAAYM,kBAC1BF,EAAOzzB,OAAO1oB,GAAO,CACjBgB,KAAMhB,GAYlB,OARI+7C,EAAYO,qBACZ,EAAQ5zB,OAAS,CAAC,EAClBt6B,OAAOiT,KAAK06C,EAAYO,oBAAoB94C,SAAQ,SAACxD,GACjD,EAAQ0oB,OAAQ1oB,GAAO,CACnBgB,KAAMhB,EAEd,KAEG,CACHu8C,OAAQ,GACRJ,OAAM,EACNK,QAAO,EAEf,CAEJ,OAAO5N,CACX,CASO,SAAS6N,GAAoCz8C,EAAawqB,EAAmBokB,GAChFqN,GAAiCzxB,KAAjCyxB,GAAiCzxB,GAAe,CAAC,GACjDyxB,GAAiCzxB,GAAWxqB,GAAO4uC,CACvD,CDjJAjgB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIkV,GAAiBlV,EAArB,ICkJ9C,IAAMyU,GAAwG,CAK1GU,QAAS,CAQL,WAAY,CACRJ,OAAQ,CAAC,4BACTJ,OAAQ,CACJzzB,OAAQ,CACJxjB,QAAS,CAAElE,KAAM,gBAQ/Bk7C,GAAqE,CACvE,gBAAiB,CACbK,OAAQ,CAAC,iCACTC,QAAS,CACLJ,MAAO,CACHQ,IAAK,CAAE57C,KAAM,WAIzB,eAAgB,CACZu7C,OAAQ,CAAC,gCACTJ,OAAQ,CAAC,EACTK,QAAS,CACL9zB,OAAQ,CACJm0B,kBAAmB,CAAE77C,KAAM,YAAa87C,SAAU,WAEtDV,MAAO,CACHQ,IAAK,CAAE57C,KAAM,WAIzB,aAAc,CACVu7C,OAAQ,CAAC,iCACTC,QAAS,CACLJ,MAAO,CACHQ,IAAK,CAAE57C,KAAM,UAGrB+7C,eAAc,SAACC,EAAWjB,EAAakB,EAAUC,EAAQC,GAGrD,GAAuB,eAAnBpB,EAAYrqD,KAAwBsrD,EAAUI,eAAiE,IAAhDhvD,OAAOiT,KAAK27C,EAAUI,eAAe5tD,OACpG,MAAM,IAAI+C,MAAM,6EAEpB,IACM8qD,EADqBL,EAAUI,cAAqB,MACvBjtD,MAAM,GACzC,GAAuB,iBAAZktD,EACP,MAAM,IAAI9qD,MAAM,+BAEpB,IAAM8b,EAA4B6uC,EAAOI,OAAOlG,OAAOiG,GACjDE,EAAmBJ,EAAkB,GAI3C,OAHAI,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOkwD,QAAUhvC,EAAMgvC,QACxCE,EAAiBpwD,OAAOqwD,UAAYnvC,EAAMmvC,UACnCL,CACX,GAEJ,gBAAiB,CACbZ,OAAQ,CAAC,oCACTC,QAAS,CACLJ,MAAO,CACHQ,IAAK,CAAE57C,KAAM,UAGrBy8C,WAAU,SAACT,EAAWU,G,MAClB,IAAKV,EAAUI,cAEX,OADA,EAAAtxC,OAAOvZ,MAAM,qDACN,EAEX,IAAMorD,EAAqBX,EAAUI,cAAqB,MAC1D,IAAKO,EAED,OADA,EAAA7xC,OAAOvZ,MAAM,8EACN,EAEX,IAAM8qD,EAAUM,EAAmBxtD,MAAM,GACzC,MAAuB,iBAAZktD,GACP,EAAAvxC,OAAOvZ,MAAM,gCACN,MAE4B,QAAzB,EAAAmrD,EAAmBtG,cAAM,eAAGiG,MAEtC,EAAAvxC,OAAOvZ,MAAM,wBAAiB8qD,EAAO,gBAC9B,EAGf,EACAN,eAAc,SAACC,EAAWjB,EAAakB,EAAUC,EAAQC,GAGrD,GAAuB,kBAAnBpB,EAAYrqD,KAA2BsrD,EAAUI,eAAiE,IAAhDhvD,OAAOiT,KAAK27C,EAAUI,eAAe5tD,OACvG,MAAM,IAAI+C,MAAM,6EAEpB,IACM8qD,EADqBL,EAAUI,cAAqB,MACvBjtD,MAAM,GACzC,GAAuB,iBAAZktD,EACP,MAAM,IAAI9qD,MAAM,+BAEpB,IAAM8b,EAA4B6uC,EAAOI,OAAOlG,OAAOiG,GACjDE,EAAmBJ,EAAkB,GAI3C,OAHAI,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOkwD,QAAUhvC,EAAMgvC,QACxCE,EAAiBpwD,OAAOqwD,UAAYnvC,EAAMmvC,UACnCL,CACX,GAEJ,SAAUS,GAAsB,mBAChC,UAAWA,GAAsB,oBACjC,WAAYA,GAAsB,qBAClC,WAAYA,GAAsB,qBAClC,WAAYA,GAAsB,qBAClC,YAAaA,GAAsB,sBACnC,aAAcA,GAAsB,uBACpC,aAAcA,GAAsB,uBACpC,YAAaA,GAAsB,sBACnC,aAAc,CACVrB,OAAQ,CAAC,uBACTa,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACC,EAAWjB,EAAakB,EAAUC,EAAQC,GAIrD,OAFAA,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAC9DgwD,EAAkB,GAAGhwD,OAAO0wD,uBAAwB,EAC7CV,CACX,GAEJ,aAAcS,GAAsB,uBACpC,WAAYA,GAAsB,0BAClC,WAAYA,GAAsB,oBAAyB,CAAC,IAAK,MAAM,GACvE,WAAYA,GAAsB,yBAA8B,CAAC,IAAK,MAAM,GAC5E,WAAY,CACRrB,OAAQ,CAAC,0BACTQ,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,GAExDA,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAC9DgwD,EAAkB,GAAGhwD,OAAO8wD,uBAAwB,EAGpD,IAAI9pD,GAAQ,EAWZ,OAVA/F,OAAOiT,KAAKy8C,EAAWp1B,QAAU,CAAC,GAAGw1B,MAAK,SAAC/tD,G,MACvC,YAAwCkC,KAAnB,QAAjB,EAAAyrD,EAAWp1B,cAAM,eAAGv4B,GAAOgE,QAC3BA,EAAO2pD,EAAWp1B,OAAOv4B,GAAOgE,MACzB,EAGf,KACc,IAAVA,IACAgpD,EAAkB,GAAGhwD,OAAOgH,KAAO6pD,EAAQV,OAAOa,MAAMhqD,GAAMiqD,eAE3DjB,CACX,GAEJ,WAAYS,GAAsB,uBAA4B,CAAC,IAAK,MAAM,GAC1E,WAAYA,GAAsB,uBAA4B,CAAC,IAAK,MACpE,WAAYA,GAAsB,oBAAyB,CAAC,IAAK,MACjE,WAAYA,GAAsB,oBAAyB,CAAC,IAAK,MACjE,aAAcA,GAAsB,sBAA2B,CAAC,IAAK,IAAK,MAC1E,gBAAiBA,GAAsB,0BACvC,WAAYA,GAAsB,kCAAuC,CAAC,IAAK,IAAK,MACpF,UAAWA,GAAsB,yBAA8B,CAAC,IAAK,MACrE,UAAWA,GAAsB,yBAA8B,CAAC,IAAK,MACrE,UAAWA,GAAsB,gCAAqC,CAAC,IAAK,MAC5E,UAAWA,GAAsB,4BAAiC,CAAC,IAAK,MACxE,UAAWA,GAAsB,mCAAwC,CAAC,IAAK,MAC/E,aAAcA,GAAsB,uBACpC,aAAcA,GAAsB,uBACpC,cAAe,CACXrB,OAAQ,CAAC,6BACTJ,OAAQ,CACJzzB,OAAQ,CACJ21B,UAAW,CAAEr9C,KAAM,aAEnBxT,EAAG,CAAEwT,KAAM,UACX7S,EAAG,CAAE6S,KAAM,aAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,aAI3B,cAAe,CACXu7C,OAAQ,CAAC,wBACTC,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,YAI3B,WAAY48C,GAAsB,qBAClC,WAAYA,GAAsB,qBAClC,WAAYA,GAAsB,qBAClC,YAAaA,GAAsB,sBACnC,YAAaA,GAAsB,sBACnC,YAAaA,GAAsB,sBACnC,aAAcA,GAAsB,sBAA2B,CAAC,IAAK,MACrE,YAAaA,GAAsB,sBACnC,YAAaA,GAAsB,sBACnC,YAAaA,GAAsB,sBACnC,aAAcA,GAAsB,uBACpC,aAAcA,GAAsB,uBACpC,aAAcA,GAAsB,uBACpC,WAAYA,GAAsB,6BAClC,WAAYA,GAAsB,qBAClC,YAAaA,GAAsB,sBACnC,aAAcA,GAAsB,uBACpC,YAAaA,GAAsB,4BACnC,YAAaA,GAAsB,0BACnC,WAAYA,GAAsB,sBAA2B,CAAC,IAAK,MACnE,cAAeA,GAAsB,wBACrC,iBAAkBA,GAAsB,2BACxC,WAAYA,GAAsB,oBAAyB,CAAC,IAAK,MACjE,aAAcA,GAAsB,sBAA2B,CAAC,IAAK,MACrE,gBAAiBA,GAAsB,yBAA8B,CAAC,IAAK,MAC3E,gBAAiBA,GAAsB,yBAA8B,CAAC,IAAK,IAAK,MAChF,iBAAkB,CAEdrB,OAAQ,CAAC,iCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,KACX7S,EAAG,CAAE6S,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,YAI3B,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,YAGxCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,YAI3B,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,UAChCwB,EAAG,CAAEt9C,KAAM,UAAW87C,SAAU,YAGxCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,YAI3B,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,UAChCwB,EAAG,CAAEt9C,KAAM,UAAW87C,SAAU,UAChC5uD,EAAG,CAAE8S,KAAM,UAAW87C,SAAU,YAGxCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,YAK3B,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,YAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,eAIzB,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,YAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,eAIzB,gBAAiB,CACbu7C,OAAQ,CAAC,gCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,YAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,eAIzB,iBAAkB48C,GAAsB,2BACxC,mBAAoBA,GAAsB,6BAC1C,eAAgBA,GAAsB,8BACtC,cAAeA,GAAsB,qCAA0C,CAAC,IAAK,MACrF,kBAAmB,CACfrB,OAAQ,CAAC,0BACTJ,OAAQ,CACJzzB,OAAQ,CACJhyB,YAAa,CAAEsK,KAAM,WAAY87C,SAAU,UAC3CjoD,SAAU,CAAEmM,KAAM,qBAAsB87C,SAAU,UAClD/nD,MAAO,CAAEiM,KAAM,UAAW87C,SAAU,YAG5CN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,EAAmBruB,GAE3E,IAAM5gC,EAAIivD,EAAkB,GAAGoB,WAAWL,MAAK,SAACj8B,GAAU,MAAe,uBAAfA,EAAMjhB,IAAN,IAC1D,IAAK9S,EACD,MAAM,IAAIqE,MAAM,uCAMpB,OAHIu8B,EAAQ0vB,kBAAkBtwD,EAAEy8C,YAC5B7b,EAAQ0vB,kBAAkBtwD,EAAEy8C,UAAUx2C,KAAO,cAE1CgpD,CACX,GAEJ,oBAAqB,CACjBZ,OAAQ,CAAC,4BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,YAGtCN,QAAS,CACL9zB,OAAQ,CACJhyB,YAAa,CAAEsK,KAAM,YACrBnM,SAAU,CAAEmM,KAAM,sBAClBjM,MAAO,CAAEiM,KAAM,cAI3B,kBAAmB,CACfu7C,OAAQ,CAAC,iCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,UAChCwB,EAAG,CAAEt9C,KAAM,UAAW87C,SAAU,UAChC5uD,EAAG,CAAE8S,KAAM,UAAW87C,SAAU,YAGxCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,GAIxD,OAFAA,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAC9DgwD,EAAkB,GAAGhwD,OAAOsxD,oBAAqB,EAC1CtB,CACX,GAEJ,kBAAmB,CACfZ,OAAQ,CAAC,iCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,cAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,eAIzB,kBAAmB,CACfu7C,OAAQ,CAAC,iCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,UAChCwB,EAAG,CAAEt9C,KAAM,UAAW87C,SAAU,UAChC5uD,EAAG,CAAE8S,KAAM,UAAW87C,SAAU,UAChCxsD,EAAG,CAAE0Q,KAAM,UAAW87C,SAAU,UAChCjsD,EAAG,CAAEmQ,KAAM,UAAW87C,SAAU,UAChC1rD,EAAG,CAAE4P,KAAM,UAAW87C,SAAU,UAChC4B,EAAG,CAAE19C,KAAM,UAAW87C,SAAU,UAChCxtD,EAAG,CAAE0R,KAAM,UAAW87C,SAAU,YAGxCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,GAIxD,OAFAA,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAC9DgwD,EAAkB,GAAGhwD,OAAOsxD,oBAAqB,EAC1CtB,CACX,GAEJ,kBAAmB,CACfZ,OAAQ,CAAC,iCACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,cAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,eAIzB,kBAAmB,CACfu7C,OAAQ,CAAC,+BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,UAAW87C,SAAU,UAChC3uD,EAAG,CAAE6S,KAAM,UAAW87C,SAAU,UAChCwB,EAAG,CAAEt9C,KAAM,UAAW87C,SAAU,UAChC5uD,EAAG,CAAE8S,KAAM,UAAW87C,SAAU,UAChCxsD,EAAG,CAAE0Q,KAAM,UAAW87C,SAAU,UAChCjsD,EAAG,CAAEmQ,KAAM,UAAW87C,SAAU,UAChC1rD,EAAG,CAAE4P,KAAM,UAAW87C,SAAU,UAChC4B,EAAG,CAAE19C,KAAM,UAAW87C,SAAU,UAChCxtD,EAAG,CAAE0R,KAAM,UAAW87C,SAAU,UAChCxhC,EAAG,CAAEta,KAAM,UAAW87C,SAAU,UAChCl+B,EAAG,CAAE5d,KAAM,WAAY87C,SAAU,UACjC6B,EAAG,CAAE39C,KAAM,WAAY87C,SAAU,UACjC1qB,EAAG,CAAEpxB,KAAM,WAAY87C,SAAU,UACjCjvD,EAAG,CAAEmT,KAAM,WAAY87C,SAAU,UACjCp5C,EAAG,CAAE1C,KAAM,WAAY87C,SAAU,UACjCtuD,EAAG,CAAEwS,KAAM,WAAY87C,SAAU,YAGzCN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,GAIxD,OAFAA,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAC9DgwD,EAAkB,GAAGhwD,OAAOsxD,oBAAqB,EAC1CtB,CACX,GAEJ,kBAAmB,CACfZ,OAAQ,CAAC,+BACTa,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,QAAS87C,SAAU,YAGtCN,QAAS,CACL9zB,OAAQ,CACJ,EAAK,CAAE1nB,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,EAAK,CAAEA,KAAM,YACb,GAAM,CAAEA,KAAM,aACd,GAAM,CAAEA,KAAM,aACd,GAAM,CAAEA,KAAM,aACd,GAAM,CAAEA,KAAM,aACd,GAAM,CAAEA,KAAM,aACd,GAAM,CAAEA,KAAM,gBAI1B,eAAgB,CACZu7C,OAAQ,CAAC,0BACTa,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJhyB,YAAa,CAAEsK,KAAM,WAAY87C,SAAU,UAC3CjoD,SAAU,CAAEmM,KAAM,qBAAsB87C,SAAU,UAClD/nD,MAAO,CAAEiM,KAAM,UAAW87C,SAAU,YAG5CN,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,aAI3B,iBAAkB,CACdu7C,OAAQ,CAAC,4BACTa,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,WAGnBw7C,QAAS,CACL9zB,OAAQ,CACJhyB,YAAa,CAAEsK,KAAM,YACrBnM,SAAU,CAAEmM,KAAM,sBAClBjM,MAAO,CAAEiM,KAAM,cAI3B,WAAY,CACRu7C,OAAQ,CAAC,4BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,EAAmBruB,G,QAE3EquB,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAE9D,IAAMyxD,EAAWzB,EAAkB,GAAGoB,WAAW,GAEjD,OADApB,EAAkB,GAAGhwD,OAAO0xD,UAA8D,QAAlD,EAA4C,QAA5C,EAAA/vB,EAAQ0vB,kBAAkBI,EAASjU,iBAAS,eAAEx2C,YAAI,2BACnFgpD,CACX,GAEJ,WAAY,CACRZ,OAAQ,CAAC,4BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,KACX7S,EAAG,CAAE6S,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,EAAmBruB,G,YAE3EquB,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAE9D,IAAM2xD,EAAY3B,EAAkB,GAAGoB,WAAW,GAC5CQ,EAAY5B,EAAkB,GAAGoB,WAAW,GAGlD,OAFApB,EAAkB,GAAGhwD,OAAO0xD,UACkF,QAA1G,EAAmD,QAAnD,EAA6C,QAA7C,EAAA/vB,EAAQ0vB,kBAAkBM,EAAUnU,iBAAS,eAAEx2C,YAAI,QAAiD,QAA7C,EAAA26B,EAAQ0vB,kBAAkBO,EAAUpU,iBAAS,eAAEx2C,YAAI,2BACvGgpD,CACX,GAEJ,UAAW,CACPZ,OAAQ,CAAC,2BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,KACX7S,EAAG,CAAE6S,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,EAAmBruB,G,YAE3EquB,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAE9D,IAAM2xD,EAAY3B,EAAkB,GAAGoB,WAAW,GAC5CQ,EAAY5B,EAAkB,GAAGoB,WAAW,GAGlD,OAFApB,EAAkB,GAAGhwD,OAAO0xD,UACkF,QAA1G,EAAmD,QAAnD,EAA6C,QAA7C,EAAA/vB,EAAQ0vB,kBAAkBM,EAAUnU,iBAAS,eAAEx2C,YAAI,QAAiD,QAA7C,EAAA26B,EAAQ0vB,kBAAkBO,EAAUpU,iBAAS,eAAEx2C,YAAI,2BACvGgpD,CACX,GAEJ,WAAY,CACRZ,OAAQ,CAAC,4BACTJ,OAAQ,CACJzzB,OAAQ,CACJl7B,EAAG,CAAEwT,KAAM,KACX7S,EAAG,CAAE6S,KAAM,OAGnBw7C,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,EAAmBruB,G,YAE3EquB,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAE9D,IAAM2xD,EAAY3B,EAAkB,GAAGoB,WAAW,GAC5CQ,EAAY5B,EAAkB,GAAGoB,WAAW,GAGlD,OAFApB,EAAkB,GAAGhwD,OAAO0xD,UACkF,QAA1G,EAAmD,QAAnD,EAA6C,QAA7C,EAAA/vB,EAAQ0vB,kBAAkBM,EAAUnU,iBAAS,eAAEx2C,YAAI,QAAiD,QAA7C,EAAA26B,EAAQ0vB,kBAAkBO,EAAUpU,iBAAS,eAAEx2C,YAAI,2BACvGgpD,CACX,GAEJ,WAAYS,GAAsB,kCAAuC,CAAC,IAAK,MAC/E,WAAYA,GAAsB,iCAAsC,CAAC,IAAK,MAC9E,WAAYA,GAAsB,8BAClC,WAAYA,GAAsB,+BAClC,cAAeA,GAAsB,gCACrC,WAAYA,GAAsB,0BAClC,WAAYA,GAAsB,0BAClC,iBAAkBA,GAAsB,yBACxC,mBAAoBA,GAAsB,2BAC1C,iBAAkBA,GAAsB,yBACxC,kBAAmBA,GAAsB,uBACzC,kBAAmBA,GAAsB,uBACzC,mBAAoBA,GAAsB,2BAG1C,gBAAiB,CACbrB,OAAQ,CAAC,0BACTQ,eAAc,SAACC,EAAWe,EAAcd,EAAU+B,EAAS7B,GACvD,IAAMI,EAAmBJ,EAAkB,GAM3C,OALAI,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAO8xD,kBAAoB7wD,OAAOiT,KAAK27C,EAAUZ,OAAS,IAAI5sD,OAC/E+tD,EAAiB2B,cAAc17C,SAAQ,SAAC0e,EAAQhtB,GAC5CgtB,EAAOlhB,KAAO,OAAS9L,CAC3B,IACOioD,CACX,GAEJ,cAAe,CACXZ,OAAQ,CAAC,wBACTC,QAAS,CACLJ,MAAO,CACH+C,KAAM,CAAEn+C,KAAM,UACdo+C,MAAO,CAAEp+C,KAAM,cAI3B,cAAe,CACXu7C,OAAQ,CAAC,wBACTa,cAAe,CACXiC,MAAO,CAAEr+C,KAAM,QAASs+C,WAAW,EAAMC,aAAc,KAE3DpD,OAAQ,CACJzzB,OAAQ,CACJ82B,UAAW,CAAEx+C,KAAM,UAG3By8C,WAAU,SAACT,GACP,GAAIA,EAAUI,eAAiBJ,EAAUI,cAAciC,MAAO,CAC1D,IAAMA,EAAQrC,EAAUI,cAAciC,MAAMlvD,MAK5C,IAJqBkvD,EAAMlE,OAAM,SAACsE,GAE9B,MAA4B,iBAAdA,GAA0B,QAAQjmC,KAAKimC,EAAUC,WACnE,IAGI,OADA1C,EAAUI,cAAciC,MAAMlvD,MAAQ,IAC/B,EAGX,IAAMwvD,EAAc,IAAIC,IAAIP,GAC5BrC,EAAUI,cAAciC,MAAMlvD,MAAQ5B,MAAMsxD,KAAKF,EACrD,CACA,OAAO,CACX,EACA5C,eAAc,SAACC,EAAWjB,EAAakB,EAAU+B,EAAS7B,GAEtD,GAAuB,gBAAnBpB,EAAYrqD,KAAyBsrD,EAAUZ,OAAiD,IAAxChuD,OAAOiT,KAAK27C,EAAUZ,OAAO5sD,OACrF,MAAM,IAAI+C,MAAM,qEAQpB,OANyB4qD,EAAkB,GAC1B+B,cAAc17C,SAAQ,SAAC0e,GAChB,YAAhBA,EAAOlhB,OACPkhB,EAAOlhB,KAAO,OAASkhB,EAAOlhB,KAEtC,IACOm8C,CACX,GAEJ,aAAc,CACVZ,OAAQ,CAAC,2BACTC,QAAS,CACLJ,MAAO,CACH0D,SAAU,CAAE9+C,KAAM,oBAI9B,WAAY,CACRu7C,OAAQ,CAAC,yBACTa,cAAe,CACX2C,aAAc,CAAE/+C,KAAM,eAAgB87C,SAAU,SAAUwC,WAAW,EAAMC,aAAc,IAE7FpD,OAAQ,CACJzzB,OAAQ,CACJs3B,WAAY,CAAEh/C,KAAM,aAAc87C,SAAU,UAC5CmD,SAAU,CAAEj/C,KAAM,WAAY87C,SAAU,YAGhDN,QAAS,CACL9zB,OAAQ,CACJxzB,MAAO,CAAE8L,KAAM,UAEnBo7C,MAAO,CACH0D,SAAU,CAAE9+C,KAAM,oBAI9B,WAAY,CACRu7C,OAAQ,CAAC,qBACTa,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJ76B,EAAG,CAAEmT,KAAM,gBAAiB87C,SAAU,YAG9CN,QAAS,CACL9zB,OAAQ,CACJw3B,aAAc,CAAEl/C,KAAM,qBAIlC,iBAAkB,CACdu7C,OAAQ,CAAC,2BACTa,cAAe,CACX+C,SAAU,CAAEn/C,KAAM,WAAY87C,SAAU,UAAWwC,WAAW,EAAMC,cAAc,GAClFa,OAAQ,CAAEp/C,KAAM,SAAU87C,SAAU,UAAWwC,WAAW,EAAMC,cAAc,IAElFxC,eAAc,SAACC,EAAWjB,EAAakB,EAAU+B,EAAS7B,GACtD,GAAuB,mBAAnBpB,EAAYrqD,KAA4BsrD,EAAUZ,OAAiD,IAAxChuD,OAAOiT,KAAK27C,EAAUZ,OAAO5sD,OACxF,MAAM,IAAI+C,MAAM,mFAEpB,IAAMgrD,EAAmBJ,EAAkB,GAM3C,OALAI,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAO8xD,kBAAoB7wD,OAAOiT,KAAK27C,EAAUZ,OAAO5sD,OACzE+tD,EAAiB2B,cAAc17C,SAAQ,SAAC0e,EAAQhtB,GAC5CgtB,EAAOlhB,KAAO,OAAS9L,CAC3B,IACOioD,CACX,GAEJ,eAAgB,CACZZ,OAAQ,CAAC,yBACTa,cAAe,CACXiD,WAAY,CAAEr/C,KAAM,mBAAoB87C,SAAU,SAAUwC,WAAW,EAAMC,aAAc,IAE/FpD,OAAQ,CACJC,MAAO,CACH,YAAa,CAAEp7C,KAAM,WAG7By8C,WAAU,SAACT,G,QAQP,MAN6D,iBAAf,QAAnC,EAAuB,QAAvB,EAAAA,EAAUI,qBAAa,eAAEiD,kBAAU,eAAElwD,MAAM,MAClD6sD,EAAUI,cAAgBJ,EAAUI,eAAiB,CACjDiD,WAAY,CAAElwD,MAAO,CAAC,KAE1B6sD,EAAUI,cAAciD,WAAWlwD,MAAQ,CAAC,KAEzC,CACX,GAEJ,gBAAiB,CACbosD,OAAQ,CAAC,0BACTC,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,YAIzB,gBAAiB,CACbu7C,OAAQ,CAAC,0BACTC,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,YAIzB,mBAAoB,CAChBu7C,OAAQ,CAAC,8BAEb,eAAgB,CACZA,OAAQ,CAAC,6BACTkB,WAAU,SAACT,G,QACP,SAAsC,QAAjC,EAAuB,QAAvB,EAAAA,EAAUI,qBAAa,eAAEmD,gBAAQ,eAAEpwD,SACpC,EAAA2b,OAAOvZ,MAAM,4DACN,EAGf,EACA6qD,cAAe,CACXmD,SAAU,CACNv/C,KAAM,WACN87C,SAAU,SACVsB,cAAe,SACfkB,WAAW,EACXkB,YAAY,EACZC,gBAAe,SAACvrD,EAAOgoD,GACnB,MAAO,CAACA,EAAOwD,gBAAgBxrD,EAAM,IACzC,KAIZ,eAAgB,CACZqnD,OAAQ,CAAC,6BACTa,cAAe,CACXmD,SAAU,CACNv/C,KAAM,WACN87C,SAAU,SACVsB,cAAe,SACfkB,WAAW,EACXkB,YAAY,EACZC,gBAAe,SAACvrD,EAAiBgoD,GAC7B,MAAO,CAACA,EAAOwD,gBAAgBxrD,EAAM,IACzC,KAIZ,uBAAwB,CACpBqnD,OAAQ,CAAC,6BACTa,cAAe,CACXuD,UAAW,CACP3/C,KAAM,YACN87C,SAAU,SACVsB,cAAe,SACfkB,WAAW,EACXmB,gBAAe,SAACvrD,EAAmBgoD,GAC/B,MAAO,CAAChoD,EAAM,GAAG3H,KAAI,SAAC+B,GAAM,OAAA4tD,EAAOwD,gBAAgBpxD,EAAvB,IAChC,IAGRytD,eAAc,SAACe,EAAYC,EAAcd,EAAUC,EAAQC,GAOvD,OAL8BA,EAAkB,GAC1BoB,WAAW/6C,SAAQ,SAACye,GACtCA,EAAMjhB,KAAOk8C,EAAOwD,iBAAiBz+B,EAAMjhB,KAC/C,IAEOm8C,CACX,GAEJ,uBAAwB,CACpBZ,OAAQ,C,8IAORa,cAAe,CACXmD,SAAU,CACNv/C,KAAM,eACNs+C,WAAW,EACXkB,YAAY,EACZC,gBAAe,SAACvrD,EAAOgoD,GACnB,MAAO,CAACA,EAAOwD,gBAAgBxrD,EAAM,IACzC,GAEJ0rD,SAAU,CACN5/C,KAAM,gBACNs+C,WAAW,EACXC,cAAc,EACdkB,gBAAiB,SAACtwD,GACd,OAAiB,IAAbA,EAAM,GACC,CAAC,cAED,MAACkC,EAEhB,IAGR8pD,OAAQ,CACJzzB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WACf6/C,SAAU,CAAE7/C,KAAM,aAAc87C,SAAU,UAC1CgE,GAAI,CAAE9/C,KAAM,gBAAiB+/C,QAAS,8BACtCC,GAAI,CAAEhgD,KAAM,gBAAiB+/C,QAAS,+BAE1C3E,MAAO,CACH6E,GAAI,CAAEjgD,KAAM,KAAM+/C,QAAS,iCAGnCvE,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,QAAS+/C,QAAS,+BAC/BnE,IAAK,CAAE57C,KAAM,MAAO+/C,QAAS,+BAC7BtwD,KAAM,CAAEuQ,KAAM,OAAQ+/C,QAAS,iCAGvCG,qBAAsB,CAClB,CACIj/B,MAAO,SACPC,OAAQ,gBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,YACPC,OAAQ,YACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,iBACPC,OAAQ,iBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,UACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAUC,EAAQC,G,UAEhDkE,EAA+BlE,EAAkB,GACjDmE,EAAuC,QAAvB,EAAAtE,EAAUI,qBAAa,eAAEmD,SAASpwD,MAAM,GAC9D,GAA6B,iBAAlBmxD,EAEP,MADA,EAAAx1C,OAAOvZ,MAAM,kEACP,IAAIA,MAAM,kEAEpB,IAAMguD,EAAWrD,EAAOI,OAAOiE,gBAAgBD,QAEwB,IAA5DD,EAA6Bl0D,OAAOy1B,cAAczyB,QAEzD+sD,EAAOI,OAAOiE,gBACdF,EAA6Bl0D,OAAOy1B,cAAczyB,OAAQ,IAAAqxD,iCAAgCjB,EAASpsD,OAIvG,IAAMstD,EAAwBtE,EAAkB,GAQhD,OAPAsE,EAAsBt0D,SAAtBs0D,EAAsBt0D,OAAW,CAAC,IAClC,EAAAs0D,EAAsBt0D,QAAOozD,WAAQ,EAARA,SAAa,CAAC,GAC3CkB,EAAsBt0D,OAAOozD,SAASpwD,MAAQ+sD,EAAOwD,gBAAgBY,IAGrE,EAAAnE,EAAkB,IAAGhwD,SAAM,EAANA,OAAW,CAAC,GAE1BgwD,CACX,GAEJ,cAAe,CACXZ,OAAQ,CAAC,4BAAD,mCACRa,cAAe,CACXxY,QAAS,CAAE5jC,KAAM,cAAe+/C,QAAS,oCAE7C5E,OAAQ,CACJzzB,OAAQ,CACJ,YAAa,CAAE1nB,KAAM,KAAM+/C,QAAS,qCAG5CG,qBAAsB,CAClB,CACIj/B,MAAO,SACPC,OAAQ,SACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,eACPC,OAAQ,eACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,oBACPC,OAAQ,cACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAUC,EAAQC,GAQtD,OAPAA,EAAkB35C,SAAQ,SAAC+5C,GAEY,oCAA/BA,EAAiBmE,YACjBnE,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOw0D,aAAc,EAE9C,IACOxE,CACX,GAEJ,cAAe,CACXZ,OAAQ,CAAC,4BAAD,mCACRa,cAAe,CACXxY,QAAS,CAAE5jC,KAAM,cAAe+/C,QAAS,oCAE7C5E,OAAQ,CACJzzB,OAAQ,CAEJv4B,MAAO,CAAE6Q,KAAM,SACf,YAAa,CAAEA,KAAM,KAAM+/C,QAAS,qCAG5CvE,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,WAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,SACPC,OAAQ,SACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,eACPC,OAAQ,eACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,oBACPC,OAAQ,cACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAUC,EAAQC,GAQtD,OAPAA,EAAkB35C,SAAQ,SAAC+5C,GAEY,oCAA/BA,EAAiBmE,YACjBnE,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOw0D,aAAc,EAE9C,IACOxE,CACX,GAEJ,sBAAuB,CAEnBZ,OAAQ,CAAC,8BAAD,wFACRa,cAAe,CACXxY,QAAS,CAAE5jC,KAAM,cAAe+/C,QAAS,oCAE7C5E,OAAQ,CACJzzB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WACf,YAAa,CAAEA,KAAM,KAAM+/C,QAAS,mCACpCF,SAAU,CAAE7/C,KAAM,aAAc87C,SAAU,UAC1CgE,GAAI,CAAE9/C,KAAM,gBAAiB+/C,QAAS,wBACtCC,GAAI,CAAEhgD,KAAM,gBAAiB+/C,QAAS,yBAE1C3E,MAAO,CACH6E,GAAI,CAAEjgD,KAAM,KAAM+/C,QAAS,iCAGnCvE,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,QAAS+/C,QAAS,+BAC/BnE,IAAK,CAAE57C,KAAM,MAAO+/C,QAAS,+BAC7BtwD,KAAM,CAAEuQ,KAAM,OAAQ+/C,QAAS,iCAGvCG,qBAAsB,CAClB,CACIj/B,MAAO,SACPC,OAAQ,SACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,eACPC,OAAQ,eACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,uBACPC,OAAQ,6BACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,YACPC,OAAQ,YACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,iBACPC,OAAQ,iBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,UACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAUC,EAAQC,GAoBtD,OAnBAA,EAAkB35C,SAAQ,SAAC+5C,GAEY,oCAA/BA,EAAiBmE,WACjBnE,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOw0D,aAAc,GACA,gCAA/BpE,EAAiBmE,YACxBnE,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BiB,OAAOiT,KAAK27C,EAAUt0B,QAAU,IAAIllB,SAAQ,SAACxD,G,MACnC7P,EAAwB,QAAhB,EAAA6sD,EAAUt0B,cAAM,eAAG1oB,GACjC,GAAY,UAARA,GAAmB7P,EAAO,CAE1B,IAAMgE,EAAOhE,EAAMgE,UACN9B,IAAT8B,IACAopD,EAAiBpwD,OAAOy1B,cAAgBs6B,EAAOI,OAAOa,MAAMhqD,GAAMiqD,cAE1E,CACJ,IAER,IACOjB,CACX,GAEJ,kBAAmB,CACfZ,OAAQ,CAAC,8BAAD,2BAAoE,+CAC5EJ,OAAQ,CACJzzB,OAAQ,CACJppB,UAAW,CAAE0B,KAAM,QAAS87C,SAAU,SAAUiE,QAAS,4BACzDa,MAAO,CAAE5gD,KAAM,QAAS87C,SAAU,UAElC+E,UAAW,CAAE7gD,KAAM,OAAQ87C,SAAU,SAAU2D,gBAAiB,SAACnI,EAAgB4E,GAAW,OAAC5E,EAAK,GAAK4E,EAAOl0C,QAAQtR,OAAOkb,UAAjC,GAC5FkvC,QAAS,CAAE9gD,KAAM,KAAM87C,SAAU,SAAU2D,gBAAiB,SAACnI,EAAgB4E,GAAW,OAAC5E,EAAK,GAAK4E,EAAOl0C,QAAQtR,OAAOkb,UAAjC,KAGhG4pC,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,WAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,iBACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,kBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACe,EAAYC,EAAcd,EAAU+B,EAAS7B,EAAmB4E,EAAUC,GAErF,IAAMzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GAGtE,OAFA+tD,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOC,KAAO40D,EACxB7E,CACX,GAEJ,iBAAkB,CACdZ,OAAQ,CAAC,8BAAD,2BAAoE,+CAC5EJ,OAAQ,CACJzzB,OAAQ,CACJppB,UAAW,CAAE0B,KAAM,QAAS87C,SAAU,SAAUiE,QAAS,8BAGjEvE,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,WAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,iBACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,kBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACe,EAAYC,EAAcd,EAAU+B,EAAS7B,EAAmB4E,EAAUC,GAErF,IAAMzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GAGtE,OAFA+tD,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOC,KAAO40D,EACxB7E,CACX,GAEJ,mBAAoB,CAChBZ,OAAQ,CAAC,8BAAD,2BAAoE,+CAC5Ea,cAAe,CAAC,EAChBjB,OAAQ,CACJzzB,OAAQ,CACJppB,UAAW,CAAE0B,KAAM,QAAS87C,SAAU,SAAUiE,QAAS,4BACzDkB,SAAU,CAAEjhD,KAAM,cAAe87C,SAAU,SAAU2D,gBAAiB,SAACnI,EAAgB4E,GAAW,OAAC5E,EAAK,GAAK4E,EAAOl0C,QAAQtR,OAAOkb,UAAjC,KAG1G4pC,QAAS,CACLJ,MAAO,CACHkE,IAAK,CAAEt/C,KAAM,WAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,iBACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,kBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACe,EAAYC,EAAcd,EAAU+B,EAAS7B,EAAmB4E,EAAUC,GAErF,IAAMzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GAGtE,OAFA+tD,EAAiBpwD,SAAjBowD,EAAiBpwD,OAAW,CAAC,GAC7BowD,EAAiBpwD,OAAOC,KAAO40D,EACxB7E,CACX,GAEJ,cAAe,CACXZ,OAAQ,CAAC,4BACTa,cAAe,CACXiC,MAAO,CAAEr+C,KAAM,QAASs+C,WAAW,EAAMC,aAAc,KAE3DpD,OAAQ,CACJzzB,OAAQ,CACJ82B,UAAW,CAAEx+C,KAAM,UAG3By8C,WAAU,SAACT,GACP,GAAIA,EAAUI,eAAiBJ,EAAUI,cAAciC,MAAO,CAC1D,IAAMA,EAAQrC,EAAUI,cAAciC,MAAMlvD,MAK5C,IAJqBkvD,EAAMlE,OAAM,SAACsE,GAE9B,MAA4B,iBAAdA,GAA0B,QAAQjmC,KAAKimC,EAAUC,WACnE,IAGI,OADA1C,EAAUI,cAAciC,MAAMlvD,MAAQ,IAC/B,EAGX,IAAMwvD,EAAc,IAAIC,IAAIP,GAC5BrC,EAAUI,cAAciC,MAAMlvD,MAAQ5B,MAAMsxD,KAAKF,EACrD,CACA,OAAO,CACX,EACA5C,eAAc,SAACe,EAAYC,EAAcd,EAAU+B,EAAS7B,GAOxD,OANyBA,EAAkB,GAC1BoB,WAAW/6C,SAAQ,SAACye,GACd,YAAfA,EAAMjhB,MAAqC,SAAfihB,EAAMjhB,OAClCihB,EAAMjhB,KAAO,MAAQihB,EAAMjhB,KAEnC,IACOm8C,CACX,GAEJ,YAAa,CACTZ,OAAQ,CAAC,4BACTa,cAAe,CACXl4C,QAAS,CAAElE,KAAM,kBAAmBs+C,WAAW,MAK3D,SAAS1B,GAAsBzpD,EAA2BgoD,EAA0B+F,GAChF,YADsD,IAAA/F,IAAAA,EAAA,CAAoB,MACnE,CACHI,OAAQ,CAACpoD,GACTgoD,OAAQ,CACJzzB,OAAQyzB,EAAOgG,QACX,SAACC,EAAKngC,GAEF,OADAmgC,EAAIngC,GAAS,CAAEjhB,KAAMihB,GACdmgC,CACX,GACA,CAAC,IAGT5F,QAAS,CACL9zB,OAAQ,CACJv4B,MAAO,CAAE6Q,KAAM,WAGvB+7C,eAAc,SAACe,EAAYC,EAAcd,EAAUe,EAASb,GACxD,GAAI+E,EAAW,CAEX/E,EAAkB,GAAGhwD,OAASgwD,EAAkB,GAAGhwD,QAAU,CAAC,EAG9D,IAAI,GAAQ,EACZiB,OAAOiT,KAAKy8C,EAAWp1B,QAAU,CAAC,GAAGw1B,MAAK,SAAC/tD,G,MACvC,YAAwCkC,KAAnB,QAAjB,EAAAyrD,EAAWp1B,cAAM,eAAGv4B,GAAOgE,QAC3B,EAAO2pD,EAAWp1B,OAAOv4B,GAAOgE,MACzB,EAGf,KACc,IAAV,IACAgpD,EAAkB,GAAGhwD,OAAOgH,KAAO6pD,EAAQV,OAAOa,MAAM,GAAMC,cAEtE,CACA,OAAOjB,CACX,EAER,CAEO,SAASkF,KACZ,OAAOj0D,OAAOiT,KAAK66C,GACvB,CCzjDO,IAAMoG,GAET,CACAC,MAAO,CAAE/yD,OAAQ,EAAG4uD,cAAe,SAAuBoE,YAAa,UACvEC,KAAM,CAAEjzD,OAAQ,EAAG4uD,cAAe,UAAwBoE,YAAa,WACvEE,OAAQ,CAAElzD,OAAQ,EAAG4uD,cAAe,UAAwBoE,YAAa,UACzEG,OAAQ,CAAEnzD,OAAQ,EAAG4uD,cAAe,UAAwBoE,YAAa,UACzEI,OAAQ,CAAEpzD,OAAQ,EAAG4uD,cAAe,UAAwBoE,YAAa,UACzEK,SAAU,CAAErzD,OAAQ,GAAI4uD,cAAe,SAAuBoE,YAAa,UAC3EM,SAAU,CAAEtzD,OAAQ,EAAG4uD,cAAe,WAAyBoE,YAAa,UAC5EO,SAAU,CAAEvzD,OAAQ,EAAG4uD,cAAe,WAAyBoE,YAAa,UAC5EQ,IAAK,CAAExzD,OAAQ,EAAG4uD,cAAe,mBAAwBoE,YAAa,WAG1E,cAYI,WACYS,EACAnxD,EACDkX,GAFC,KAAAi6C,oBAAAA,EACA,KAAAnxD,MAAAA,EACD,KAAAkX,QAAAA,EAVH,KAAAk6C,OAAiG,GACjG,KAAAC,UAAwF,GACxF,KAAAC,iBAA6D,GAC7D,KAAAC,QAAgC,GAChC,KAAAC,uBAAiC,EACjC,KAAAC,OAA+E,GAQnFx2D,KAAKy2D,cAELz2D,KAAK02D,qBACL12D,KAAK22D,kBACL32D,KAAK42D,eACL52D,KAAK62D,aACT,CA2aJ,OAzaI,sBAAW,qBAAM,C,IAAjB,WACI,MAAO,CACHzF,MAAOpxD,KAAKm2D,OACZrU,SAAU9hD,KAAKo2D,UACf5B,gBAAiBx0D,KAAKq2D,iBACtBhM,OAAQrqD,KAAKs2D,QACbz1D,MAAOb,KAAKw2D,OAEpB,E,gCAEQ,YAAAC,YAAR,WACI,GAAKz2D,KAAKk2D,oBAAoB9E,MAG9B,IAAmB,UAAApxD,KAAKk2D,oBAAoB9E,MAAzB,eAAgC,CAA9C,IAAMhqD,EAAI,KACXpH,KAAKm2D,OAAOtxD,KAAK0wD,GAAsBnuD,EAAK0vD,WAChD,CACJ,EAEQ,YAAAJ,mBAAR,WACI,GAAK12D,KAAKk2D,oBAAoBa,aAG9B,IAA0B,UAAA/2D,KAAKk2D,oBAAoBa,aAAzB,eAAuC,CAA5D,IAAM/H,EAAW,KAEZnN,EAAUkN,GAAyBC,GAEzC,IAAKnN,EAED,MADA,EAAA9iC,OAAOvZ,MAAM,CAAC,mCAAoCwpD,IAC5C,IAAIxpD,MAAM,8BAEpBxF,KAAKo2D,UAAUvxD,KAAK,CAChBmyD,iBAAkBnV,EAClBiN,kBAAmBE,EAAYvxB,UAAYuxB,EAAYrqD,GAAK,IAAMqqD,EAAYvxB,UAAYuxB,EAAYrqD,IAE9G,CACJ,EAEQ,YAAAgyD,gBAAR,WACI,GAAK32D,KAAKk2D,oBAAoBtC,UAG9B,IAAuB,UAAA5zD,KAAKk2D,oBAAoBtC,UAAzB,eAAoC,CAAtD,IAAMJ,EAAQ,KACT9wC,EAAS1iB,KAAKi3D,eAAezD,GAEnCxzD,KAAKq2D,iBAAiBxxD,KAAK6d,EAC/B,CACJ,EAEQ,YAAAu0C,eAAR,SAAuBzD,EAAsC0D,GACzD,IAAM9vD,EAAOpH,KAAKm2D,OAAO3C,EAASpsD,MAClC,IAAKA,EAED,MADA,EAAA2X,OAAOvZ,MAAM,CAAC,6BAA8BguD,IACtC,IAAIhuD,MAAM,2BAEpB,GAAIguD,EAASpwD,OACLowD,EAASpwD,MAAMX,SAAW2E,EAAK3E,OAE/B,MADA,EAAAsc,OAAOvZ,MAAM,CAAC,oCAAqCguD,EAAUpsD,IACvD,IAAI5B,MAAM,2BAGxB,IAAMpC,EAAQowD,EAASpwD,OAAS,GAChC,IAAKA,EAAMX,OACP,OAAQ2E,EAAKiqD,eACT,IAAK,UACDjuD,EAAMyB,MAAK,GACX,MACJ,IAAK,mBACDzB,EAAMyB,KAAK,GACX,MACJ,IAAK,SACDzB,EAAMyB,KAAKsyD,KACX,MACJ,IAAK,UACD/zD,EAAMyB,KAAKsyD,IAAKA,KAChB,MACJ,IAAK,UACD/zD,EAAMyB,KAAKsyD,IAAKA,IAAKA,KACrB,MACJ,IAAK,UACL,IAAK,WACL,IAAK,aACD/zD,EAAMg0D,KAAKD,IAAK,EAAG,GACnB,MACJ,IAAK,SACD/zD,EAAMg0D,KAAKD,IAAK,EAAG,IACnB,MACJ,IAAK,WACD/zD,EAAMg0D,KAAKD,IAAK,EAAG,GAM/B,MAAO,CAAE/vD,KAAMA,EAAKiqD,cAAejuD,MAAO8zD,EAAgBA,EAAc9zD,EAAOpD,MAAQoD,EAC3F,EAEQ,YAAAwzD,aAAR,sBACI,GAAK52D,KAAKk2D,oBAAoB7L,OAG9B,I,eAAW,GACP,IAAMgN,EAAgC,CAClC/G,QAAS,EAAMl4C,IAAM,iBAAmB,EAAKm+C,0BAE7C,EAAM56B,SACN07B,EAAU5G,UAAYpvD,OAAOiT,KAAK,EAAMqnB,QAAQn7B,KAAI,SAACyS,G,MAC3CqkD,EAAyB,QAAZ,IAAM37B,cAAM,eAAG1oB,GAClC,IAAKqkD,EAED,MADA,EAAAv4C,OAAOvZ,MAAM,CAAC,+BAAgCyN,IACxC,IAAIzN,MAAM,wBAEpB,IAAM4B,EAAO,EAAK+uD,OAAOmB,EAAWlwD,MACpC,IAAKA,EAED,MADA,EAAA2X,OAAOvZ,MAAM,CAAC,gCAAiC8xD,IACzC,IAAI9xD,MAAM,wBAEpB,IAAMpC,OAAoC,IAArBk0D,EAAWl0D,MAAwB,EAAK6zD,eAAeK,QAAchyD,EAC1F,MAAO,CACH8S,GAAInF,EACJ7L,KAAMA,EAAKiqD,cACXZ,WAAW,EACXrtD,MAAK,EAEb,KAEJ,EAAKkzD,QAAQzxD,KAAKwyD,E,SAzBF,MAAAr3D,KAAKk2D,oBAAoB7L,OAAzB,e,EAAJ,KA2BpB,EAEQ,YAAAwM,YAAR,WACI,GAAK72D,KAAKk2D,oBAAoBr1D,MAG9B,IAAmB,UAAAb,KAAKk2D,oBAAoBr1D,MAAzB,eAAgC,CAA9C,IAAM6I,EAAI,KAEX,GAAgC,iBAArBA,EAAKslD,YAEZ,MADA,EAAAjwC,OAAOvZ,MAAM,CAAC,gCAAiCkE,IACzC,IAAIlE,MAAM,uBAEpB,IAAMq8C,EAAU7hD,KAAKo2D,UAAU1sD,EAAKslD,aACpC,IAAKnN,EAED,MADA,EAAA9iC,OAAOvZ,MAAM,CAAC,4BAA6BkE,IACrC,IAAIlE,MAAM,uBAEpB,GAAIq8C,EAAQmV,iBAAiBtG,aACpB7O,EAAQmV,iBAAiBtG,WAAWhnD,EAAM1J,KAAKk2D,oBAAqBl2D,KAAK+E,OAC1E,MAAM,IAAIS,MAAM,8CAAuCkE,IAK/D,IAFA,IAAM8lD,EAAsC,GAEpB,MAAA3N,EAAQmV,iBAAiBxH,OAAzB,eAAiC,CAApD,IAAM+H,EAAS,KACVC,EAAQx3D,KAAKy3D,eAAeF,EAAW1V,EAAQiN,mBACrD9uD,KAAK03D,wBAAwBhuD,EAAM8tD,EAAO3V,EAAQmV,iBAAkBO,GACpE/H,EAAO3qD,KAAK2yD,EAChB,CACAx3D,KAAKw2D,OAAO3xD,KAAK,CAAE2qD,OAAM,EAAEV,kBAAmBjN,EAAQiN,mBAC1D,CACJ,EAEQ,YAAA2I,eAAR,SAAuB9C,EAAmBvtD,GAQtC,MAAO,CACHw2C,UARa,IAAA+Z,cASbhD,UAAS,EACTnD,WATiD,GAUjDoG,YATkD,GAUlDC,aATmD,GAUnD1F,cAToD,GAUpD/xD,OATyC,CAAC,EAU1CgH,KAAI,EACJ6hC,SAVa,CAAC,EAYtB,EAEQ,YAAAyuB,wBAAR,SAAgChuD,EAA8B8tD,EAAkCM,EAAsCP,GAAtI,WACUlH,EAAgBmH,EAAMp3D,OACxBsJ,EAAK2mD,eACLhvD,OAAOiT,KAAK5K,EAAK2mD,eAAe55C,SAAQ,SAACxD,G,QAC/B7P,EAA0B,QAAlB,EAAAsG,EAAK2mD,qBAAa,eAAGp9C,GAEnC,IAAK7P,EAED,MADA,EAAA2b,OAAOvZ,MAAM,CAAC,wCAAyCyN,IACjD,IAAIzN,MAAM,oCAEpB,IAAMuyD,EAAyC,QAAzB,EAAAD,EAAYzH,qBAAa,eAAGp9C,GAElD,GADuB8kD,GAAiBA,EAAc/D,QAAU+D,EAAc/D,UAAYuD,EAAsD,IAA1CO,EAAYtI,OAAOj5C,QAAQghD,GAC7G,CAEhB,IAAMS,GAAYD,aAAa,EAAbA,EAAe9jD,OAAQhB,EACnC7P,QAAgC,IAAhBA,EAAMA,YAAiE,KAAhC20D,aAAa,EAAbA,EAAevF,cAIjEpvD,EAAMA,MAAMX,QAAU,EAE7B4tD,EAAc2H,GAAa,CACvB50D,MAA8B,IAAvBA,EAAMA,MAAMX,OAAeW,EAAMA,MAAM,GAAKA,EAAMA,OAG7D,EAAA2b,OAAOC,KAAK,CAAC,uCAAwC5b,IATrDitD,EAAc2H,GAAa,CACvB50D,MAAO20D,EAAcvF,cAWzBuF,GAAiBA,EAAcrE,kBAC/BrD,EAAc2H,GAAW50D,MAAQ20D,EAAcrE,gBAAgB,CAACrD,EAAc2H,GAAW50D,OAAQ,GAAM,GAE/G,CACJ,GAER,EAEQ,YAAA60D,sBAAR,SAA8Bl2B,GAC1B,I,0CAASx/B,EAAI,EAAGA,EAAIvC,KAAKw2D,OAAO/zD,OAAQF,IAAK,CAEzC,IAAM21D,EAAyC,QAA9B,EAAAl4D,KAAKk2D,oBAAoBr1D,aAAK,eAAG0B,GAClD,IAAK21D,EAGD,MADA,EAAAn5C,OAAOvZ,MAAM,CAAC,uCAAwCxF,KAAKw2D,OAAOj0D,KAC5D,IAAIiD,MAAM,kCAEpB,IAAM2yD,EAAkBn4D,KAAKw2D,OAAOj0D,GAC9B61D,EAAep4D,KAAKo2D,UAAU8B,EAASlJ,aAE7C,IAAKoJ,EAED,MADA,EAAAr5C,OAAOvZ,MAAM,CAAC,4BAA6B0yD,IACrC,IAAI1yD,MAAM,kCAKpB,IAHA,IAAM6yD,EAAgBH,EAAS7I,OAAS,CAAC,EACnCiJ,EAAYj3D,OAAOiT,KAAK+jD,GAAexxB,O,WAElC0xB,GACP,IAAMC,EAAOH,EAAcE,GACrBE,EAA0D,QAA5C,EAAqC,QAArC,EAAAL,EAAapB,iBAAiBvH,eAAO,eAAEJ,aAAK,eAAGkJ,GAC7DG,GAAgBD,aAAW,EAAXA,EAAaxkD,OAAQskD,EAErCI,EAAY,EAAKC,2BAA2BF,GAAe,IAClDD,GAAeA,EAAYzE,SAAWmE,EAAgB3I,OAAO2B,MAAK,SAAC/vD,GAAM,OAAAA,EAAEuzD,YAAc8D,EAAYzE,OAA5B,KAAyCmE,EAAgB3I,OAAO,IAClJ2C,cAActtD,KAAK8zD,GAEzB,IAAME,EAAcL,EAAK9uD,KACnBovD,EAAS,EAAKtC,OAAOqC,GAC3B,IAAKC,EAED,MADA,EAAA/5C,OAAOvZ,MAAM,CAAC,kCAAmCqzD,IAC3C,IAAIrzD,MAAM,kCAGpB,IAAMuzD,EAAclK,GAA+BiK,EAAOhK,mBAC1D,IAAKiK,EAED,MADA,EAAAh6C,OAAOvZ,MAAM,CAAC,kCAAmCszD,IAC3C,IAAItzD,MAAM,kCAEpB,IAAIwzD,EAAyC,QAAzB,EAAkB,QAAlB,EAAAD,EAAY3J,cAAM,eAAEC,aAAK,eAAGmJ,EAAKS,QAAU,MAC3DC,GAAe,EACnB,IAAKF,EACD,IAAK,IAAM/lD,KAAyB,QAAlB,EAAA8lD,EAAY3J,cAAM,eAAEC,MAC9Bp8C,EAAI1N,WAAW,MAAQ0N,EAAIkmD,SAAS,OACpCD,GAAe,EACfF,EAAyC,QAAzB,EAAkB,QAAlB,EAAAD,EAAY3J,cAAM,eAAEC,aAAK,eAAGp8C,IAIxD,IAAMmmD,EAAmBJ,EAAiBE,EAAeF,EAAc/kD,KAAKd,QAAQ,KAAMqlD,EAAKS,QAAU,IAAMD,EAAc/kD,KAAQukD,EAAKS,QAAU,KAC9II,EAAcL,GAAiBA,EAAchF,SAAW8E,EAAOtJ,OAAO2B,MAAK,SAAC/vD,GAAM,OAAAA,EAAEuzD,YAAcqE,EAAchF,OAA9B,KAA2C8E,EAAOtJ,OAAO,GAE7IqC,EAAWwH,EAAWxB,aAAa1G,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAASmlD,CAAX,IAE9CvH,IACDA,EAAW,EAAK+G,2BAA2BQ,GAC3CC,EAAWxB,aAAahzD,KAAKgtD,IAGjCA,EAASyH,kBAAkBz0D,KAAK8zD,EAAU/a,UAC1C+a,EAAUW,kBAAkBz0D,KAAKgtD,EAASjU,S,SA1CxB,MAAA0a,EAAA,e,EAAJ,MA+ClB,IAFA,IAAMiB,EAAiBrB,EAASv8B,QAAU,CAAC,EACrC69B,EAAan4D,OAAOiT,KAAKilD,G,WACpBE,GACP,IAAMr2D,EAAQm2D,EAAeE,GACzBC,EAA2D,QAA5C,EAAoC,QAApC,EAAAtB,EAAapB,iBAAiB5H,cAAM,eAAEzzB,cAAM,eAAG89B,GAC9DP,GAAe,EACnB,IAAKQ,EACD,IAAK,IAAMzmD,KAA2C,QAApC,EAAAmlD,EAAapB,iBAAiB5H,cAAM,eAAEzzB,OAChD1oB,EAAI1N,WAAW,MAAQ0N,EAAIkmD,SAAS,OACpCD,GAAe,EACfQ,EAA2D,QAA5C,EAAoC,QAApC,EAAAtB,EAAapB,iBAAiB5H,cAAM,eAAEzzB,cAAM,eAAG1oB,IAI1E,IAAM0mD,EAAeD,EAAgBR,EAAeQ,EAAazlD,KAAKd,QAAQ,KAAMsmD,GAAYC,EAAazlD,KAAQwlD,EAE/G5H,EAAW,EAAK+G,2BAA2Be,GAGjD,IAFeD,GAAgBA,EAAa1F,SAAWmE,EAAgB3I,OAAO2B,MAAK,SAAC/vD,GAAM,OAAAA,EAAEuzD,YAAc+E,EAAc1F,OAA9B,KAA2CmE,EAAgB3I,OAAO,IACtJgC,WAAW3sD,KAAKgtD,QAC8BvsD,IAA/ClC,EAAqCA,MAAqB,CAC3D,IAAMw2D,EAAiB,EAAK3C,eAAe7zD,EAAqCs2D,GAAgBA,EAAahG,iBAC7G3xB,EAAQ0vB,kBAAkBI,EAASjU,UAAYgc,CACnD,KAAO,SAAuE,IAA3Dx2D,EAAkDsG,KAsCjE,MADA,EAAAqV,OAAOvZ,MAAM,CAAC,qCAAsCpC,IAC9C,IAAIoC,MAAM,kCArChB,IAAMq0D,EAAaz2D,EAAkDsG,KAC/DowD,EAAqB12D,EAAkD61D,QAAU,QACjFc,EAAU,EAAKvD,OAAOqD,GAC5B,IAAKE,EAED,MADA,EAAAh7C,OAAOvZ,MAAM,CAAC,4CAA6CpC,IACrD,IAAIoC,MAAM,kCAEpB,IAAM,EAAeqpD,GAA+BkL,EAAQjL,mBAC5D,IAAK,EAED,MADA,EAAA/vC,OAAOvZ,MAAM,CAAC,+CAAgDpC,IACxD,IAAIoC,MAAM,kCAEpB,IAAI,EAA2C,QAA5B,EAAoB,QAApB,IAAaiqD,eAAO,eAAE9zB,cAAM,eAAGm+B,GAC9C,GAAe,EAEnB,IAAK,EAED,IAAK,IAAM7mD,KAA2B,QAApB,IAAaw8C,eAAO,eAAE9zB,OAChC1oB,EAAI1N,WAAW,MAAQ0N,EAAIkmD,SAAS,OACpC,GAAe,EACf,EAA2C,QAA5B,EAAoB,QAApB,IAAa1J,eAAO,eAAE9zB,cAAM,eAAG1oB,IAI1D,IAAM,EAAgB,EAAgB,EAAe,EAAagB,KAAKd,QAAQ,KAAM2mD,GAAqB,aAAY,EAAZ,EAAc7lD,KAAQ6lD,EAC1HE,EAAY,GAAgB,EAAahG,SAAW+F,EAAQvK,OAAO2B,MAAK,SAAC/vD,GAAM,OAAAA,EAAEuzD,YAAc,EAAcX,OAA9B,KAA2C+F,EAAQvK,OAAO,GAC3ImJ,EAAYqB,EAASpC,YAAYzG,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAAS,CAAX,IAE5C0kD,IACDA,EAAY,EAAKC,2BAA2B,GAAe,GAC3DoB,EAASpC,YAAY/yD,KAAK8zD,IAG9B9G,EAASyH,kBAAkBz0D,KAAK8zD,EAAU/a,UAC1C+a,EAAUW,kBAAkBz0D,KAAKgtD,EAASjU,SAI9C,C,SA3DmB,MAAA4b,EAAA,e,EAAJ,MA+DnB,GAAIpB,EAAapB,iBAAiB7C,qBAC9B,IAAwB,UAAAiE,EAAapB,iBAAiB7C,qBAA9B,eAAoD,CAAvE,IAAM8F,EAAS,KACV/kC,EAAQ+kC,EAAU/kC,MAClBC,EAAS8kC,EAAU9kC,OACnBs+B,EAAawG,EAAUxG,WAC7BzzD,KAAKk6D,uBAAuBhlC,EAAOC,EAAQgjC,EAAgB3I,OAAOyK,EAAU7F,iBAAkB+D,EAAgB3I,OAAOyK,EAAU5F,kBAAmBZ,EACtJ,CAGJ,GAAI2E,EAAapB,iBAAiBhH,eAAgB,CAC9C,IAAMhB,EAAmD,QAArC,EAAAhvD,KAAKk2D,oBAAoBa,oBAAY,eAAGmB,EAASlJ,aACrE,IAAKA,EAED,MADA,EAAAjwC,OAAOvZ,MAAM,CAAC,2CAA4C0yD,IACpD,IAAI1yD,MAAM,kCAEpB2yD,EAAgB3I,OAAS4I,EAAapB,iBAAiBhH,eACnDkI,EACAlJ,EACAoJ,EAAapB,iBACbh3D,KACAm4D,EAAgB3I,OAChBztB,EACA/hC,KAAK+E,MAEb,CACJ,CACJ,EAEQ,YAAA6zD,2BAAR,SAAmC3kD,EAAckmD,GAC7C,MAAO,CACHvc,UAAU,IAAA+Z,cACV1jD,KAAI,EACJmmD,gBAAiBD,EAAW,EAAiC,EAC7Db,kBAAmB,GAE3B,EAEQ,YAAAY,uBAAR,SAA+BhlC,EAAeC,EAAgBklC,EAA4CC,EAA6C7G,GACnJ,IAAM8G,EAAa9G,EAAa4G,EAAgB7I,WAAa6I,EAAgBxC,aACvE2C,EAAc/G,EAAa6G,EAAiB1C,YAAc0C,EAAiBnI,cAC3EsI,EAAkBF,EAAWpJ,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAASihB,CAAX,KAAqBl1B,KAAK44D,2BAA2B1jC,GAC9FwlC,EAAmBF,EAAYrJ,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAASkhB,CAAX,KAAsBn1B,KAAK44D,2BAA2BzjC,GAAQ,GAE1GolC,EAAWpJ,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAASihB,CAAX,KACxBqlC,EAAW11D,KAAK41D,GAEfD,EAAYrJ,MAAK,SAAC7uD,GAAM,OAAAA,EAAE2R,OAASkhB,CAAX,KACzBqlC,EAAY31D,KAAK61D,GAGrBD,EAAgBnB,kBAAkBz0D,KAAK61D,EAAiB9c,UACxD8c,EAAiBpB,kBAAkBz0D,KAAK41D,EAAgB7c,SAC5D,EAEO,YAAA+V,gBAAP,SAAuBxrD,GACnB,MAAO,kBAAoBA,CAC/B,EAEO,YAAAwyD,qBAAP,WACI,IAAM54B,EAAuC,CACzC6b,UAAU,IAAA+Z,cACViD,eAAgB,CAAC,EACjBnJ,kBAAmB,CAAC,GAExBzxD,KAAKi4D,sBAAsBl2B,GAC3B,IAAK,IAAIx/B,EAAI,EAAGA,EAAIvC,KAAKq2D,iBAAiB5zD,OAAQF,IAAK,CACnD,IAAMixD,EAAWxzD,KAAKq2D,iBAAiB9zD,GACvCw/B,EAAQ64B,eAAe56D,KAAK2zD,gBAAgBpxD,IAAMixD,CACtD,CAIA,MAAO,CACHqH,aAAa,EACbC,UAJc96D,KAAKw2D,OAAOpB,QAAO,SAACC,EAAK0F,GAAQ,OAAA1F,EAAI2F,OAAOD,EAAIvL,OAAf,GAAwB,IAKvEyL,kBAAmB,CAACl5B,GAE5B,EACJ,EAncA,GCrBM,GAAO,oBAgBb,cAgBI,WAAoB9lB,GAAA,KAAAA,QAAAA,EAZJ,KAAAhI,KAAO,GAanBjU,KAAK2mC,QAAU3mC,KAAKic,QAAQ2qB,gBAAgB,IAC5C5mC,KAAKk7D,gBAAiB,SAAyBl7D,KAAKic,QAAQnJ,MAE5DmJ,EAAQonB,yBAA0B,EAIlC,IAAM9kB,EAAQtC,EAAQ2+B,aAClBr8B,GACA48C,GAA6B58C,EAErC,CA4BJ,OA1BW,YAAAP,QAAP,WACKhe,KAAKic,QAAkB,YACjBjc,KAAKk7D,cAChB,EAEa,YAAAjhB,QAAb,W,2HACI,OAAKj6C,KAAKic,QAAQ2+B,cAAiB56C,KAAKk7D,gBAGlC38C,EAAQve,KAAKic,QAAQ2+B,cACrBwgB,EAAsD,QAA5B,EAAAp7D,KAAKic,QAAQnJ,KAAK5H,kBAAU,eAAEmwD,oBAMxDC,EAAc,IAAI,EAAAC,qBAAqB,CAAEh9C,MAAK,IAC9Ci9C,EAASJ,EAAwBI,OAAOh7D,KAAI,SAACi7D,GAE/C,OADe,IAAIC,GAAoCD,EAAO,EAAKx/C,QAAQnJ,KAAM,EAAKmJ,SACxE0+C,sBAClB,IAEA,GAAM33D,QAAQ6iC,IAAI21B,EAAOh7D,KAAI,SAACi7D,GAAU,WAAAE,qBAAoBF,EAAO,CAAEH,YAAW,EAAEM,cAAe,EAAKV,gBAA9D,OATpC,KANA,I,cAeJ,SAEAI,EAAYtzB,Q,YAEpB,EAxDA,GA8DO,SAASmzB,GAA6B58C,IAIzC,SAAuB,wDAAyD,CAC5ElX,IAAK,WACD,OAAKkX,EAAMs9C,aAGJ,EAAA7pD,WAAWC,mBAAmBsM,EAAMs9C,aAAa90C,kBAAkBwpB,YAF/D,IAAI,EAAAv+B,WAAWmlD,IAAKA,IAAKA,IAAKA,IAG7C,EACA/vD,KAAM,aACNM,UAAW,WAAM,OAAA6W,EAAMs9C,YAAN,KAGrB,SAAuB,wDAAyD,CAC5Ex0D,IAAK,WACD,OAAKkX,EAAMs9C,aAGJt9C,EAAMs9C,aAAajyD,SAFf,IAAI,EAAAgK,QAAQujD,IAAKA,IAAKA,IAGrC,EACA/vD,KAAM,UACNM,UAAW,WAAM,OAAA6W,EAAMs9C,YAAN,KAIrB,SAAuB,wDAAyD,CAC5Ex0D,IAAK,SAACkL,G,QACF,OAAkD,QAA3C,EAAgC,QAAhC,EAAAA,EAAU7R,8BAAsB,eAAEo7D,iBAAS,QACtD,EACA10D,KAAM,UACNM,UAAW,SAAC6K,GACR,OAAOA,EAAU7R,sBACrB,KAEJ,SAAuB,sDAAuD,CAC1E2G,IAAK,SAACkL,G,QACF,OAA8C,QAAtC,EAAgC,QAAhC,EAAAA,EAAU7R,8BAAsB,eAAEoyD,YAAI,QAAI,GAAK,EAC3D,EACA1rD,KAAM,SACNM,UAAW,SAAC6K,GACR,OAAOA,EAAU7R,sBACrB,KAEJ,SAAuB,sDAAuD,CAC1E2G,IAAK,SAACkL,G,QACF,OAA4C,QAApC,EAAgC,QAAhC,EAAAA,EAAU7R,8BAAsB,eAAEq7D,UAAE,QAAI,GAAK,EACzD,EACA30D,KAAM,SACNM,UAAW,SAAC6K,GACR,OAAOA,EAAU7R,sBACrB,KAGJ,SAAuB,uDAAwD,CAC3E2G,IAAK,SAACkL,G,QACF,OAA2D,QAAnD,EAAgC,QAAhC,EAAAA,EAAU7R,8BAAsB,eAAEs7D,yBAAiB,QAAI,GAAK,EACxE,EACA50D,KAAM,SACNM,UAAW,SAAC6K,GACR,OAAOA,EAAU7R,sBACrB,KAGJ,SAAuB,8DAA+D,CAClF2G,IAAK,SAACkL,G,QACF,OAA2D,QAAnD,EAAgC,QAAhC,EAAAA,EAAU7R,8BAAsB,eAAEs7D,yBAAiB,QAAI,GAAK,EACxE,EACA50D,KAAM,SACNM,UAAW,SAAC6K,GACR,OAAOA,EAAU7R,sBACrB,GAER,EAGA,IAAAu7D,mBAAkB,GAAM,6BAA6B,2D,wDACzC,SAAM,uC,OAAd,MAAO,CAAP,EAAQ,SAA+DC,2B,UAG3Et6B,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI4gB,GAAkB5gB,EAAtB,ICxK9C,IAAM,GAAO,uBAcb,SAAuB,mDAAoD,CACvEpzC,IAAK,SAACqC,GACF,IAAMyyD,EAAKzyD,EAAK3I,sBAChB,OAAIo7D,QAAuB72D,IAAjB62D,EAAGC,WACFD,EAAGC,SAGlB,EACAz0D,IAAK,SAACvE,EAAgBsG,G,QACU,QAA5B,EAAAA,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAK4pD,mBAAoB,CAC7B,IACI3yD,EAAK3I,wBACJ2I,EAAK3I,sBAAuCq7D,UAAYh5D,GAEjC,QAA5B,EAAAsG,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAK2pD,UAAYh5D,CACrB,GACJ,EACAsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,oBACxBT,KAAM,YAOV,kBAeI,WAAYqzC,GAXI,KAAAxmC,KAAO,GAYnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CAwBJ,OAtBiB,YAAAqT,QAAb,W,4FAC2B,QAAvB,EAAAj6C,KAAKic,QAAQnJ,KAAKjS,aAAK,SAAE4V,SAAQ,SAAC/M,G,YACF,QAA5B,EAAAA,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAK4pD,mBAAoB,CAC7B,KAEmB,QAAf,EAAA3yD,EAAKwB,kBAAU,eAAEoxD,uBACoC,KAAlC,QAAf,EAAA5yD,EAAKwB,kBAAU,eAAEoxD,oBAAoBC,WACjC7yD,EAAK3I,wBACJ2I,EAAK3I,sBAAuCq7D,WAAY,GAEjC,QAA5B,EAAA1yD,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAK2pD,WAAY,CACrB,IAGZ,I,WAGG,YAAAp+C,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EACJ,EA1CA,GA4CA2lB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI6hB,GAAoB7hB,EAAxB,ICtF9C,IAAM,GAAO,yBAcbiV,GAAoC,iBAAkB,GAAM,CAExDF,OAAQ,CAAC,8BAAD,oDAAkG,+CAC1Ga,cAAe,CACXmM,gBAAiB,CAAEvoD,KAAM,mBACzBwoD,UAAW,CACPxoD,KAAM,WACN+/C,QAAS,4BACTN,gBAAe,SAACt8C,GACZ,MAAO,CAAC,cAAgBA,EAAK,GACjC,IAGRq4C,QAAS,CACL9zB,OAAQ,CACJ+gC,kBAAmB,CAAEzoD,KAAM,QAAS+/C,QAAS,yBAC7C2I,gBAAiB,CAAE1oD,KAAM,aACzB2oD,eAAgB,CAAE3oD,KAAM,eACxB4oD,mBAAoB,CAAE5oD,KAAM,eAEhCo7C,MAAO,CACHQ,IAAK,CAAE57C,KAAM,UAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,QACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,SACPC,OAAQ,aACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAU+B,EAAS7B,EAAmBruB,EAASkzB,G,gBAE7EzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GACtE+tD,EAAiBpwD,OAASowD,EAAiBpwD,QAAU,CAAC,EACtDowD,EAAiBpwD,OAAOC,KAAO40D,EAE/B,IAAMwH,EAAkD,QAAtC,EAAuB,QAAvB,EAAAxM,EAAUI,qBAAa,eAAc,iBAAC,eAAEjtD,MAAM,GAChE,QAAkBkC,IAAdm3D,GAAgD,iBAAdA,EAClC,MAAM,IAAIj3D,MAAM,wCAEpB,IAAMs3D,EAAe,cAAgBL,EAQrC,OANArM,EAAkB,GAAGhwD,OAAOozD,SAAWsJ,EACvC/6B,EAAQ64B,eAAekC,GAAgB,CACnCnI,UAAW,OACXv8C,GAAwD,QAApD,EAAiB,QAAjB,EAAA68C,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAEqX,GAC1DwlC,SAA8D,QAApD,EAAiB,QAAjB,EAAAqX,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAE68C,UAE7DwS,CACX,KAIJ,SAAuB,yDAA0D,CAC7E/oD,IAAK,SAACqC,GACF,IAAMyyD,EAAKzyD,EAAK3I,sBAChB,OAAIo7D,QAAwB72D,IAAlB62D,EAAGY,YACFZ,EAAGY,UAGlB,EACAp1D,IAAK,SAACvE,EAAgBsG,G,MACU,QAA5B,EAAAA,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAKsqD,WAAa35D,CACtB,GACJ,EACAsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,qBACxBT,KAAM,YAOV,kBAeI,WAAYqzC,GAXI,KAAAxmC,KAAO,GAYnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CAeJ,OAbiB,YAAAqT,QAAb,W,4FAC2B,QAAvB,EAAAj6C,KAAKic,QAAQnJ,KAAKjS,aAAK,SAAE4V,SAAQ,SAAC/M,G,WACX,QAAf,EAAAA,EAAKwB,kBAAU,eAAE8xD,0BAAiF,KAAxC,QAAf,EAAAtzD,EAAKwB,kBAAU,eAAE8xD,uBAAuBC,cACzD,QAA1B,EAAAvzD,EAAK3I,6BAAqB,SAAEmtD,iBAAiBz3C,SAAQ,SAAChE,GAClDA,EAAKsqD,YAAa,CACtB,IAER,I,WAGG,YAAA/+C,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EACJ,EAjCA,GAmCA2lB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAIuiB,GAAuBviB,EAA3B,IC9I9C,IAAM,GAAO,wBAcPyiB,GAAwB,yBAC9BxN,GAAoC,kBAAmB,GAAM,CAEzDF,OAAQ,CAAC,iCAAD,oDAAqG,+CAC7Ga,cAAe,CACXmM,gBAAiB,CAAEvoD,KAAM,mBACzBwoD,UAAW,CACPxoD,KAAM,WACN+/C,QAAS,4BACTN,gBAAe,SAACt8C,GACZ,MAAO,CAAC8lD,GAAwB9lD,EAAK,GACzC,IAGRq4C,QAAS,CACL9zB,OAAQ,CACJwhC,eAAgB,CAAElpD,KAAM,QAAS+/C,QAAS,yBAC1C2I,gBAAiB,CAAE1oD,KAAM,cAE7Bo7C,MAAO,CACHQ,IAAK,CAAE57C,KAAM,UAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,aACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,SACPC,OAAQ,mBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAU+B,EAAS7B,EAAmBruB,EAASkzB,G,gBAE7EzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GACtE+tD,EAAiBpwD,OAASowD,EAAiBpwD,QAAU,CAAC,EACtDowD,EAAiBpwD,OAAOC,KAAO40D,EAE/B,IAAMwH,EAAkD,QAAtC,EAAuB,QAAvB,EAAAxM,EAAUI,qBAAa,eAAc,iBAAC,eAAEjtD,MAAM,GAChE,QAAkBkC,IAAdm3D,GAAgD,iBAAdA,EAClC,MAAM,IAAIj3D,MAAM,wCAEpB,IAAMs3D,EAAeI,GAAwBT,EAQ7C,OANArM,EAAkB,GAAGhwD,OAAOozD,SAAWsJ,EACvC/6B,EAAQ64B,eAAekC,GAAgB,CACnCnI,UAAW,OACXv8C,GAAwD,QAApD,EAAiB,QAAjB,EAAA68C,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAEqX,GAC1DwlC,SAA8D,QAApD,EAAiB,QAAjB,EAAAqX,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAE68C,UAE7DwS,CACX,IAGJ,IAAMgN,GAAuB,wBAC7B1N,GAAoC,mBAAoB,GAAM,CAE1DF,OAAQ,CAAC,gCAAD,oDAAoG,+CAC5Ga,cAAe,CACXmM,gBAAiB,CAAEvoD,KAAM,mBACzBwoD,UAAW,CACPxoD,KAAM,WACN+/C,QAAS,4BACTN,gBAAe,SAACt8C,GACZ,MAAO,CAACgmD,GAAuBhmD,EAAK,GACxC,IAGRq4C,QAAS,CACL9zB,OAAQ,CACJwhC,eAAgB,CAAElpD,KAAM,QAAS+/C,QAAS,yBAC1C2I,gBAAiB,CAAE1oD,KAAM,cAE7Bo7C,MAAO,CACHQ,IAAK,CAAE57C,KAAM,UAGrBkgD,qBAAsB,CAClB,CACIj/B,MAAO,aACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,QACPC,OAAQ,QACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,GAEhB,CACIv+B,MAAO,SACPC,OAAQ,mBACRi/B,gBAAiB,EACjBC,iBAAkB,EAClBZ,YAAY,IAGpBzD,eAAc,SAACC,EAAWe,EAAcd,EAAU+B,EAAS7B,EAAmBruB,EAASkzB,G,gBAE7EzE,EAAmBJ,EAAkBA,EAAkB3tD,OAAS,GACtE+tD,EAAiBpwD,OAASowD,EAAiBpwD,QAAU,CAAC,EACtDowD,EAAiBpwD,OAAOC,KAAO40D,EAE/B,IAAMwH,EAAkD,QAAtC,EAAuB,QAAvB,EAAAxM,EAAUI,qBAAa,eAAc,iBAAC,eAAEjtD,MAAM,GAChE,QAAkBkC,IAAdm3D,GAAgD,iBAAdA,EAClC,MAAM,IAAIj3D,MAAM,wCAEpB,IAAMs3D,EAAeM,GAAuBX,EAQ5C,OANArM,EAAkB,GAAGhwD,OAAOozD,SAAWsJ,EACvC/6B,EAAQ64B,eAAekC,GAAgB,CACnCnI,UAAW,OACXv8C,GAAwD,QAApD,EAAiB,QAAjB,EAAA68C,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAEqX,GAC1DwlC,SAA8D,QAApD,EAAiB,QAAjB,EAAAqX,aAAU,EAAVA,EAAYp0D,aAAK,eAAG47D,GAAW17D,6BAAqB,eAAE68C,UAE7DwS,CACX,KAGJ,SAAuB,uDAAwD,CAC3E/oD,IAAK,SAACqC,GACF,IAAMyyD,EAAKzyD,EAAK3I,sBAChB,OAAIo7D,QAA2C72D,IAArC62D,EAAGkB,+BACFlB,EAAGkB,6BAGlB,EACA11D,IAAK,SAACvE,EAAgBsG,G,MACU,QAA5B,EAAAA,EAAKQ,+BAAuB,SAAEuM,SAAQ,SAAChE,GACnCA,EAAK4qD,+BAAiCj6D,CAC1C,GACJ,EACAsE,UAAW,SAACgC,GAAgB,OAAAA,EAAK3I,qBAAL,EAC5B8G,gBAAiB,CAAC,WAAM,wCACxBT,KAAM,YAQV,kBAeI,WAAYqzC,GAXI,KAAAxmC,KAAO,GAYnBjU,KAAKic,QAAUw+B,EACfz6C,KAAK2mC,QAAU8T,EAAO7T,gBAAgB,GAC1C,CAgBJ,OAdiB,YAAAqT,QAAb,W,4FAC2B,QAAvB,EAAAj6C,KAAKic,QAAQnJ,KAAKjS,aAAK,SAAE4V,SAAQ,SAAC/M,G,WAEX,QAAf,EAAAA,EAAKwB,kBAAU,eAAEoyD,yBAA8E,KAAtC,QAAf,EAAA5zD,EAAKwB,kBAAU,eAAEoyD,sBAAsBC,aACvD,QAA1B,EAAA7zD,EAAK3I,6BAAqB,SAAEmtD,iBAAiBz3C,SAAQ,SAAChE,GAClDA,EAAK4qD,+BAAgC,CACzC,IAER,I,WAGG,YAAAr/C,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EACJ,EAlCA,GAoCA2lB,GAAwB,IACxBF,GAAsB,IAAM,GAAM,SAAC+Y,GAAW,WAAI6iB,GAAsB7iB,EAA1B,IC/M9C,IAAM,GAAO,mBAoBb,cAwBI,WAAmBA,GApBH,KAAAxmC,KAAO,GAKhB,KAAA0yB,SAAU,EAgBb3mC,KAAKic,QAAUw+B,CACnB,CAmCJ,OAhDY,YAAA+iB,cAAR,SAAsB5lB,EAAmC6lB,GACrD,GAAIA,EAASnxB,QAAUjrC,OAAOiT,KAAKmpD,EAASnxB,QAAQ7pC,OAAS,EAAG,CAC5D,IAAMwmC,EAAY2O,EAAc3O,SAAW2O,EAAc3O,UAAY,CAAC,GACxDA,EAASn2B,KAAOm2B,EAASn2B,MAAQ,CAAC,GAC3Cw5B,OAASmxB,EAASnxB,MAC3B,CACJ,EAUO,YAAAtuB,QAAP,WACKhe,KAAKic,QAAkB,IAC5B,EAKO,YAAAsrB,cAAP,SAAqBxF,EAAiBr4B,EAAatH,GAAnD,WACI,OAAOpC,KAAKic,QAAQsrB,cAAcxF,EAASr4B,GAAM,SAAC0+B,GAC9C,EAAKo1B,cAAcp1B,EAAsB1+B,GACzCtH,EAAOgmC,EACX,GACJ,EAKO,YAAAE,gBAAP,SAAuBvG,EAAiBv5B,EAAiBpG,GAAzD,WACI,OAAOpC,KAAKic,QAAQqsB,gBAAgBvG,EAASv5B,GAAQ,SAAC+/B,GAClD,EAAKi1B,cAAcj1B,EAAe//B,GAClCpG,EAAOmmC,EACX,GACJ,EAKO,YAAAyL,eAAP,SAAsBjS,EAAiBz7B,EAAqBg/B,GACxD,IAAM5+B,EAAkB1G,KAAKic,QAAQ+3B,eAAejS,EAASz7B,EAAUg/B,GAEvE,OADAtlC,KAAKw9D,cAAc92D,EAAiBJ,GAC7BI,CACX,EACJ,EA7DA,GA+DAk7B,GAAwB,IACxBF,GAAsB,IAAM,GAAO,SAAC+Y,GAAW,WAAIijB,GAAiBjjB,EAArB,I,cCrF/C,2BASW,KAAA7uC,UAAgC,EA+M3C,QAlMW,YAAA+xD,SAAP,SAAgBp/C,EAAcnH,EAA4BC,EAAiByX,GACvE,KAAI1X,aAAgBO,aAApB,CAcA,IATA,IAIIjM,EAJEkyD,EAAQxmD,EAAK1R,MAAM,MAEnBm4D,EAAoB,MAItBv3D,EAAuC,KAGlC/D,EAAI,EAAGA,EAAIq7D,EAAMn7D,OAAQF,IAAK,CACnC,IAAMu7D,EAAOF,EAAMr7D,GAAGw7D,OAGtB,GAAoB,IAAhBD,EAAKr7D,QAAmC,MAAnBq7D,EAAKE,OAAO,GAArC,CAKA,IAAMC,EAAMH,EAAKvnD,QAAQ,KACrBtD,EAAMgrD,GAAO,EAAIH,EAAKz5C,UAAU,EAAG45C,GAAOH,EAC9C7qD,EAAMA,EAAIirD,cAGV,IAAM96D,EAAgB66D,GAAO,EAAIH,EAAKz5C,UAAU45C,EAAM,GAAGF,OAAS,GAGlE,GAAY,WAAR9qD,EAGI3M,GAEAtG,KAAK4L,UAAU/G,KAAKyB,GAKxBiY,EAAMsQ,yBAA2BC,GACjCxoB,EAAW,IAAI,EAAAsqB,iBAAiBxtB,EAAOmb,IAC9ByQ,iBAAmBF,EAC5BvQ,EAAMsQ,wBAAyB,OAC5B,GAAY,OAAR5b,GAAgB3M,EAIvBoF,EAAkBtI,EAAMsC,MAAMm4D,EAAmB,GAAGr9D,IAAI29D,YAGxD73D,EAAS6zB,aAAe,EAAA9G,OAAOxf,UAAUnI,QACtC,GAAY,OAARuH,GAAgB3M,EAIvBoF,EAAkBtI,EAAMsC,MAAMm4D,EAAmB,GAAGr9D,IAAI29D,YAGxD73D,EAAS26B,aAAe,EAAA5N,OAAOxf,UAAUnI,QACtC,GAAY,OAARuH,GAAgB3M,EAIvBoF,EAAkBtI,EAAMsC,MAAMm4D,EAAmB,GAAGr9D,IAAI29D,YAGxD73D,EAAS86B,cAAgB,EAAA/N,OAAOxf,UAAUnI,QACvC,GAAY,OAARuH,GAAgB3M,EAEvBoF,EAAQtI,EAAMsC,MAAMm4D,EAAmB,GAAGr9D,IAAI29D,YAC9C73D,EAASwF,cAAgB,EAAAunB,OAAOxf,UAAUnI,QACvC,GAAY,OAARuH,GAAgB3M,EAEvBA,EAASw6B,cAAgBq9B,WAAW/6D,QACjC,GAAY,MAAR6P,GAAe3M,EAEtBA,EAASsG,MAAQuxD,WAAW/6D,QAIzB,GAAY,WAAR6P,GAAoB3M,EAG3BA,EAAS2uC,eAAiBmpB,EAAc/3D,YAAYgR,EAASjU,EAAOmb,QACjE,GAAY,WAARtL,GAAoB3M,EAE3BA,EAASo4C,eAAiB0f,EAAc/3D,YAAYgR,EAASjU,EAAOmb,QACjE,GAAY,WAARtL,GAAoB3M,EAG3BA,EAAS0J,gBAAkBouD,EAAc/3D,YAAYgR,EAASjU,EAAOmb,QAClE,GAAY,WAARtL,QAQJ,GAAY,aAARA,GAAsB3M,EAAU,CAEvC,IAAMq1B,EAASv4B,EAAMsC,MAAMm4D,GACrBQ,EAAsB1iC,EAAOplB,QAAQ,OACvC+nD,EAAmC,KAEnCD,GAAuB,IACvBC,EAAiB3iC,EAAO0iC,EAAsB,GAC9C1iC,EAAOwY,OAAOkqB,EAAqB,IAGvC/3D,EAAS0H,YAAcowD,EAAc/3D,YAAYgR,EAASskB,EAAOxQ,KAAK,KAAM5M,GACxEjY,EAAS0H,aAAkC,OAAnBswD,IACxBh4D,EAAS0H,YAAY9B,MAAQiyD,WAAWG,GAEhD,KAAmB,UAARrrD,GAAmB3M,IAE1BA,EAASi4D,eAAiBH,EAAc/3D,YAAYgR,EAASjU,EAAOmb,GAlGxE,CAiIJ,CAEIjY,GACAtG,KAAK4L,UAAU/G,KAAKyB,EAtJxB,CAwJJ,EAae,EAAAD,YAAf,SAA2BgR,EAAiBjU,EAAemb,GACvD,IAAKnb,EACD,OAAO,KAGX,IAAIkV,EAAMjB,EAEV,GAAgB,UAAZA,EAAqB,CACrB,IAAImnD,EAAgBp7D,EAAMq7D,YAAY,OACf,IAAnBD,IACAA,EAAgBp7D,EAAMq7D,YAAY,MAIlCnmD,GADAkmD,GAAiB,EACVp7D,EAAMihB,UAAUm6C,EAAgB,GAEhCp7D,CAEf,MAGIkV,GAAOlV,EAGX,OAAO,IAAI,EAAAslB,QAAQpQ,EAAKiG,GAAO,EAAO6/C,EAAcM,iBACxD,EAnNc,EAAAA,kBAAmB,EAoNrC,C,CAxNA,GCsBA,cA2EI,WAAmBC,EAAyBC,EAAiCC,GArCrE,KAAAC,WAA6B,GAC7B,KAAAC,SAA2B,GAC3B,KAAAC,KAAuB,GACvB,KAAAC,QAAyB,GACzB,KAAAC,WAA4B,GAC5B,KAAAC,eAAoC,GAEpC,KAAAC,mBAAoC,GACpC,KAAAC,2BAA6C,GAC7C,KAAAC,sBAAwC,GACxC,KAAAC,yBAA0C,GAC1C,KAAAC,0BAA4C,GAC5C,KAAAC,cAA0F,GAC1F,KAAAC,sBAAwB,EACxB,KAAAC,YAAsB,EACtB,KAAAC,8BAA+C,GAC/C,KAAAC,2BAA4C,GAC5C,KAAAC,4BAA6C,GAC7C,KAAAC,uBAAwC,GACxC,KAAAC,WAA4B,GAC5B,KAAAC,qBAA+B,GAC/B,KAAAC,aAAuB,GACvB,KAAAC,WAAqB,EACrB,KAAAC,kBAA4B,EAC5B,KAAAC,WAAa,IAAI,EAAA5zD,OAAO,GAAK,GAAK,GAAK,GAKvC,KAAA6zD,cAAwB,EAS5BtgE,KAAKugE,eAAiB5B,EACtB3+D,KAAKwgE,oBAAsB5B,EAC3B5+D,KAAKygE,gBAAkB5B,CAC3B,CA64BJ,OAl4BY,YAAA6B,WAAR,SAAmBC,EAA4DxqD,GACtEwqD,EAAIxqD,EAAI,MACTwqD,EAAIxqD,EAAI,IAAM,CAAE2Z,QAAS,GAAIq0B,IAAK,KAEtC,IAAMA,EAAMwc,EAAIxqD,EAAI,IAAI2Z,QAAQvZ,QAAQJ,EAAI,IAE5C,OAAgB,IAATguC,GAAc,EAAIwc,EAAIxqD,EAAI,IAAIguC,IAAIA,EAC7C,EAEQ,YAAAyc,aAAR,SAAqBD,EAA+ExqD,GAC3FwqD,EAAIxqD,EAAI,MACTwqD,EAAIxqD,EAAI,IAAM,CAAE2Z,QAAS,GAAIq0B,IAAK,GAAI0c,GAAI,KAE9C,IAAM1c,EAAMwc,EAAIxqD,EAAI,IAAI2Z,QAAQvZ,QAAQJ,EAAI,IAE5C,OAAW,GAAPguC,GAAYhuC,EAAI,KAAOwqD,EAAIxqD,EAAI,IAAI0qD,GAAG1c,GAC/Bwc,EAAIxqD,EAAI,IAAIguC,IAAIA,IAEnB,CACZ,EAgBQ,YAAA2c,SAAR,SACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,IAAIz6D,GAQY,KANZA,EADA5G,KAAKygE,gBAAgBa,eACZthE,KAAK4gE,aAAa5gE,KAAKy/D,cAAe,CAACsB,EAAuBE,EAAqBD,IAEnFhhE,KAAK0gE,WAAW1gE,KAAKy/D,cAAe,CAACsB,EAAuBE,MAQrEjhE,KAAKo/D,mBAAmBv6D,KAAK7E,KAAKq/D,2BAA2B58D,QAG7DzC,KAAKq/D,2BAA2Bx6D,KAAKq8D,GAIrCC,EAAuBA,QAAAA,EAAwB,IAAI,EAAA55D,QAAQ,EAAG,GAC9DvH,KAAKs/D,sBAAsBz6D,KAAKs8D,GAGhCnhE,KAAKw/D,0BAA0B36D,KAAKu8D,QAEN97D,IAA1B+7D,GAGArhE,KAAKu/D,yBAAyB16D,KAAKw8D,GAIvCrhE,KAAKy/D,cAAcsB,GAAuBjxC,QAAQjrB,KAAKo8D,GACvDjhE,KAAKy/D,cAAcsB,GAAuB5c,IAAIt/C,KAAK7E,KAAK0/D,yBACpD1/D,KAAKygE,gBAAgBa,gBACrBthE,KAAKy/D,cAAcsB,GAAuBF,GAAGh8D,KAAKm8D,IAMtDhhE,KAAKo/D,mBAAmBv6D,KAAK+B,EAErC,EAKQ,YAAA26D,YAAR,WACI,IAEI,IAAK,IAAI3P,EAAI,EAAGA,EAAI5xD,KAAKq/D,2BAA2B58D,OAAQmvD,IAExD5xD,KAAK4/D,8BAA8B/6D,KAC/B7E,KAAKq/D,2BAA2BzN,GAAGhqD,EAAI5H,KAAKwhE,gBAC5CxhE,KAAKq/D,2BAA2BzN,GAAG7tD,EACnC/D,KAAKq/D,2BAA2BzN,GAAG6P,GAEvCzhE,KAAK8/D,4BAA4Bj7D,KAC7B7E,KAAKw/D,0BAA0B5N,GAAGhqD,EAAI5H,KAAKwhE,gBAC3CxhE,KAAKw/D,0BAA0B5N,GAAG7tD,EAClC/D,KAAKw/D,0BAA0B5N,GAAG6P,GAGtCzhE,KAAK+/D,uBAAuBl7D,KAAK7E,KAAKs/D,sBAAsB1N,GAAGhqD,EAAG5H,KAAKs/D,sBAAsB1N,GAAG7tD,GAC5F/D,KAAKygE,gBAAgBiB,oBAErB1hE,KAAK6/D,2BAA2Bh7D,KAC5B7E,KAAKu/D,yBAAyB3N,GAAG/kD,EACjC7M,KAAKu/D,yBAAyB3N,GAAGvtD,EACjCrE,KAAKu/D,yBAAyB3N,GAAGxwD,EACjCpB,KAAKu/D,yBAAyB3N,GAAGnxD,GAK7CT,KAAKq/D,2BAA2B58D,OAAS,EACzCzC,KAAKw/D,0BAA0B/8D,OAAS,EACxCzC,KAAKs/D,sBAAsB78D,OAAS,EACpCzC,KAAKu/D,yBAAyB98D,OAAS,EACvCzC,KAAKy/D,cAAch9D,OAAS,EAC5BzC,KAAK0/D,sBAAwB,CACjC,CAAE,MAAOn8D,GACL,MAAM,IAAIiC,MAAM,gDACpB,CACJ,EAeQ,YAAAm8D,cAAR,SAAsB3mB,EAAsBt2C,GAExC,IAAK,IAAIk9D,EAAYl9D,EAAGk9D,EAAY5mB,EAAMv4C,OAAS,EAAGm/D,IAElD5hE,KAAK6hE,cAAc7mB,EAAO4mB,EASlC,EAOQ,YAAAE,UAAR,SAAkB35D,G,MACd,OAAInI,KAAKygE,gBAAgBiB,mBACQ,QAAtB,EAAA1hE,KAAKk/D,WAAW/2D,UAAM,QAAInI,KAAKi/D,QAAQ92D,QAE9C,CAER,EAQQ,YAAA45D,mCAAR,SAA2C9mB,EAAqBv2C,GAE5D1E,KAAK2hE,cAAc1mB,EAAMv2C,GAGzB,IAAK,IAAImtB,EAAI,EAAGA,EAAI7xB,KAAKggE,WAAWv9D,OAAQovB,IAAK,CAE7C,IAAMkvC,EAAwB/8C,SAAShkB,KAAKggE,WAAWnuC,IAAM,EAE7D7xB,KAAK8gE,SACDC,EACA,EACA,EACA/gE,KAAK8+D,WAAWiC,GAChB,EAAAx5D,QAAQmrB,OACR,EAAA9e,QAAQouD,KACRhiE,KAAK8hE,UAAUf,GAEvB,CAEA/gE,KAAKggE,WAAWv9D,OAAS,CAC7B,EAQQ,YAAAw/D,mCAAR,SAA2ChnB,EAAqBv2C,G,MAE5D1E,KAAK2hE,cAAc1mB,EAAMv2C,GACzB,IAAK,IAAImtB,EAAI,EAAGA,EAAI7xB,KAAKggE,WAAWv9D,OAAQovB,IAAK,CAG7C,IAAMwO,EAAQrgC,KAAKggE,WAAWnuC,GAAGnsB,MAAM,KAEjCq7D,EAAwB/8C,SAASqc,EAAM,IAAM,EAE7C2gC,EAAmBh9C,SAASqc,EAAM,IAAM,EAE9CrgC,KAAK8gE,SACDC,EACAC,EACA,EACAhhE,KAAK8+D,WAAWiC,GACW,QAA3B,EAAA/gE,KAAKg/D,KAAKgC,UAAiB,QAAI,EAAAz5D,QAAQmrB,OACvC,EAAA9e,QAAQouD,KACRhiE,KAAK8hE,UAAUf,GAEvB,CAGA/gE,KAAKggE,WAAWv9D,OAAS,CAC7B,EAQQ,YAAAy/D,mCAAR,SAA2CjnB,EAAqBv2C,G,QAE5D1E,KAAK2hE,cAAc1mB,EAAMv2C,GAEzB,IAAK,IAAImtB,EAAI,EAAGA,EAAI7xB,KAAKggE,WAAWv9D,OAAQovB,IAAK,CAG7C,IAAMwO,EAAQrgC,KAAKggE,WAAWnuC,GAAGnsB,MAAM,KAEjCq7D,EAAwB/8C,SAASqc,EAAM,IAAM,EAE7C2gC,EAAmBh9C,SAASqc,EAAM,IAAM,EAExC4gC,EAAsBj9C,SAASqc,EAAM,IAAM,EAEjDrgC,KAAK8gE,SACDC,EACAC,EACAC,EACAjhE,KAAK8+D,WAAWiC,GACW,QAA3B,EAAA/gE,KAAKg/D,KAAKgC,UAAiB,QAAI,EAAAz5D,QAAQmrB,OACL,QAAlC,EAAA1yB,KAAK++D,SAASkC,UAAoB,QAAI,EAAArtD,QAAQouD,KAEtD,CAEAhiE,KAAKggE,WAAWv9D,OAAS,CAC7B,EAQQ,YAAA0/D,mCAAR,SAA2ClnB,EAAqBv2C,GAC5D1E,KAAK2hE,cAAc1mB,EAAMv2C,GAEzB,IAAK,IAAImtB,EAAI,EAAGA,EAAI7xB,KAAKggE,WAAWv9D,OAAQovB,IAAK,CAG7C,IAAMwO,EAAQrgC,KAAKggE,WAAWnuC,GAAGnsB,MAAM,MAEjCq7D,EAAwB/8C,SAASqc,EAAM,IAAM,EAC7C4gC,EAAsBj9C,SAASqc,EAAM,IAAM,EAEjDrgC,KAAK8gE,SACDC,EACA,EACAE,EACAjhE,KAAK8+D,WAAWiC,GAChB,EAAAx5D,QAAQmrB,OACR1yB,KAAK++D,SAASkC,GACdjhE,KAAK8hE,UAAUf,GAEvB,CAEA/gE,KAAKggE,WAAWv9D,OAAS,CAC7B,EAQQ,YAAA2/D,mCAAR,SAA2CnnB,EAAqBv2C,GAE5D1E,KAAK2hE,cAAc1mB,EAAMv2C,GAEzB,IAAK,IAAImtB,EAAI,EAAGA,EAAI7xB,KAAKggE,WAAWv9D,OAAQovB,IAAK,CAG7C,IAAMwO,EAAQrgC,KAAKggE,WAAWnuC,GAAGnsB,MAAM,KAEjCq7D,EAAwB/gE,KAAK8+D,WAAWr8D,OAASuhB,SAASqc,EAAM,IAEhE2gC,EAAmBhhE,KAAKg/D,KAAKv8D,OAASuhB,SAASqc,EAAM,IAErD4gC,EAAsBjhE,KAAK++D,SAASt8D,OAASuhB,SAASqc,EAAM,IAElErgC,KAAK8gE,SACDC,EACAC,EACAC,EACAjhE,KAAK8+D,WAAWiC,GAChB/gE,KAAKg/D,KAAKgC,GACVhhE,KAAK++D,SAASkC,GACdjhE,KAAK8hE,UAAUf,GAEvB,CAEA/gE,KAAKggE,WAAWv9D,OAAS,CAC7B,EAEQ,YAAA4/D,oBAAR,WAEQriE,KAAKm/D,eAAe18D,OAAS,IAG7BzC,KAAKsiE,aAAetiE,KAAKm/D,eAAen/D,KAAKm/D,eAAe18D,OAAS,GAGrEzC,KAAKuhE,cAEDvhE,KAAKygE,gBAAgB8B,mBAErBviE,KAAKo/D,mBAAmBoD,UAK5BxiE,KAAKsiE,aAAa/xC,QAAUvwB,KAAKo/D,mBAAmBrlD,QACpD/Z,KAAKsiE,aAAavyC,UAAY/vB,KAAK4/D,8BAA8B7lD,QACjE/Z,KAAKsiE,aAAaxyC,QAAU9vB,KAAK8/D,4BAA4B/lD,QAC7D/Z,KAAKsiE,aAAanyC,IAAMnwB,KAAK+/D,uBAAuBhmD,QACpD/Z,KAAKsiE,aAAaG,SAAWziE,KAAKsgE,aAE9BtgE,KAAKygE,gBAAgBiB,qBACrB1hE,KAAKsiE,aAAahyC,OAAStwB,KAAK6/D,2BAA2B9lD,SAI/D/Z,KAAKo/D,mBAAmB38D,OAAS,EACjCzC,KAAK4/D,8BAA8Bn9D,OAAS,EAC5CzC,KAAK6/D,2BAA2Bp9D,OAAS,EACzCzC,KAAK8/D,4BAA4Br9D,OAAS,EAC1CzC,KAAK+/D,uBAAuBt9D,OAAS,EACrCzC,KAAKsgE,cAAe,EAE5B,EAEQ,YAAAoC,iBAAR,SAAyBjwD,GACrB,IAAMsd,EAAYtd,EAAKkwD,gBAAgB,EAAA1yC,aAAakb,cAC9Crb,EAAUrd,EAAKkwD,gBAAgB,EAAA1yC,aAAawb,YAC5Cm3B,EAA2C,CAAC,EAElD,GAAK7yC,GAAcD,EAAnB,CAIA,IAAK,IAAIvtB,EAAI,EAAGA,EAAIwtB,EAAUttB,OAAS,EAAGF,KAMlCsgE,EAAMD,EAFJ3vD,EAHI8c,EAAc,EAAJxtB,EAAQ,GAGZ,IAFNwtB,EAAc,EAAJxtB,EAAQ,GAEF,IADhBwtB,EAAc,EAAJxtB,EAAQ,OAKxBsgE,EAAM,GACND,EAAY3vD,GAAO4vD,GAEvBA,EAAIh+D,KAAKtC,GAGb,IAAMugE,EAAS,IAAI,EAAAlvD,QACnB,IAAK,IAAMX,KAAO2vD,EAAa,CAC3B,IAAMC,EACN,MADMA,EAAMD,EAAY3vD,IAChBxQ,OAAS,GAAjB,CAIA,IAAMsgE,EAAQF,EAAI,GAClB,IAAStgE,EAAI,EAAGA,EAAIsgE,EAAIpgE,SAAUF,EAAG,CACjC,IAAMygE,EAAOH,EAAItgE,GACjButB,EAAgB,EAARizC,EAAY,IAAMjzC,EAAe,EAAPkzC,EAAW,GAC7ClzC,EAAgB,EAARizC,EAAY,IAAMjzC,EAAe,EAAPkzC,EAAW,GAC7ClzC,EAAgB,EAARizC,EAAY,IAAMjzC,EAAe,EAAPkzC,EAAW,EACjD,CAKA,IAHAF,EAAOpgC,eAAe5S,EAAgB,EAARizC,EAAY,GAAIjzC,EAAgB,EAARizC,EAAY,GAAIjzC,EAAgB,EAARizC,EAAY,IAC1FD,EAAOvyB,YAEEhuC,EAAI,EAAGA,EAAIsgE,EAAIpgE,SAAUF,EAE9ButB,EAAe,GADTkzC,EAAOH,EAAItgE,IACE,GAAKugE,EAAOl7D,EAC/BkoB,EAAe,EAAPkzC,EAAW,GAAKF,EAAO/+D,EAC/B+rB,EAAe,EAAPkzC,EAAW,GAAKF,EAAOrB,CAjBnC,CAmBJ,CACAhvD,EAAKwwD,gBAAgB,EAAAhzC,aAAawb,WAAY3b,EAzC9C,CA0CJ,EAEe,EAAAozC,eAAf,SAA8BpF,GAC1B,OAAOA,EAAKv4D,WAAW,IAC3B,EAEe,EAAA49D,iBAAf,SAAgCrF,GAC5B,OAAOA,EAAKv4D,WAAW,IAC3B,EAEe,EAAA69D,gBAAf,SAA+BtF,GAC3B,OAAOA,EAAKv4D,WAAW,IAC3B,EAEe,EAAA89D,eAAf,SAA8BvF,EAAcwF,GACxC,IAAKxF,EAAKv4D,WAAW,QAAS,OAAO,KAGrC,GAFAu4D,EAAOA,EAAK3qD,QAAQ,OAAQ,IAAI4qD,OAE5BuF,EAAU,MAAO,GACrB,IACMC,EAAWzF,EAAK/5C,MADR,aAEd,IAAKw/C,GAAYA,EAAS9gE,OAAS,GAAM,EACrC,MAAO,GAGX,IADA,IAAMu/B,EAAkB,GACfwhC,EAAW,EAAGA,EAAWD,EAAS9gE,OAAS,EAAG+gE,IAAY,CAG/D,IAAM32D,EAAI02D,EAAoB,EAAXC,EAAe,GAAKD,EAAoB,EAAXC,EAAe,GACzDn/D,EAAIk/D,EAAoB,EAAXC,EAAe,GAAKD,EAAoB,EAAXC,EAAe,GACzDpiE,EAAImiE,EAAoB,EAAXC,EAAe,GAAKD,EAAoB,EAAXC,EAAe,GAC/DxhC,EAAMn9B,KAAK,IAAI,EAAA4H,OAAOuX,SAASnX,EAAG,IAAM,IAAKmX,SAAS3f,EAAG,IAAM,IAAK2f,SAAS5iB,EAAG,IAAM,IAAK,GAC/F,CACA,OAAO4gC,CACX,EAUO,YAAApf,MAAP,SAAa7C,EAAkB3I,EAAcmH,EAAcuQ,EAA0C20C,GAArG,I,IAAA,OAIIrsD,GADAA,EAAOA,EAAKjE,QAAQ,SAAU,SAClBA,QAAQ,SAAU,IAAI4qD,OAC9B/9D,KAAKygE,gBAAgB8B,mBACrBviE,KAAK6hE,cAAgB,SAAC7mB,EAAO4mB,GAAc,SAAK5B,WAAWn7D,KAAKm2C,EAAM,GAAIA,EAAM4mB,GAAY5mB,EAAM4mB,EAAY,GAAnE,EAC3C5hE,KAAKwhE,gBAAkB,GAChBjjD,EAAMnM,sBACbpS,KAAK6hE,cAAgB,SAAC7mB,EAAO4mB,GAAc,SAAK5B,WAAWn7D,KAAKm2C,EAAM,GAAIA,EAAM4mB,EAAY,GAAI5mB,EAAM4mB,GAA3D,EAC3C5hE,KAAKwhE,gBAAkB,IAEvBxhE,KAAK6hE,cAAgB,SAAC7mB,EAAO4mB,GAAc,SAAK5B,WAAWn7D,KAAKm2C,EAAM,GAAIA,EAAM4mB,GAAY5mB,EAAM4mB,EAAY,GAAnE,EAC3C5hE,KAAKwhE,iBAAmB,GAK5B,IAAMkC,EAAWtsD,EAAK1R,MAAM,MACtBi+D,EAAwB,GAC1BC,EAAyB,GAE7BD,EAAU9+D,KAAK++D,GAEf,IAAK,IAAIrhE,EAAI,EAAGA,EAAImhE,EAASjhE,OAAQF,IAIjC,GAAoB,KAHdu7D,EAAO4F,EAASnhE,GAAGw7D,OAAO5qD,QAAQ,QAAS,MAGxC1Q,QAAmC,MAAnBq7D,EAAKE,OAAO,GASrC,IALI6F,EAAYT,gBAAgBtF,IAAS+F,EAAYV,iBAAiBrF,MAClE8F,EAAe,GACfD,EAAU9+D,KAAK++D,IAGfC,EAAYX,eAAepF,GAG3B,IAFA,IAAMgG,EAAahG,EAAKp4D,MAAM,KAErB,EAAI,EAAG,EAAIo+D,EAAWrhE,OAAS,EAAG,IACvCmhE,EAAa/+D,KAAK,YAAKi/D,EAAW,GAAE,YAAIA,EAAW,EAAI,UAG3DF,EAAa/+D,KAAKi5D,GAI1B,IAAMF,EAAQ+F,EAAUI,OAExB,IAASxhE,EAAI,EAAGA,EAAIq7D,EAAMn7D,OAAQF,IAAK,CACnC,IAAMu7D,EACFr6D,OAAM,EAEV,GAAoB,KAHdq6D,EAAOF,EAAMr7D,GAAGw7D,OAAO5qD,QAAQ,QAAS,MAGrC1Q,QAAmC,MAAnBq7D,EAAKE,OAAO,GAE9B,GAAI6F,EAAYG,cAAcv3C,KAAKqxC,IAStC,GAPAr6D,EAASq6D,EAAK/5C,MAAM,UAKpB/jB,KAAK8+D,WAAWj6D,KAAK,IAAI,EAAA+O,QAAQuqD,WAAW16D,EAAO,IAAK06D,WAAW16D,EAAO,IAAK06D,WAAW16D,EAAO,MAE7FzD,KAAKygE,gBAAgBiB,mBACrB,GAAIj+D,EAAOhB,QAAU,EAAG,CACpB,IAAMoK,EAAIsxD,WAAW16D,EAAO,IACtBY,EAAI85D,WAAW16D,EAAO,IACtBrC,EAAI+8D,WAAW16D,EAAO,IAE5BzD,KAAKi/D,QAAQp6D,KACT,IAAI,EAAA4H,OAAOI,EAAI,EAAIA,EAAI,IAAMA,EAAGxI,EAAI,EAAIA,EAAI,IAAMA,EAAGjD,EAAI,EAAIA,EAAI,IAAMA,EAAqB,IAAlBqC,EAAOhB,aAA8B6C,IAAd7B,EAAO,GAAmB,EAAI06D,WAAW16D,EAAO,KAEzJ,MAEIzD,KAAKi/D,QAAQp6D,KAAK7E,KAAKqgE,iBAG5B,GAAwD,QAAnD58D,EAASogE,EAAYI,cAAcC,KAAKpG,IAKhD99D,KAAK++D,SAASl6D,KAAK,IAAI,EAAA+O,QAAQuqD,WAAW16D,EAAO,IAAK06D,WAAW16D,EAAO,IAAK06D,WAAW16D,EAAO,WAC5F,GAAoD,QAA/CA,EAASogE,EAAYM,UAAUD,KAAKpG,IAK5C99D,KAAKg/D,KAAKn6D,KAAK,IAAI,EAAA0C,QAAQ42D,WAAW16D,EAAO,IAAMzD,KAAKygE,gBAAgB2D,UAAUx8D,EAAGu2D,WAAW16D,EAAO,IAAMzD,KAAKygE,gBAAgB2D,UAAUrgE,SAIzI,GAAuD,QAAlDN,EAASogE,EAAYQ,aAAaH,KAAKpG,IAK/C99D,KAAKkiE,mCACDz+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,QAED,GAAuD,QAAlDjC,EAASogE,EAAYS,aAAaJ,KAAKpG,IAK/C99D,KAAKmiE,mCACD1+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,QAED,GAAuD,QAAlDjC,EAASogE,EAAYU,aAAaL,KAAKpG,IAK/C99D,KAAKoiE,mCACD3+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,QAED,GAAuD,QAAlDjC,EAASogE,EAAYW,aAAaN,KAAKpG,IAK/C99D,KAAKiiE,mCACDx+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,QAED,GAAuD,QAAlDjC,EAASogE,EAAYY,aAAaP,KAAKpG,IAK/C99D,KAAK+hE,mCACDt+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,QAKD,GAAuD,QAAlDjC,EAASogE,EAAYa,aAAaR,KAAKpG,IAK/C99D,KAAK+hE,mCACDt+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,GAEJ1F,KAAKsgE,cAAe,OAIjB,GAAuD,QAAlD78D,EAASogE,EAAYc,aAAaT,KAAKpG,IAK/C99D,KAAKiiE,mCACDx+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,GAEJ1F,KAAKsgE,cAAe,OAIjB,GAAK78D,EAASogE,EAAYR,eAAevF,GAAO99D,KAAKygE,gBAAgBiB,oBACxEj+D,EAAOgT,SAAQ,SAACmuD,GACZ,EAAK1F,WAAWr6D,KAAK+/D,EACzB,SACG,GAAuD,QAAlDnhE,EAASogE,EAAYgB,aAAaX,KAAKpG,IAK/C99D,KAAKkiE,mCACDz+D,EAAO,GAAGs6D,OAAOr4D,MAAM,KACvB,GAEJ1F,KAAKsgE,cAAe,OAIjB,GAAIuD,EAAYiB,gBAAgBr4C,KAAKqxC,IAAS+F,EAAYkB,iBAAiBt4C,KAAKqxC,GAAO,CAG1F,IAAMkH,EAAsB,CACxB/wD,KAAM6pD,EAAKz5C,UAAU,GAAG05C,OACxBxtC,QAAS,KACTR,UAAW,KACXD,QAAS,KACTK,IAAK,KACLG,OAAQ,KACR20C,aAAcjlE,KAAKigE,qBACnBiF,SAAUrB,EAAYkB,iBAAiBt4C,KAAKqxC,IAEhD99D,KAAKqiE,sBAGLriE,KAAKm/D,eAAet6D,KAAKmgE,GAGzBhlE,KAAK2/D,YAAa,EAClB3/D,KAAKogE,kBAAmB,EACxBpgE,KAAKmgE,WAAa,CAEtB,MAAW0D,EAAYsB,iBAAiB14C,KAAKqxC,IAEzC99D,KAAKigE,qBAAuBnC,EAAKz5C,UAAU,GAAG05C,OAIzC/9D,KAAKogE,kBAAqBpgE,KAAK2/D,aAEhC3/D,KAAKqiE,sBAEC2C,EAEF,CACI/wD,MAAOjU,KAAKkgE,cAAgB,QAAU,MAAQlgE,KAAKmgE,WAAWxN,WAC9DpiC,QAAS,KACTR,UAAW,KACXD,QAAS,KACTK,IAAK,KACLG,OAAQ,KACR20C,aAAcjlE,KAAKigE,qBACnBiF,UAAU,GAElBllE,KAAKmgE,aAELngE,KAAKm/D,eAAet6D,KAAKmgE,GACzBhlE,KAAK2/D,YAAa,GAIlB3/D,KAAK2/D,YAAc3/D,KAAKogE,mBAExBpgE,KAAKm/D,eAAen/D,KAAKm/D,eAAe18D,OAAS,GAAGwiE,aAAejlE,KAAKigE,qBACxEjgE,KAAKogE,kBAAmB,IAGrByD,EAAYuB,sBAAsB34C,KAAKqxC,GAE9C2F,EAAkB3F,EAAKz5C,UAAU,GAAG05C,QAG7B8F,EAAYwB,iBAAiB54C,KAAKqxC,IAMzC,EAAA/+C,OAAOuF,IAAI,kCAAoCw5C,EAEvD,CAyBA,GAvBI99D,KAAK2/D,aAEL3/D,KAAKsiE,aAAetiE,KAAKm/D,eAAen/D,KAAKm/D,eAAe18D,OAAS,GAEjEzC,KAAKygE,gBAAgB8B,mBAErBviE,KAAKo/D,mBAAmBoD,UAI5BxiE,KAAKuhE,cAELvhE,KAAKsiE,aAAa/xC,QAAUvwB,KAAKo/D,mBACjCp/D,KAAKsiE,aAAavyC,UAAY/vB,KAAK4/D,8BACnC5/D,KAAKsiE,aAAaxyC,QAAU9vB,KAAK8/D,4BACjC9/D,KAAKsiE,aAAanyC,IAAMnwB,KAAK+/D,uBAC7B//D,KAAKsiE,aAAaG,SAAWziE,KAAKsgE,aAC9BtgE,KAAKygE,gBAAgBiB,qBACrB1hE,KAAKsiE,aAAahyC,OAAStwB,KAAK6/D,8BAKnC7/D,KAAK2/D,WAAY,CAClB,IAAI2F,EAA0C,KAC9C,GAAItlE,KAAKo/D,mBAAmB38D,OACpBzC,KAAKygE,gBAAgB8B,mBAErBviE,KAAKo/D,mBAAmBoD,UAI5BxiE,KAAKuhE,kBACF,CAEH,IAAkB,UAAAvhE,KAAK8+D,WAAL,eAAiB,CAA9B,IAAMb,EAAG,KACVj+D,KAAK4/D,8BAA8B/6D,KAAKo5D,EAAIr2D,EAAGq2D,EAAIl6D,EAAGk6D,EAAIwD,EAC9D,CAEA,GAAIzhE,KAAK++D,SAASt8D,OACd,IAAqB,UAAAzC,KAAK++D,SAAL,eAAe,CAA/B,IAAM+D,EAAM,KACb9iE,KAAK8/D,4BAA4Bj7D,KAAKi+D,EAAOl7D,EAAGk7D,EAAO/+D,EAAG++D,EAAOrB,EACrE,CAGJ,GAAIzhE,KAAKg/D,KAAKv8D,OACV,IAAiB,UAAAzC,KAAKg/D,KAAL,eAAW,CAAvB,IAAM6B,EAAE,KACT7gE,KAAK+/D,uBAAuBl7D,KAAKg8D,EAAGj5D,EAAGi5D,EAAG98D,EAC9C,CAGJ,GAAI/D,KAAKk/D,WAAWz8D,OAChB,IAAoB,UAAAzC,KAAKk/D,WAAL,eAAiB,CAAhC,IAAMxzD,EAAK,KACZ1L,KAAK6/D,2BAA2Bh7D,KAAK6G,EAAMmB,EAAGnB,EAAMrH,EAAGqH,EAAMtK,EAAGsK,EAAMjL,EAC1E,MAEA,GAAIT,KAAKi/D,QAAQx8D,OACb,IAAoB,UAAAzC,KAAKi/D,QAAL,eAATvzD,EAAK,KACZ1L,KAAK6/D,2BAA2Bh7D,KAAK6G,EAAMmB,EAAGnB,EAAMrH,EAAGqH,EAAMtK,EAAGsK,EAAMjL,GAK7ET,KAAKigE,wBAENqF,EAAc,IAAI,EAAA10C,iBAAiB,EAAAC,SAAS00C,WAAYhnD,IAE5CinD,aAAc,EAE1BxlE,KAAKigE,qBAAuBqF,EAAYrxD,KAEnCjU,KAAK++D,SAASt8D,SACf6iE,EAAY3kC,iBAAkB,EAC9B2kC,EAAYx5D,cAAgB,EAAAunB,OAAOigB,SAG/C,CAGAtzC,KAAKm/D,eAAet6D,KAAK,CACrBoP,KAAM,EAAA4c,SAAS00C,WACfh1C,QAASvwB,KAAKo/D,mBACdrvC,UAAW/vB,KAAK4/D,8BAChBtvC,OAAQtwB,KAAK6/D,2BACb/vC,QAAS9vB,KAAK8/D,4BACd3vC,IAAKnwB,KAAK+/D,uBACVkF,aAAcjlE,KAAKigE,qBACnBwF,eAAgBH,EAChBJ,UAAU,EACVzC,SAAUziE,KAAKsgE,cAEvB,CAGA,IAAK,IAAI/xC,EAAI,EAAGA,EAAIvuB,KAAKm/D,eAAe18D,OAAQ8rB,IAAK,CAEjD,GAAIxO,GAAe/f,KAAKm/D,eAAe5wC,GAAGta,KACtC,GAAI8L,aAAuBve,OACvB,IAA0D,IAAtDue,EAAYxJ,QAAQvW,KAAKm/D,eAAe5wC,GAAGta,MAC3C,cAGJ,GAAIjU,KAAKm/D,eAAe5wC,GAAGta,OAAS8L,EAChC,SAOZ/f,KAAKsiE,aAAetiE,KAAKm/D,eAAe5wC,GAGxChQ,EAAMsQ,yBAA2BC,EACjC,IAAM5Z,EAAc,IAAI,EAAA6Z,KAAK/uB,KAAKm/D,eAAe5wC,GAAGta,KAAMsK,GAK1D,GAJArJ,EAAY8Z,iBAAmBF,EAC/BvQ,EAAMsQ,wBAAyB,EAC/B7uB,KAAKsiE,aAAaoD,aAAexwD,GAE5BlV,KAAKsiE,aAAa4C,SACnB,IAAK,IAAIrzC,EAAItD,EAAI,EAAGsD,GAAK,IAAKA,EAC1B,GAAI7xB,KAAKm/D,eAAettC,GAAGqzC,UAAYllE,KAAKm/D,eAAettC,GAAG6zC,aAAc,CACxExwD,EAAYvK,OAAS3K,KAAKm/D,eAAettC,GAAG6zC,aAC5C,KACJ,CAaR,GAPA1lE,KAAKugE,eAAe17D,KAAK7E,KAAKm/D,eAAe5wC,GAAG02C,cAE5CjlE,KAAKsiE,aAAaG,WACW,QAA7B,EAAAvtD,EAAY4iC,yBAAiB,QAA7B5iC,EAAY4iC,kBAAsB,CAAC,GACnC5iC,EAAY4iC,kBAA2B,SAAI,GAGH,KAAb,QAA3B,EAAA93C,KAAKsiE,aAAavyC,iBAAS,eAAEttB,QAAjC,CAMA,IAAM0sB,EAAyB,IAAI,EAAAQ,WAKnC,GAHAR,EAAWgB,IAAMnwB,KAAKsiE,aAAanyC,IACnChB,EAAWoB,QAAUvwB,KAAKsiE,aAAa/xC,QACvCpB,EAAWY,UAAY/vB,KAAKsiE,aAAavyC,UACrC/vB,KAAKygE,gBAAgBkF,eAAgB,CACrC,IAAM71C,EAAyB,IAAItuB,MACnC,EAAAmuB,WAAWi2C,eAAe5lE,KAAKsiE,aAAavyC,UAAW/vB,KAAKsiE,aAAa/xC,QAAST,GAClFX,EAAWW,QAAUA,CACzB,MACIX,EAAWW,QAAU9vB,KAAKsiE,aAAaxyC,QAEvC9vB,KAAKygE,gBAAgBiB,qBACrBvyC,EAAWmB,OAAStwB,KAAKsiE,aAAahyC,QAG1CnB,EAAWmb,YAAYp1B,GACnBlV,KAAKygE,gBAAgB7pB,UACrB1hC,EAAYnL,QAAQhG,IAAM,GAE1B/D,KAAKygE,gBAAgBoF,iBACrB7lE,KAAK0iE,iBAAiBxtD,GAI1BlV,KAAKwgE,oBAAoB37D,KAAKqQ,GAE1BlV,KAAKsiE,aAAamD,iBAClBvwD,EAAY5O,SAAWtG,KAAKsiE,aAAamD,eA9B7C,MAFIzlE,KAAKwgE,oBAAoB37D,KAAKqQ,EAkCtC,CACJ,EAx9Bc,EAAA6vD,iBAAmB,KAEnB,EAAAD,gBAAkB,KAElB,EAAAM,sBAAwB,WAExB,EAAAD,iBAAmB,WAEnB,EAAAE,iBAAmB,MAInB,EAAArB,cAAgB,+BAEhB,EAAAC,cAAgB,mEAEhB,EAAAE,UAAY,+CAEZ,EAAAM,aAAe,8BAEf,EAAAD,aAAe,0CAEf,EAAAH,aAAe,oDAEf,EAAAC,aAAe,4CAEf,EAAAC,aAAe,uDAEf,EAAAG,aAAe,8BAEf,EAAAC,aAAe,0CAEf,EAAAE,aAAe,oDAy7BjC,C,CA59BA,GCFA,cAwEI,WAAYhG,GAfI,KAAA5qD,KCnFV,MDuFU,KAAA/I,WCtFJ,ODwFJ,KAAA+3B,gBAA4C,KAUhDjjC,KAAKygE,iBAAkB,oBAAKqF,EAAcC,wBAA4BlH,QAAAA,EAAkB,CAAC,EAC7F,CA6PJ,OA3TI,sBAAkB,qBAAgB,C,IAAlC,WACI,OAAOT,GAAcM,gBACzB,E,IAEA,SAAmCt7D,GAC/Bg7D,GAAcM,iBAAmBt7D,CACrC,E,gCA0DA,sBAAmB,2BAAsB,C,IAAzC,WACI,MAAO,CACHuiE,eAAgBG,EAAcE,gBAC9BH,gBAAiBC,EAAcG,iBAC/BvE,mBAAoBoE,EAAcI,qBAClCtvB,QAASkvB,EAAcK,SACvBC,eAAgBN,EAAcpH,iBAE9B0F,UAAW0B,EAAcO,WACzBC,6BAA8BR,EAAcS,gCAC5CjF,eAAgBwE,EAAcU,iBAC9B7gD,cAAemgD,EAAcW,eAC7BlE,kBAAmBuD,EAAcY,oBAEzC,E,gCAaQ,YAAAC,SAAR,SACIruD,EACAjB,EACAoH,EACAmoD,GAGA,IAAMC,EAAaxvD,EAAUiB,EAG7B,EAAAqB,MAAMgf,SAASkuC,EAAYpoD,OAAWnZ,OAAWA,GAAW,GAAO,SAAC+b,EAAkCw1B,GAClG+vB,EAAUC,EAAYhwB,EAC1B,GACJ,EAGA,YAAA/1B,aAAA,SAAatJ,GACT,OAAO,IAAIsuD,EAActuD,EAAkC,IAC/D,EAMO,YAAAmJ,cAAP,WACI,OAAO,CACX,EAUO,YAAAb,gBAAP,SAAuBC,EAAkBxB,EAAcnH,EAAWC,GAE9D,OAAOrX,KAAK8mE,YAAY/mD,EAAaxB,EAAOnH,EAAMC,GAAS1T,MAAK,SAAC6O,GAC7D,MAAO,CACHA,OAAQA,EACRgO,gBAAiB,GACjBC,UAAW,GACXngB,gBAAiB,GACjBogB,eAAgB,GAChBH,WAAY,GACZlP,OAAQ,GACR8sB,eAAgB,GAExB,GACJ,EASO,YAAAle,UAAP,SAAiB1B,EAAcnH,EAAcC,GAEzC,OAAOrX,KAAK8f,gBAAgB,KAAMvB,EAAOnH,EAAMC,GAAS1T,MAAK,WAE7D,GACJ,EASO,YAAAuc,wBAAP,SAA+B3B,EAAcnH,EAAcC,GAA3D,WACU8I,EAAY,IAAI,EAAAC,eAAe7B,GAGrC,OAFAve,KAAKijC,gBAAkB9iB,EAEhBngB,KAAK8f,gBAAgB,KAAMvB,EAAOnH,EAAMC,GAC1C1T,MAAK,SAACF,GAoBH,OAnBAA,EAAO+O,OAAOiE,SAAQ,SAAChE,GAAS,OAAA0N,EAAU3N,OAAO3N,KAAK4N,EAAtB,IAChChP,EAAO+O,OAAOiE,SAAQ,SAAChE,GACnB,IAAMnM,EAAWmM,EAAKnM,SAClBA,IAE8C,GAA1C6Z,EAAUvU,UAAU2K,QAAQjQ,KAC5B6Z,EAAUvU,UAAU/G,KAAKyB,GAGRA,EAASgoD,oBACjB73C,SAAQ,SAACpU,IACwB,GAAlC8d,EAAUE,SAAS9J,QAAQlU,IAC3B8d,EAAUE,SAASxb,KAAKxC,EAEhC,IAGZ,IACA,EAAK4gC,gBAAkB,KAChB9iB,CACX,IACCgmB,OAAM,SAAC4gC,GAEJ,MADA,EAAK9jC,gBAAkB,KACjB8jC,CACV,GACR,EAYQ,YAAAD,YAAR,SAAoB/mD,EAAkBxB,EAAcnH,EAAcC,GAAlE,WACQ2vD,EAAqB,GACnBC,EAAsC,IAAI7I,GAC1CO,EAA0B,GAC1BC,EAAkC,GAGxCxnD,EAAOA,EAAKjE,QAAQ,SAAU,IAAI4qD,OAGd,IAAI8F,GAAYlF,EAAeC,EAAoB5+D,KAAKygE,iBAEhE79C,MAAM7C,EAAa3I,EAAMmH,EAAOve,KAAKijC,iBAAiB,SAAC3rB,GAC/D0vD,EAAa1vD,CACjB,IAGA,IAAM4vD,EAAoC,GAoE1C,MAlEmB,KAAfF,GAAsBhnE,KAAKygE,gBAAgB96C,eAE3CuhD,EAAYriE,KACR,IAAI7B,SAAQ,SAACC,EAASC,GAClB,EAAKyjE,SACDK,EACA3vD,GACA,SAAC8vD,GACG,IAEIF,EAAqBtJ,SAASp/C,EAAO4oD,EAAY9vD,EAAS,EAAK4rB,iBAE/D,IAAK,IAAIniC,EAAI,EAAGA,EAAImmE,EAAqBr7D,UAAUnJ,OAAQ3B,IAAK,CAS5D,IAPA,IAAImyD,EAAa,EACXmU,EAAW,GACbxgE,OAAM,GAKFA,EAAS+3D,EAAcpoD,QAAQ0wD,EAAqBr7D,UAAU9K,GAAGmT,KAAMg/C,KAAgB,GAC3FmU,EAASviE,KAAK+B,GACdqsD,EAAarsD,EAAS,EAG1B,IAAgB,IAAZA,GAAqC,IAApBwgE,EAAS3kE,OAE1BwkE,EAAqBr7D,UAAU9K,GAAGkd,eAElC,IAAK,IAAIrH,EAAI,EAAGA,EAAIywD,EAAS3kE,OAAQkU,IAAK,CAEtC,IAAMlE,EAAOmsD,EAAmBwI,EAASzwD,IACnCrQ,EAAW2gE,EAAqBr7D,UAAU9K,GAChD2R,EAAKnM,SAAWA,EAEXmM,EAAK40D,oBAEN/gE,EAASk/D,aAAc,EAE/B,CAER,CACAviE,GACJ,CAAE,MAAOM,GACL,EAAAoW,MAAMqF,KAAK,sCAA+BgoD,EAAU,MAChD,EAAKvG,gBAAgB6F,6BACrBrjE,IAEAC,EAAOK,EAEf,CACJ,IACA,SAACsjE,EAAoBhwB,GACjB,EAAAl9B,MAAMqF,KAAK,uCAAgCgoD,EAAU,MACjD,EAAKvG,gBAAgB6F,6BACrBrjE,IAEAC,EAAO2zC,EAEf,GAER,KAID7zC,QAAQ6iC,IAAIqhC,GAAavjE,MAAK,WACjC,IAAM2jE,EAAS,SAAC70D,GAAkB,QAAK,OAAA80D,QAA2C,QAAnC,EAAsB,QAAtB,EAAA90D,EAAKqlC,yBAAiB,eAAY,eAAC,SAAU,EAmB5F,OAhBA8mB,EAAmBnoD,SAAQ,SAAChE,G,QACxB,GAAI60D,EAAO70D,GAAO,CACd,IAAInG,EAAmB,QAAb,EAAAmG,EAAKnM,gBAAQ,QAAI,IAAI,EAAAsqB,iBAAiBne,EAAKwB,KAAO,QAASsK,GAEnDjS,EAAIk7D,kBAAkB3qB,QAAO,SAACt5C,GAAM,OAAC+jE,EAAO/jE,EAAR,IAAYd,OAAS,IAEvE6J,EAAmC,QAA7B,EAAAA,EAAI+I,MAAM/I,EAAI2H,KAAO,gBAAQ,QAAI3H,GAE3CA,EAAIm7D,WAAY,EAChBh1D,EAAKnM,SAAWgG,EACZmG,EAAKqlC,oBACLrlC,EAAKqlC,kBAA2B,aAAIxyC,EAE5C,CACJ,IAEOs5D,CACX,GACJ,EAlUc,EAAA4H,kBAAmB,EAInB,EAAAL,UAAW,EAeX,EAAAD,sBAAuB,EAIvB,EAAAF,iBAAkB,EAKlB,EAAAC,kBAAmB,EAInB,EAAAI,WAAa,IAAI,EAAA9+D,QAAQ,EAAG,GAI5B,EAAAk/D,gBAAiB,EAOjB,EAAAF,iCAAkC,EAKlC,EAAAG,qBAAsB,EAmRxC,C,CAvUA,IA0UA,IAAAlgD,2BAA0B,IAAIs/C,IErWvB,IAAM4B,GAGG,CAER,OAAQ,CAAErtD,UAAU,ICmB5B,2BAEW,KAAAstD,aAAe,0CAGf,KAAAC,cAAgB,2BAEhB,KAAAC,cAAgB,oJAEhB,KAAAC,cAAgB,oJAKP,KAAA7zD,KDrCV,MC4CU,KAAA/I,WAAaw8D,EA6OjC,QA3NW,YAAA/4C,WAAP,SAAkB5O,EAAkBxB,EAAcnH,EAAWC,EAAiB7E,GAC1E,IAAIu1D,EAEJ,GAAoB,iBAAT3wD,EAAmB,CAC1B,GAAIpX,KAAKgoE,UAAU5wD,GAAO,CAEtB,IAAMlC,EAAc,IAAI,EAAA6Z,KAAK,UAAWxQ,GAKxC,OAJAve,KAAKioE,aAAa/yD,EAAakC,GAC3B5E,GACAA,EAAO3N,KAAKqQ,IAET,CACX,CAKAkC,GAAO,IAAI8wD,aAAcC,OAAO,IAAIxtD,WAAWvD,GACnD,CAIA,KAAQ2wD,EAAU/nE,KAAK2nE,aAAazD,KAAK9sD,IAAQ,CAC7C,IAAIgxD,EAAWL,EAAQ,GACjBM,EAAkBN,EAAQ,GAChC,GAAIM,GAAmBD,GAAYC,EAE/B,OADA,EAAA1uD,MAAMnU,MAAM,8CACL,EAIX,GAAIua,GAAeqoD,EACf,GAAIroD,aAAuBve,OACvB,IAAKue,EAAYxJ,QAAQ6xD,GACrB,cAGJ,GAAIA,IAAaroD,EACb,SAMZqoD,EAAWA,GAAY,UAEjBlzD,EAAc,IAAI,EAAA6Z,KAAKq5C,EAAU7pD,GACvCve,KAAKsoE,YAAYpzD,EAAa6yD,EAAQ,IAClCv1D,GACAA,EAAO3N,KAAKqQ,EAEpB,CAEA,OAAO,CACX,EASO,YAAAqzD,KAAP,SAAYhqD,EAAcnH,EAAWC,GAEjC,OADerX,KAAK2uB,WAAW,KAAMpQ,EAAOnH,EAAMC,EAAS,KAE/D,EASO,YAAAmxD,mBAAP,SAA0BjqD,EAAcnH,EAAcC,GAClD,IAAM8I,EAAY,IAAI,EAAAC,eAAe7B,GAIrC,OAHAA,EAAMsQ,wBAAyB,EAC/B7uB,KAAK2uB,WAAW,KAAMpQ,EAAOnH,EAAMC,EAAS8I,EAAU3N,QACtD+L,EAAMsQ,wBAAyB,EACxB1O,CACX,EAEQ,YAAA6nD,UAAR,SAAkB5wD,GAEd,IAAMqxD,EAAS,IAAIC,SAAStxD,GAI5B,GAAIqxD,EAAO/tD,YAAc,GACrB,OAAO,EAMX,GAAI,GAHa,GACF+tD,EAAOE,UAAU,IAAI,KAEIF,EAAO/tD,WAC3C,OAAO,EAKX,IADA,IAAMkuD,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAC1BC,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIJ,EAAOK,SAASD,KAASD,EAAMC,GAC/B,OAAO,EAIf,OAAO,CACX,EAEQ,YAAAZ,aAAR,SAAqBx1D,EAAY2E,GAc7B,IAbA,IAAMqxD,EAAS,IAAIC,SAAStxD,GACtB4jC,EAAQytB,EAAOE,UAAU,IAAI,GAK/BzhE,EAAS,EAEP6oB,EAAY,IAAIxF,aAAqB,EAARywB,EAAY,GACzClrB,EAAU,IAAIvF,aAAqB,EAARywB,EAAY,GACvCzqB,EAAU,IAAIw4C,YAAoB,EAAR/tB,GAC5BguB,EAAe,EAEV/tB,EAAO,EAAGA,EAAOD,EAAOC,IAAQ,CAMrC,IALA,IAAMjT,EAXS,GACA,GAUYiT,EACrBguB,EAAUR,EAAOS,WAAWlhC,GAAO,GACnCmhC,EAAUV,EAAOS,WAAWlhC,EAAQ,GAAG,GACvCohC,EAAUX,EAAOS,WAAWlhC,EAAQ,GAAG,GAEpCzlC,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAM8mE,EAAcrhC,EAAY,GAAJzlC,EAG5BwtB,EAAU7oB,GAAUuhE,EAAOS,WAAWG,GAAa,GACnDv5C,EAAQ5oB,GAAU+hE,EAEbK,EAAcC,+BAOfx5C,EAAU7oB,EAAS,GAAKuhE,EAAOS,WAAWG,EAAc,GAAG,GAC3Dt5C,EAAU7oB,EAAS,GAAKuhE,EAAOS,WAAWG,EAAc,GAAG,GAE3Dv5C,EAAQ5oB,EAAS,GAAKiiE,EACtBr5C,EAAQ5oB,EAAS,GAAKkiE,IAVtBr5C,EAAU7oB,EAAS,GAAKuhE,EAAOS,WAAWG,EAAc,GAAG,GAC3Dt5C,EAAU7oB,EAAS,GAAKuhE,EAAOS,WAAWG,EAAc,GAAG,GAE3Dv5C,EAAQ5oB,EAAS,GAAKiiE,EACtBr5C,EAAQ5oB,EAAS,GAAKkiE,GAS1BliE,GAAU,CACd,CAEIoiE,EAAcC,+BACdh5C,EAAQy4C,GAAgBA,EACxBz4C,EAAQy4C,EAAe,GAAKA,EAAe,EAC3Cz4C,EAAQy4C,EAAe,GAAKA,EAAe,EAC3CA,GAAgB,IAEhBz4C,EAAQy4C,GAAgBA,IACxBz4C,EAAQy4C,GAAgBA,IACxBz4C,EAAQy4C,GAAgBA,IAEhC,CAEAv2D,EAAKwwD,gBAAgB,EAAAhzC,aAAakb,aAAcpb,GAChDtd,EAAKwwD,gBAAgB,EAAAhzC,aAAawb,WAAY3b,GAC9Crd,EAAKm4B,WAAWra,GAChB9d,EAAK1H,oBAAmB,EAC5B,EAEQ,YAAAu9D,YAAR,SAAoB71D,EAAY+2D,GAQ5B,IAPA,IAMIzB,EANEh4C,EAAY,GACZD,EAAU,GACVS,EAAU,GACZy4C,EAAe,EAIXjB,EAAU/nE,KAAK4nE,cAAc1D,KAAKsF,IAAa,CACnD,IAAMC,EAAQ1B,EAAQ,GAEhB2B,EAAgB1pE,KAAK6nE,cAAc3D,KAAKuF,GAE9C,GADAzpE,KAAK6nE,cAAc8B,UAAY,EAC1BD,EAAL,CAMA,IAHA,IAAM5G,EAAS,CAACr1C,OAAOi8C,EAAc,IAAKj8C,OAAOi8C,EAAc,IAAKj8C,OAAOi8C,EAAc,KAErFE,OAAW,EACPA,EAAc5pE,KAAK8nE,cAAc5D,KAAKuF,IACrCH,EAAcC,+BAIfx5C,EAAUlrB,KAAK4oB,OAAOm8C,EAAY,IAAKn8C,OAAOm8C,EAAY,IAAKn8C,OAAOm8C,EAAY,KAIlF95C,EAAQjrB,KAAKi+D,EAAO,GAAIA,EAAO,GAAIA,EAAO,MAP1C/yC,EAAUlrB,KAAK4oB,OAAOm8C,EAAY,IAAKn8C,OAAOm8C,EAAY,IAAKn8C,OAAOm8C,EAAY,KAClF95C,EAAQjrB,KAAKi+D,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAS9CwG,EAAcC,+BACdh5C,EAAQ1rB,KAAKmkE,EAAcA,EAAe,EAAGA,EAAe,GAC5DA,GAAgB,GAEhBz4C,EAAQ1rB,KAAKmkE,IAAgBA,IAAgBA,KAEjDhpE,KAAK8nE,cAAc6B,UAAY,CAtB/B,CAuBJ,CAEA3pE,KAAK4nE,cAAc+B,UAAY,EAC/Bl3D,EAAKwwD,gBAAgB,EAAAhzC,aAAakb,aAAcpb,GAChDtd,EAAKwwD,gBAAgB,EAAAhzC,aAAawb,WAAY3b,GAC9Crd,EAAKm4B,WAAWra,GAChB9d,EAAK1H,oBAAmB,EAC5B,EArOc,EAAAw+D,+BAAgC,EAsOlD,C,CAlQA,IAoQA,IAAA/iD,2BAA0B,IAAI8iD,IC5RvB,IC2BIO,GD3BEC,GACH,QADGA,GAGG,CAER,SAAU,CAAEzvD,UAAU,GAEtB,OAAQ,CAAEA,UAAU,GAEpB,OAAQ,CAAEA,UAAU,KCkB5B,SAAWwvD,GACP,qBACA,+BACA,mBACA,sBACH,CALD,CAAWA,KAAAA,GAAI,KAuBf,kBAmBI,WAAYhL,QAAA,IAAAA,IAAAA,EAAyDkL,EAAgBhE,wBAfrE,KAAA9xD,KAAO61D,GAEf,KAAA7mC,gBAA4C,KAOpC,KAAA/3B,WAAa4+D,GAOzB9pE,KAAKygE,gBAAkB5B,CAC3B,CAqfJ,OA7eI,YAAA/9C,aAAA,SAAatJ,GACT,OAAO,IAAIuyD,EAAgBvyD,EAAQsyD,IACvC,EAYa,YAAAhqD,gBAAb,SACIC,EACAxB,EACAnH,EACAC,EACAqH,EACApH,G,+EAEA,MAAO,CAAP,EAAOtX,KAAKgqE,OAAOjqD,EAAaxB,EAAOnH,EAAMC,GAAS1T,MAAK,SAAC6O,GACxD,MAAO,CACHA,OAAQA,EACRgO,gBAAiB,GACjBC,UAAW,GACXngB,gBAAiB,GACjBogB,eAAgB,GAChBH,WAAY,GACZlP,OAAQ,GACR8sB,eAAgB,GAExB,I,QAGW,EAAA8rC,iBAAf,SAAgCC,EAA+B9yD,GAC3D,IAAKA,EAAKsD,WACN,OAAO,EAEX,IAAMyvD,EAAU,IAAIxvD,WAAWvD,GACzBgzD,EAAU,IAAI7/C,aAAanT,GAI3BizD,EAAcF,EAAQ1nE,OADV,GAgBlB,OADAynE,EAAWI,UAAUD,GAZE,SAAUE,EAAehoE,GAC5C,IAAMqF,EAAIwiE,EAAQ,EAAI7nE,EAAI,GACpBwB,EAAIqmE,EAAQ,EAAI7nE,EAAI,GACpBk/D,EAAI2I,EAAQ,EAAI7nE,EAAI,GAC1BgoE,EAAS3gE,SAAW,IAAI,EAAAgK,QAAQhM,EAAG7D,EAAG09D,GAEtC,IAAM50D,EAAIs9D,EATI,GASgB5nE,EAAI,GAAK,GAAK,IACtC8B,EAAI8lE,EAVI,GAUgB5nE,EAAI,GAAK,GAAK,IACtCnB,EAAI+oE,EAXI,GAWgB5nE,EAAI,GAAK,GAAK,IAC5CgoE,EAAS7+D,MAAQ,IAAI,EAAAe,OAAOI,EAAGxI,EAAGjD,EAAG,EACzC,KAGO,CACX,EAEe,EAAAopE,WAAf,SAA0BjsD,EAAcksD,GAYpC,IAXA,IAAMh4D,EAAO,IAAI,EAAAsc,KAAK,UAAWxQ,GAE3B4rD,EAAU,IAAIxvD,WAAW8vD,EAAUrzD,MACnCgzD,EAAU,IAAI7/C,aAAakgD,EAAUrzD,MAGrCizD,EAAcF,EAAQ1nE,OADV,GAGZstB,EAAY,GAEZZ,EAAa,IAAI,EAAAQ,WACdptB,EAAI,EAAGA,EAAI8nE,EAAa9nE,IAAK,CAClC,IAAMqF,EAAIwiE,EAAQ,EAAI7nE,EAAI,GACpBwB,EAAIqmE,EAAQ,EAAI7nE,EAAI,GACpBk/D,EAAI2I,EAAQ,EAAI7nE,EAAI,GAC1BwtB,EAAUlrB,KAAK+C,EAAG7D,EAAG09D,EACzB,CAEA,GAAIgJ,EAAUC,gBAAiB,CAC3B,IAAMp6C,EAAS,IAAI/F,aAA2B,EAAd8/C,GAChC,IAAS9nE,EAAI,EAAGA,EAAI8nE,EAAa9nE,IAAK,CAClC,IAAMsK,EAAIs9D,EAhBA,GAgBoB5nE,EAAI,GAAK,GAAK,IACtC8B,EAAI8lE,EAjBA,GAiBoB5nE,EAAI,GAAK,GAAK,IACtCnB,EAAI+oE,EAlBA,GAkBoB5nE,EAAI,GAAK,GAAK,IAC5C+tB,EAAW,EAAJ/tB,EAAQ,GAAKsK,EACpByjB,EAAW,EAAJ/tB,EAAQ,GAAK8B,EACpBisB,EAAW,EAAJ/tB,EAAQ,GAAKnB,EACpBkvB,EAAW,EAAJ/tB,EAAQ,GAAK,CACxB,CACA4sB,EAAWmB,OAASA,CACxB,CAMA,OAJAnB,EAAWY,UAAYA,EACvBZ,EAAWoB,QAAUk6C,EAAUzvB,MAE/B7rB,EAAWmb,YAAY73B,GAChBA,CACX,EAEQ,YAAAk4D,UAAR,SAAkBvzD,EAAmBmH,GACjC,IAAMqsD,EAAO,IAAIjwD,WAAWvD,GACtByzD,EAAU,IAAI9B,YAAY3xD,GAE1B0zD,EAAaD,EAAQ,GAErBE,EAAWH,EAAK,IAChBI,EAAiBJ,EAAK,IAK5B,GAHiBA,EAAK,KAGQ,YAAdC,EAAQ,IAAkC,GAAdA,EAAQ,GAEhD,OAAO,IAAI7nE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM,EAAagB,KAAMoC,EAAQkxD,iBAAiB,GAChE,IAGJ,IACMlxD,EAAS,IAAI7B,YADK,GACyBmzD,GAE3CG,EAAgB,GAAO,GAAKD,GAE5BE,EAAY,IAAI16C,WAAW,GAC3B26C,EAAY,IAAIxwD,WAAWuwD,EAAU1xD,QACrC4xD,EAAmB,SAAUC,EAAgBnkE,GAK/C,OAJAikE,EAAU,GAAKE,EAAGnkE,EAAS,GAC3BikE,EAAU,GAAKE,EAAGnkE,EAAS,GAC3BikE,EAAU,GAAKE,EAAGnkE,EAAS,GAC3BikE,EAAU,GAAsB,IAAjBE,EAAGnkE,EAAS,GAAY,IAAO,EACvCgkE,EAAU,GAAKD,CAC1B,EAEIxwD,EAAa,GAEX7Q,EAAW,IAAI2gB,aAAa/Q,GAC5BxR,EAAQ,IAAIuiB,aAAa/Q,GACzB8xD,EAAO,IAAIC,kBAAkB/xD,GAC7BgyD,EAAM,IAAID,kBAAkB/xD,GAE9BiyD,EAAiB,EACjBC,EAAmB,EAClB1rE,KAAKygE,gBAAgBkL,QACtBF,GAAkB,EAClBC,EAAmB,KAGvB,IAAK,IAAInpE,EAAI,EAAGA,EAAIuoE,EAAYvoE,IAC5BqH,EAAa,EAAJrH,EAAQ,GAAK6oE,EAAiBR,EAAMnwD,EAAa,GAC1D7Q,EAAa,EAAJrH,EAAQ,GAAKkpE,EAAiBL,EAAiBR,EAAMnwD,EAAa,GAC3E7Q,EAAa,EAAJrH,EAAQ,GAAKkpE,EAAiBL,EAAiBR,EAAMnwD,EAAa,GAC3EA,GAAc,EAKlB,IAASlY,EAAI,EAAGA,EAAIuoE,EAAYvoE,IAAK,CACjC,IAAK,IAAIqpE,EAAY,EAAGA,EAAY,EAAGA,IAAa,CAChD,IAKMxoE,GALYwnE,EAAKnwD,EAAaqwD,EAAiB,EAAJvoE,EAAQqpE,GAK9B,OAAS,MACpCN,EAAS,GAAJ/oE,EAAS,GAAKqpE,GAAa,EAAAC,OAAOC,MAA8B,KAAvB,GATxC,KASsD1oE,GAAc,EAAG,IACjF,CAEAkoE,EAAS,GAAJ/oE,EAAS,GAAK,GAAKqoE,EAAKnwD,EAAalY,EAC9C,CAIA,IAHAkY,GAA2B,EAAbqwD,EAGLvoE,EAAI,EAAGA,EAAIuoE,EAAYvoE,IAC5ByF,EAAU,EAAJzF,EAAQ,EAAI,GAAKi+B,KAAKurC,IAAInB,EAAKnwD,EAAa,GAAK,GAAO,IAC9DzS,EAAU,EAAJzF,EAAQ,EAAI,GAAKi+B,KAAKurC,IAAInB,EAAKnwD,EAAa,GAAK,GAAO,IAC9DzS,EAAU,EAAJzF,EAAQ,EAAI,GAAKi+B,KAAKurC,IAAInB,EAAKnwD,EAAa,GAAK,GAAO,IAC9DA,GAAc,EAIlB,IAASlY,EAAI,EAAGA,EAAIuoE,EAAYvoE,IAAK,CACjC,IAAMqF,EAAIgjE,EAAKnwD,EAAa,GACtB1W,EAAI6mE,EAAKnwD,EAAa,GAAKgxD,EAAiBC,EAC5CjK,EAAImJ,EAAKnwD,EAAa,GAAKgxD,EAAiBC,EAC5CM,EAAKpkE,EAAI,MAAQ,EACjBqkE,EAAKloE,EAAI,MAAQ,EACjBmoE,EAAKzK,EAAI,MAAQ,EACvB+J,EAAQ,GAAJjpE,EAAS,GAAK,GAAKqF,EACvB4jE,EAAQ,GAAJjpE,EAAS,GAAK,GAAKwB,EACvBynE,EAAQ,GAAJjpE,EAAS,GAAK,GAAKk/D,EACvB,IAAM/8D,EAAI,GAAKsnE,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACxCV,EAAQ,GAAJjpE,EAAS,GAAK,GAAK,MAAmC,MAA3Bi+B,KAAK2rC,KAAKznE,EAAI,EAAI,EAAIA,GAErD+V,GAAc,CAClB,CAGA,GAAIswD,EAAU,CAiBV,IAdA,IAEMqB,EAAmC,IAFlBrB,EAAW,IAAMA,EAAW,GAAK,GAIlDsB,EAAe7rC,KAAK8rC,KAAKF,EAAmB,IAC9CG,EAAc9xD,EAGZ,EAAmB,GAGnB+xD,EADSjuD,EAAMlV,YACAojE,UAAUC,eACzBC,EAASnsC,KAAK8rC,KAAKxB,EAAa0B,GAE7BI,EAAe,EAAGA,EAAeP,EAAcO,IAAgB,CACpE,IAAMtlE,EAAU,IAAIqT,WAAWgyD,EAASH,EAAQ,EAAI,GACpD,EAAG3nE,KAAKyC,EACZ,CAEA,IAAS/E,EAAI,EAAGA,EAAIuoE,EAAYvoE,IAC5B,IAAK,IAAIsqE,EAAe,EAAGA,EAAeT,EAAkBS,IAAgB,CACxE,IAAMC,EAAUlC,EAAK2B,KAEfK,EAAepsC,KAAKoN,MAAMi/B,EAAe,IAC/B,EAAGD,GAEQC,EAAe,GACf,GAAJtqE,GACwBuqE,CACnD,CAGJ,OAAO,IAAI9pE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM,EAAYgB,KAAMoC,EAAQkxD,iBAAiB,EAAOqC,GAAI,GAC1E,GACJ,CAEA,OAAO,IAAI/pE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM,EAAYgB,KAAMoC,EAAQkxD,iBAAiB,GAC/D,GACJ,EAEQ,YAAAV,OAAR,SAAejqD,EAAkBxB,EAAcnH,EAAWC,GAA1D,WACUunD,EAAkC,GAElCoO,EAAiB,IAAIC,eAAe,CACtCjlC,MAAK,SAACklC,GACFA,EAAWC,QAAQ,IAAIxyD,WAAWvD,IAClC81D,EAAWE,OACf,IAIEC,EAAsB,IAAIC,oBAAoB,QAC9CC,EAAqBP,EAAeQ,YAAYH,GAEtD,OAAO,IAAIrqE,SAAQ,SAACC,GAChB,IAAIwqE,SAASF,GACR/yD,cACA7W,MAAK,SAAC6V,GACH,EAAKmxD,UAAUnxD,EAAQ+E,GAAO5a,MAAK,SAAC+pE,GAChCnvD,EAAMsQ,yBAA2B,EAAKoU,gBACtC,IAAM0qC,EAAoB,IAAI,EAAAC,sBAAsB,oBAAqB,KAAMrvD,EAAO,EAAKkiD,gBAAgBoN,WAC3GF,EAAkB3+C,iBAAmB,EAAKiU,gBAC1C27B,EAAmB/5D,KAAK8oE,GACxBA,EAAkBG,WAAWJ,EAAUt2D,KAAMs2D,EAAUX,IACvDxuD,EAAMsQ,wBAAyB,EAC/B5rB,EAAQ27D,EACZ,GACJ,IACCz4B,OAAM,WAEH4jC,EAAgBgE,mBAAmB32D,GAAqBzT,MAAK,SAAO8mE,GAAS,2C,uEACzElsD,EAAMsQ,yBAA2B7uB,KAAKijC,gBAC9BwnC,EAAUr0D,M,OACT,Y,OAQA,Y,OAYA,Y,mBAbD,OALUu3D,EAAoB,IAAI,EAAAC,sBAAsB,oBAAqB,KAAMrvD,EAAOve,KAAKygE,gBAAgBoN,YACzF7+C,iBAAmBhvB,KAAKijC,gBAC1C27B,EAAmB/5D,KAAK8oE,GACxBA,EAAkBG,WAAWrD,EAAUrzD,MAE3C,M,cAGU8yD,EAAa,IAAI,EAAA8D,kBAAkB,aAAc,EAAGzvD,GACtDwrD,EAAgBE,iBAAiBC,EAAYO,EAAUrzD,MACvD,GAAM8yD,EAAW+D,iBAAiBtqE,MAAK,SAAC8O,GACpCmsD,EAAmB/5D,KAAK4N,EAC5B,KAHA,M,cACA,S,aAIAy3D,EAAWlsD,U,iBAGnB,Y,OAGI,IAAIysD,EAAUzvB,MAGV,MAAM,IAAIx1C,MAAM,+CAGxB,OALQo5D,EAAmB/5D,KAAKklE,EAAgBS,WAAWjsD,EAAOksD,IAKlE,M,OAEA,MAAM,IAAIjlE,MAAM,0B,cAExB+Y,EAAMsQ,wBAAyB,EAC/B5rB,EAAQ27D,G,aAEhB,GACR,GACJ,EASO,YAAA1+C,wBAAP,SAA+B3B,EAAcnH,EAAcC,GAA3D,WACU8I,EAAY,IAAI,EAAAC,eAAe7B,GAGrC,OAFAve,KAAKijC,gBAAkB9iB,EAEhBngB,KAAK8f,gBAAgB,KAAMvB,EAAOnH,EAAMC,GAC1C1T,MAAK,SAACF,GAIH,OAHAA,EAAO+O,OAAOiE,SAAQ,SAAChE,GAAS,OAAA0N,EAAU3N,OAAO3N,KAAK4N,EAAtB,IAEhC,EAAKwwB,gBAAkB,KAChB9iB,CACX,IACCgmB,OAAM,SAAC4gC,GAEJ,MADA,EAAK9jC,gBAAkB,KACjB8jC,CACV,GACR,EASO,YAAA9mD,UAAP,SAAiB1B,EAAcnH,EAAcC,GAEzC,OAAOrX,KAAK8f,gBAAgB,KAAMvB,EAAOnH,EAAMC,GAAS1T,MAAK,WAE7D,GACJ,EASe,EAAAoqE,mBAAf,SAAkC32D,GAC9B,IAAMwzD,EAAO,IAAIjwD,WAAWvD,GACtB82D,GAAS,IAAIhG,aAAcC,OAAOyC,EAAK7wD,MAAM,EAAG,QAEhDo0D,EAAiBD,EAAO33D,QADZ,gBAElB,GAAI43D,EAAiB,IAAMD,EAEvB,OAAO,IAAIlrE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM,EAAYgB,KAAMA,GACtC,IAGJ,IAAMizD,EAAcrmD,SAAS,yBAAyBkgD,KAAKgK,GAAS,IAC9DE,EAAc,uBAAuBlK,KAAKgK,GAC5CG,EAAY,EACZD,IACAC,EAAYrqD,SAASoqD,EAAY,KAErC,IAAME,EAAe,wBAAwBpK,KAAKgK,GAC9CK,EAAa,EACbD,IACAC,EAAavqD,SAASsqD,EAAa,KAGvC,IAmBWE,EAnBPC,EAAkB,EAClBC,EAAiB,EACfC,EAAkC,CACpCC,OAAQ,EACR3Y,IAAK,EACL4Y,KAAM,EACNrZ,MAAO,EACPsZ,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,KAAM,IASV,SAAWT,GACP,uBACA,oBACH,CAHD,CAAWA,IAAAA,EAAW,KAStB,IAJA,IAAIU,EAAY,EACVC,EAAkC,GAClCC,EAAiC,GAEpB,MADFlB,EAAOn0D,MAAM,EAAGo0D,GAAgBzoE,MAAM,MACpC,eAAU,CAAxB,IAAMuR,EAAI,KACX,GAAIA,EAAK1R,WAAW,aAAc,CACxB,MAAiB0R,EAAKvR,MAAM,KAAzB0B,EAAI,KAAE,EAAI,KAEF,GAAb8nE,GACAE,EAAgBvqE,KAAK,CAAEoP,KAAI,EAAE7M,KAAI,EAAEF,OAAQwnE,IAC3CA,GAAkBC,EAAQvnE,IACN,GAAb8nE,IACPC,EAAiBtqE,KAAK,CAAEoP,KAAI,EAAE7M,KAAI,EAAEF,OAAQunE,IAC5CA,GAAmBE,EAAQvnE,IAG1BunE,EAAQvnE,IACT,EAAA2X,OAAOC,KAAK,qCAA8B5X,EAAI,KAEtD,MAAW6P,EAAK1R,WAAW,cAEX,UADH6B,EAAQ6P,EAAKvR,MAAM,KAAf,IAETwpE,EAAY,EACG,UAAR9nE,IACP8nE,EAAY,GAGxB,CAEA,IAAMG,EAAkBZ,EAClBa,EAAiBZ,EAEvB,OAAQ,EAAAd,sBAAsB2B,6BAA6Bn4D,GAAczT,MAAK,SAAC6rE,GAC3E,IAAMC,EAAW,IAAI/G,SAAStxD,EAAM+2D,EAAiBuB,IACjDxoE,EAASooE,EAAiBf,EAAac,EAAkBhF,EAEvDrvB,EAAkB,GACxB,GAAIqzB,EACA,IAAK,IAAI9rE,EAAI,EAAGA,EAAI8rE,EAAW9rE,IAAK,CAChC,IAAMotE,EAAkBF,EAAS3G,SAAS5hE,GAC1C,GAAuB,GAAnByoE,EAAJ,CAGAzoE,GAAU,EAEV,IAAK,IAAIqnB,EAAI,EAAGA,EAAIohD,EAAiBphD,IAAK,CACtC,IAAMqhD,EAAcH,EAAS9G,UAAUzhE,EAAmB,GAAT,EAAIqnB,IAAQ,GAC7DysB,EAAMn2C,KAAK+qE,EACf,CACA1oE,GAAU,EAPV,CAQJ,CAIJ,GAAIqnE,EACA,OAAO,IAAIvrE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM,EAAYgB,KAAMo4D,EAAWh2D,OAAQuzD,GAAIyC,EAAWzC,GAAI/xB,MAAOA,EAAO0vB,iBAAiB,GAC3G,IAQJ,IAJA,IAAImF,EAAgB,EAChBC,EAAqB,EACnBC,EAAkB,CAAC,IAAK,IAAK,IAAK,UAAW,UAAW,UAAW,UAAW,QAAS,QAAS,QAAS,SACzGC,EAAuB,CAAC,MAAO,QAAS,OAAQ,SAAU,SAAU,UACjEzb,EAAgB,EAAGA,EAAgB4a,EAAiB1sE,OAAQ8xD,IAAiB,CAClF,IAAMjd,EAAW63B,EAAiB5a,GAC9Bwb,EAAgBnqE,SAAS0xC,EAASrjC,OAClC47D,IAEAG,EAAqBpqE,SAAS0xC,EAASrjC,OACvC67D,GAER,CACA,IAAMG,EAAyBJ,GAAiBE,EAAgBttE,QAAgC,GAAtBqtE,EACpEI,EAAc7B,EAAY,EAAY4B,EAAyB,EAAa,EAElF,OAAO,IAAIjtE,SAAQ,SAACC,GAChBA,EAAQ,CAAEmT,KAAM85D,EAAa94D,KAAMo4D,EAAWh2D,OAAQuzD,GAAIyC,EAAWzC,GAAI/xB,MAAOA,EAAO0vB,kBAAmBoF,GAC9G,GACJ,GACJ,EAlfwB,EAAA/J,uBAAyB,CAC7C8H,WAAW,EACXlC,OAAO,GAiff,C,CA1gBA,IA6gBA,IAAAnlD,2BAA0B,IAAIujD,IC3jB9B,IAAMoG,QAAiC,IAAX,EAAA9rE,EAAyB,EAAAA,EAA2B,oBAAX2S,OAAyBA,YAAS1R,EACvG,QAA4B,IAAjB6qE,GAA8B,CAErC,IAAK,IAAMl9D,MADLk9D,GAAcvgB,QAAgBugB,GAAcvgB,SAAW,CAAC,EAC5C,EACRugB,GAAcvgB,QAAQ38C,IAAa,EAAYA,IAEzD,IAAK,IAAMA,MAAO,EACRk9D,GAAcvgB,QAAQ38C,IAAa,EAAYA,GAE7D,CCTA,IAAM,QAAiC,IAAX,EAAA5O,EAAyB,EAAAA,EAA2B,oBAAX2S,OAAyBA,YAAS1R,EACvG,QAA4B,IAAjB,GAGP,IAAK,IAAM,MAFL,GAAcsqD,QAAgB,GAAcA,SAAW,CAAC,EACxD,GAAcA,QAAQwgB,MAAc,GAAcxgB,QAAQwgB,OAAS,CAAC,EACxD,EACR,GAAcxgB,QAAQwgB,MAAM,IAAa,EAAO,ICH9D,IAAM,QAAiC,IAAX,EAAA/rE,EAAyB,EAAAA,EAA2B,oBAAX2S,OAAyBA,YAAS1R,EACvG,QAA4B,IAAjB,GAA8B,CAC/B,GAAcsqD,QAAgB,GAAcA,SAAW,CAAC,EAC9D,IAAM,GAAgB,GAAcA,QACpC,GAAQygB,MAAQ,GAAQA,OAAS,CAAC,EAClC,GAAQA,MAAMC,OAAS,GAAQD,MAAMC,QAAU,CAAC,EAChD,GAAQD,MAAMC,OAAO3yC,WAAa,GAAQ0yC,MAAMC,OAAO3yC,YAAc,CAAC,EAEtE,IAAMrpB,GAAO,GACb,IAAK,IAAM,MAAO,EACd,GAAQ+7D,MAAMC,OAAO3yC,WAAW,IAAa,EAAY,IACzDrpB,GAAKzP,KAAK,IAEd,IAAK,IAAM,MAAO,EACd,GAAQwrE,MAAMC,OAAO,IAAa,EAAY,IAC9Ch8D,GAAKzP,KAAK,IAGd,IAAK,IAAM,MAAO,EAEVyP,GAAKiC,QAAQ,KAAQ,IAIzB,GAAQ85D,MAAM,IAAa,EAAO,IAE1C,CC5BA,IAAM,QAAiC,IAAX,EAAAhsE,EAAyB,EAAAA,EAA2B,oBAAX2S,OAAyBA,YAAS1R,EACvG,QAA4B,IAAjB,GACP,IAAK,IAAM,MAAO,EACH,GAAcsqD,QAAQ,MACvB,GAAcA,QAAQ,IAAa,EAAS,KCJ9D,IAAM,QAAiC,IAAX,EAAAvrD,EAAyB,EAAAA,EAA2B,oBAAX2S,OAAyBA,YAAS1R,EACvG,QAA4B,IAAjB,GACP,IAAK,IAAM,MAAO,EACH,GAAcsqD,QAAQ,MACvB,GAAcA,QAAQ,IAAa,EAAS,KCT9D,W","sources":["webpack://LOADERS/webpack/universalModuleDefinition","webpack://LOADERS/webpack/runtime/create fake namespace object","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/flowGraphGLTFDataProvider.ts","webpack://LOADERS/../../../../node_modules/tslib/tslib.es6.mjs","webpack://LOADERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/gltfPathToObjectConverter.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/objectModelMapping.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/glTFLoaderAnimation.ts","webpack://LOADERS/webpack/bootstrap","webpack://LOADERS/webpack/runtime/compat get default export","webpack://LOADERS/webpack/runtime/define property getters","webpack://LOADERS/webpack/runtime/global","webpack://LOADERS/webpack/runtime/hasOwnProperty shorthand","webpack://LOADERS/webpack/runtime/make namespace object","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFValidation.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/glTFFileLoader.metadata.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoaderInterfaces.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoaderUtils.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFLoader.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFBinaryExtension.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/1.0/glTFMaterialsCommonExtension.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/glTFLoaderExtensionRegistry.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/glTFLoader.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_image_based.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_meshopt_compression.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_texture_webp.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_texture_avif.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_ies.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_draco_mesh_compression.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_lights_punctual.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_unlit.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_clearcoat.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_iridescence.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_anisotropy.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_emissive_strength.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_sheen.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_specular.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_ior.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_variants.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_transmission.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_diffuse_transmission.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_volume.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_dispersion.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_mesh_quantization.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_texture_basisu.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_texture_transform.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_xmp_json_ld.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.data.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_audio_emitter.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_lod.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_minecraftMesh.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_sRGBFactors.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/declarationMapper.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/interactivityGraphParser.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_visibility.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_selectability.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_hoverability.ts","webpack://LOADERS/../../../dev/loaders/src/glTF/2.0/Extensions/ExtrasAsMetadata.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/mtlFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/solidParser.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/objFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/objFileLoader.metadata.ts","webpack://LOADERS/../../../dev/loaders/src/STL/stlFileLoader.metadata.ts","webpack://LOADERS/../../../dev/loaders/src/STL/stlFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/SPLAT/splatFileLoader.metadata.ts","webpack://LOADERS/../../../dev/loaders/src/SPLAT/splatFileLoader.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-glTF.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-glTF1.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-glTF2.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-objFileLoader.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-stlFileLoader.ts","webpack://LOADERS/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-loaders\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-loaders\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"LOADERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { TransformNode } from \"core/Meshes/transformNode\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n\n/**\n * a configuration interface for this block\n */\nexport interface IFlowGraphGLTFDataProviderBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * the glTF object to provide data from\n     */\n    glTF: IGLTF;\n}\n\n/**\n * a glTF-based FlowGraph block that provides arrays with babylon object, based on the glTF tree\n * Can be used, for example, to get animation index from a glTF animation\n */\nexport class FlowGraphGLTFDataProvider extends FlowGraphBlock {\n    /**\n     * Output: an array of animation groups\n     * Corresponds directly to the glTF animations array\n     */\n    public readonly animationGroups: FlowGraphDataConnection<AnimationGroup[]>;\n\n    /**\n     * Output an array of (Transform) nodes\n     * Corresponds directly to the glTF nodes array\n     */\n    public readonly nodes: FlowGraphDataConnection<TransformNode[]>;\n\n    constructor(config: IFlowGraphGLTFDataProviderBlockConfiguration) {\n        super();\n        const glTF = config.glTF;\n        const animationGroups = glTF.animations?.map((a) => a._babylonAnimationGroup) || [];\n        this.animationGroups = this.registerDataOutput(\"animationGroups\", RichTypeAny, animationGroups);\n        const nodes = glTF.nodes?.map((n) => n._babylonTransformNode) || [];\n        this.nodes = this.registerDataOutput(\"nodes\", RichTypeAny, nodes);\n    }\n\n    public override getClassName(): string {\n        return \"FlowGraphGLTFDataProvider\";\n    }\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","import type { IObjectInfo, IPathToObjectConverter } from \"core/ObjectModel/objectModelInterfaces\";\r\nimport type { IGLTF } from \"../glTFLoaderInterfaces\";\r\nimport type { IObjectAccessor } from \"core/FlowGraph/typeDefinitions\";\r\n\r\n/**\r\n * A converter that takes a glTF Object Model JSON Pointer\r\n * and transforms it into an ObjectAccessorContainer, allowing\r\n * objects referenced in the glTF to be associated with their\r\n * respective Babylon.js objects.\r\n */\r\nexport class GLTFPathToObjectConverter<T, BabylonType, BabylonValue> implements IPathToObjectConverter<IObjectAccessor<T, BabylonType, BabylonValue>> {\r\n    public constructor(\r\n        private _gltf: IGLTF,\r\n        private _infoTree: any\r\n    ) {}\r\n\r\n    /**\r\n     * The pointer string is represented by a [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).\r\n     * See also https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/ObjectModel.adoc#core-pointers\r\n     * <animationPointer> := /<rootNode>/<assetIndex>/<propertyPath>\r\n     * <rootNode> := \"nodes\" | \"materials\" | \"meshes\" | \"cameras\" | \"extensions\"\r\n     * <assetIndex> := <digit> | <name>\r\n     * <propertyPath> := <extensionPath> | <standardPath>\r\n     * <extensionPath> := \"extensions\"/<name>/<standardPath>\r\n     * <standardPath> := <name> | <name>/<standardPath>\r\n     * <name> := W+\r\n     * <digit> := D+\r\n     *\r\n     * Examples:\r\n     *  - \"/nodes/0/rotation\"\r\n     * - \"/nodes.length\"\r\n     *  - \"/materials/2/emissiveFactor\"\r\n     *  - \"/materials/2/pbrMetallicRoughness/baseColorFactor\"\r\n     *  - \"/materials/2/extensions/KHR_materials_emissive_strength/emissiveStrength\"\r\n     *\r\n     * @param path The path to convert\r\n     * @returns The object and info associated with the path\r\n     */\r\n    public convert(path: string): IObjectInfo<IObjectAccessor<T, BabylonType, BabylonValue>> {\r\n        let objectTree: any = this._gltf;\r\n        let infoTree: any = this._infoTree;\r\n        let target: any = undefined;\r\n\r\n        if (!path.startsWith(\"/\")) {\r\n            throw new Error(\"Path must start with a /\");\r\n        }\r\n        const parts = path.split(\"/\");\r\n        parts.shift();\r\n\r\n        //if the last part has \".length\" in it, separate that as an extra part\r\n        if (parts[parts.length - 1].includes(\".length\")) {\r\n            const lastPart = parts[parts.length - 1];\r\n            const split = lastPart.split(\".\");\r\n            parts.pop();\r\n            parts.push(...split);\r\n        }\r\n\r\n        let ignoreObjectTree = false;\r\n\r\n        for (const part of parts) {\r\n            const isLength = part === \"length\";\r\n            if (isLength && !infoTree.__array__) {\r\n                throw new Error(`Path ${path} is invalid`);\r\n            }\r\n            if (infoTree.__ignoreObjectTree__) {\r\n                ignoreObjectTree = true;\r\n            }\r\n            if (infoTree.__array__ && !isLength) {\r\n                infoTree = infoTree.__array__;\r\n            } else {\r\n                infoTree = infoTree[part];\r\n                if (!infoTree) {\r\n                    throw new Error(`Path ${path} is invalid`);\r\n                }\r\n            }\r\n            if (!ignoreObjectTree) {\r\n                if (objectTree === undefined) {\r\n                    throw new Error(`Path ${path} is invalid`);\r\n                }\r\n                if (!isLength) {\r\n                    objectTree = objectTree?.[part];\r\n                }\r\n            }\r\n\r\n            if (infoTree.__target__ || isLength) {\r\n                target = objectTree;\r\n            }\r\n        }\r\n\r\n        return {\r\n            object: target,\r\n            info: infoTree,\r\n        };\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\n\nimport type { TransformNode } from \"core/Meshes/transformNode\";\nimport type { IAnimation, ICamera, IGLTF, IKHRLightsPunctual_Light, IMaterial, IMesh, INode } from \"../glTFLoaderInterfaces\";\nimport type { Vector3 } from \"core/Maths/math.vector\";\nimport { Matrix, Quaternion, Vector2 } from \"core/Maths/math.vector\";\nimport { Constants } from \"core/Engines/constants\";\nimport type { Color3 } from \"core/Maths/math.color\";\nimport { Color4 } from \"core/Maths/math.color\";\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\nimport type { Light } from \"core/Lights/light\";\nimport type { Nullable } from \"core/types\";\nimport { SpotLight } from \"core/Lights/spotLight\";\nimport type { IEXTLightsImageBased_LightImageBased } from \"babylonjs-gltf2interface\";\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\nimport type { IInterpolationPropertyInfo, IObjectAccessor } from \"core/FlowGraph/typeDefinitions\";\nimport { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { Mesh } from \"core/Meshes/mesh\";\n\nexport interface IGLTFObjectModelTree {\n    cameras: IGLTFObjectModelTreeCamerasObject;\n    nodes: IGLTFObjectModelTreeNodesObject;\n    materials: IGLTFObjectModelTreeMaterialsObject;\n    extensions: IGLTFObjectModelTreeExtensionsObject;\n    animations: {\n        length: IObjectAccessor<IAnimation[], AnimationGroup[], number>;\n        __array__: {};\n    };\n    meshes: {\n        length: IObjectAccessor<IMesh[], (Mesh | undefined)[], number>;\n        __array__: {};\n    };\n}\n\nexport interface IGLTFObjectModelTreeNodesObject<GLTFTargetType = INode, BabylonTargetType = TransformNode> {\n    length: IObjectAccessor<GLTFTargetType[], BabylonTargetType[], number>;\n    __array__: {\n        __target__: boolean;\n        translation: IObjectAccessor<GLTFTargetType, BabylonTargetType, Vector3>;\n        rotation: IObjectAccessor<GLTFTargetType, BabylonTargetType, Quaternion>;\n        scale: IObjectAccessor<GLTFTargetType, BabylonTargetType, Vector3>;\n        matrix: IObjectAccessor<GLTFTargetType, BabylonTargetType, Matrix>;\n        globalMatrix: IObjectAccessor<GLTFTargetType, BabylonTargetType, Matrix>;\n        weights: {\n            length: IObjectAccessor<GLTFTargetType, BabylonTargetType, number>;\n            __array__: { __target__: boolean } & IObjectAccessor<GLTFTargetType, BabylonTargetType, number>;\n        } & IObjectAccessor<GLTFTargetType, BabylonTargetType, number[]>;\n        extensions: {\n            EXT_lights_ies?: {\n                multiplier: IObjectAccessor<INode, Light, number>;\n                color: IObjectAccessor<INode, Light, Color3>;\n            };\n        };\n    };\n}\n\nexport interface IGLTFObjectModelTreeCamerasObject {\n    __array__: {\n        __target__: boolean;\n        orthographic: {\n            xmag: IObjectAccessor<ICamera, ICamera, Vector2>;\n            ymag: IObjectAccessor<ICamera, ICamera, Vector2>;\n            zfar: IObjectAccessor<ICamera, ICamera, number>;\n            znear: IObjectAccessor<ICamera, ICamera, number>;\n        };\n        perspective: {\n            yfov: IObjectAccessor<ICamera, ICamera, number>;\n            zfar: IObjectAccessor<ICamera, ICamera, number>;\n            znear: IObjectAccessor<ICamera, ICamera, number>;\n            aspectRatio: IObjectAccessor<ICamera, ICamera, Nullable<number>>;\n        };\n    };\n}\n\nexport interface IGLTFObjectModelTreeMaterialsObject {\n    __array__: {\n        __target__: boolean;\n        pbrMetallicRoughness: {\n            baseColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color4>;\n            metallicFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<number>>;\n            roughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<number>>;\n            baseColorTexture: {\n                extensions: {\n                    KHR_texture_transform: ITextureDefinition;\n                };\n            };\n            metallicRoughnessTexture: {\n                extensions: {\n                    KHR_texture_transform: ITextureDefinition;\n                };\n            };\n        };\n        emissiveFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n        normalTexture: {\n            scale: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        occlusionTexture: {\n            strength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        emissiveTexture: {\n            extensions: {\n                KHR_texture_transform: ITextureDefinition;\n            };\n        };\n        extensions: {\n            KHR_materials_anisotropy: {\n                anisotropyStrength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                anisotropyRotation: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                anisotropyTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_clearcoat: {\n                clearcoatFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                clearcoatRoughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                clearcoatTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                clearcoatNormalTexture: {\n                    scale: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                clearcoatRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_dispersion: {\n                dispersion: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_emissive_strength: {\n                emissiveStrength: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_ior: {\n                ior: IObjectAccessor<IMaterial, PBRMaterial, number>;\n            };\n            KHR_materials_iridescence: {\n                iridescenceFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceIor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceThicknessMinimum: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceThicknessMaximum: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                iridescenceTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                iridescenceThicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_sheen: {\n                sheenColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                sheenRoughnessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                sheenColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                sheenRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_specular: {\n                specularFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                specularColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                specularTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                specularColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_transmission: {\n                transmissionFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                transmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_diffuse_transmission: {\n                diffuseTransmissionFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                diffuseTransmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n                diffuseTransmissionColorFactor: IObjectAccessor<IMaterial, PBRMaterial, Nullable<Color3>>;\n                diffuseTransmissionColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n            KHR_materials_volume: {\n                thicknessFactor: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                attenuationColor: IObjectAccessor<IMaterial, PBRMaterial, Color3>;\n                attenuationDistance: IObjectAccessor<IMaterial, PBRMaterial, number>;\n                thicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: ITextureDefinition;\n                    };\n                };\n            };\n        };\n    };\n}\n\ninterface ITextureDefinition {\n    offset: IObjectAccessor<IMaterial, PBRMaterial, Vector2>;\n    rotation: IObjectAccessor<IMaterial, PBRMaterial, number>;\n    scale: IObjectAccessor<IMaterial, PBRMaterial, Vector2>;\n}\n\nexport interface IGLTFObjectModelTreeMeshesObject {}\n\nexport interface IGLTFObjectModelTreeExtensionsObject {\n    KHR_lights_punctual: {\n        lights: {\n            length: IObjectAccessor<IKHRLightsPunctual_Light[], Light[], number>;\n            __array__: {\n                __target__: boolean;\n                color: IObjectAccessor<IKHRLightsPunctual_Light, Light, Color3>;\n                intensity: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                range: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                spot: {\n                    innerConeAngle: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                    outerConeAngle: IObjectAccessor<IKHRLightsPunctual_Light, Light, number>;\n                };\n            };\n        };\n    };\n    EXT_lights_ies: {\n        lights: {\n            length: IObjectAccessor<IKHRLightsPunctual_Light[], Light[], number>;\n        };\n    };\n    EXT_lights_image_based: {\n        lights: {\n            __array__: {\n                __target__: boolean;\n                intensity: IObjectAccessor<IEXTLightsImageBased_LightImageBased, BaseTexture, number>;\n                rotation: IObjectAccessor<IEXTLightsImageBased_LightImageBased, BaseTexture, Quaternion>;\n            };\n            length: IObjectAccessor<IEXTLightsImageBased_LightImageBased[], BaseTexture[], number>;\n        };\n    };\n}\n\nconst nodesTree: IGLTFObjectModelTreeNodesObject = {\n    length: {\n        type: \"number\",\n        get: (nodes: INode[]) => nodes.length,\n        getTarget: (nodes: INode[]) => nodes.map((node) => node._babylonTransformNode!),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {\n        __target__: true,\n        translation: {\n            type: \"Vector3\",\n            get: (node: INode) => node._babylonTransformNode?.position,\n            set: (value: Vector3, node: INode) => node._babylonTransformNode?.position.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"position\"],\n        },\n        rotation: {\n            type: \"Quaternion\",\n            get: (node: INode) => node._babylonTransformNode?.rotationQuaternion!,\n            set: (value: Quaternion, node: INode) => node._babylonTransformNode?.rotationQuaternion?.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"rotationQuaternion\"],\n        },\n        scale: {\n            type: \"Vector3\",\n            get: (node: INode) => node._babylonTransformNode?.scaling,\n            set: (value: Vector3, node: INode) => node._babylonTransformNode?.scaling.copyFrom(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"scaling\"],\n        },\n        weights: {\n            length: {\n                type: \"number\",\n                get: (node: INode) => node._numMorphTargets,\n                getTarget: (node: INode) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            __array__: {\n                __target__: true,\n                type: \"number\",\n                get: (node: INode, index?: number) => (index !== undefined ? node._primitiveBabylonMeshes?.[0].morphTargetManager?.getTarget(index).influence : undefined),\n                // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n                getTarget: (node: INode) => node._babylonTransformNode,\n                getPropertyName: [() => \"influence\"],\n            },\n            type: \"number[]\",\n            get: (node: INode, index?: number) => [0], // TODO: get the weights correctly\n            // set: (value: number, node: INode, index?: number) => node._babylonTransformNode?.getMorphTargetManager()?.getTarget(index)?.setInfluence(value),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            getPropertyName: [() => \"influence\"],\n        },\n        // readonly!\n        matrix: {\n            type: \"Matrix\",\n            get: (node: INode) => Matrix.Compose(node._babylonTransformNode?.scaling!, node._babylonTransformNode?.rotationQuaternion!, node._babylonTransformNode?.position!),\n            getTarget: (node: INode) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        globalMatrix: {\n            type: \"Matrix\",\n            get: (node: INode) => {\n                const matrix = Matrix.Identity();\n                // RHS/LHS support\n                let rootNode = node.parent;\n                while (rootNode && rootNode.parent) {\n                    rootNode = rootNode.parent;\n                }\n                const forceUpdate =\n                    node._babylonTransformNode?.position._isDirty || node._babylonTransformNode?.rotationQuaternion?._isDirty || node._babylonTransformNode?.scaling._isDirty;\n                if (rootNode) {\n                    // take the parent root node's world matrix, invert it, and multiply it with the current node's world matrix\n                    // This will provide the global matrix, ignoring the RHS->LHS conversion\n                    const rootMatrix = rootNode._babylonTransformNode?.computeWorldMatrix(true).invert();\n                    if (rootMatrix) {\n                        node._babylonTransformNode?.computeWorldMatrix(forceUpdate)?.multiplyToRef(rootMatrix, matrix);\n                    }\n                } else if (node._babylonTransformNode) {\n                    matrix.copyFrom(node._babylonTransformNode.computeWorldMatrix(forceUpdate));\n                }\n                return matrix;\n            },\n            getTarget: (node: INode) => node._babylonTransformNode,\n            isReadOnly: true,\n        },\n        extensions: {\n            EXT_lights_ies: {\n                multiplier: {\n                    type: \"number\",\n                    get: (node: INode) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.intensity;\n                    },\n                    getTarget: (node: INode) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.intensity = value;\n                            }\n                        }\n                    },\n                },\n                color: {\n                    type: \"Color3\",\n                    get: (node: INode) => {\n                        return node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0]?.diffuse;\n                    },\n                    getTarget: (node: INode) => node._babylonTransformNode?.getChildren((child) => child instanceof SpotLight, true)[0],\n                    set: (value, node: INode) => {\n                        if (node._babylonTransformNode) {\n                            const light = node._babylonTransformNode.getChildren((child) => child instanceof SpotLight, true)[0];\n                            if (light) {\n                                light.diffuse = value;\n                            }\n                        }\n                    },\n                },\n            },\n        },\n    },\n};\n\nconst animationsTree = {\n    length: {\n        type: \"number\",\n        get: (animations: IAnimation[]) => animations.length,\n        getTarget: (animations: IAnimation[]) => animations.map((animation) => animation._babylonAnimationGroup!),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\n\nconst meshesTree = {\n    length: {\n        type: \"number\",\n        get: (meshes: IMesh[]) => meshes.length,\n        getTarget: (meshes: IMesh[]) => meshes.map((mesh) => mesh.primitives[0]._instanceData?.babylonSourceMesh),\n        getPropertyName: [() => \"length\"],\n    },\n    __array__: {},\n};\n\nconst camerasTree: IGLTFObjectModelTreeCamerasObject = {\n    __array__: {\n        __target__: true,\n        orthographic: {\n            xmag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera) => new Vector2(camera._babylonCamera?.orthoLeft ?? 0, camera._babylonCamera?.orthoRight ?? 0),\n                set: (value, camera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoLeft = value.x;\n                        camera._babylonCamera.orthoRight = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoLeft\", () => \"orthoRight\"],\n            },\n            ymag: {\n                componentsCount: 2,\n                type: \"Vector2\",\n                get: (camera: ICamera) => new Vector2(camera._babylonCamera?.orthoBottom ?? 0, camera._babylonCamera?.orthoTop ?? 0),\n                set: (value: Vector2, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.orthoBottom = value.x;\n                        camera._babylonCamera.orthoTop = value.y;\n                    }\n                },\n                getTarget: (camera) => camera,\n                getPropertyName: [() => \"orthoBottom\", () => \"orthoTop\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.maxZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.minZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n        perspective: {\n            aspectRatio: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.getEngine().getAspectRatio(camera._babylonCamera),\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"aspectRatio\"],\n                isReadOnly: true, // might not be the case for glTF?\n            },\n            yfov: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.fov,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.fov = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"fov\"],\n            },\n            zfar: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.maxZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.maxZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"maxZ\"],\n            },\n            znear: {\n                type: \"number\",\n                get: (camera: ICamera) => camera._babylonCamera?.minZ,\n                set: (value: number, camera: ICamera) => {\n                    if (camera._babylonCamera) {\n                        camera._babylonCamera.minZ = value;\n                    }\n                },\n                getTarget: (camera: ICamera) => camera,\n                getPropertyName: [() => \"minZ\"],\n            },\n        },\n    },\n};\n\nconst materialsTree: IGLTFObjectModelTreeMaterialsObject = {\n    __array__: {\n        __target__: true,\n        emissiveFactor: {\n            type: \"Color3\",\n            get: (material, index?, payload?) => _GetMaterial(material, index, payload).emissiveColor,\n            set: (value: Color3, material, index?, payload?) => _GetMaterial(material, index, payload).emissiveColor.copyFrom(value),\n            getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n            getPropertyName: [() => \"emissiveColor\"],\n        },\n        emissiveTexture: {\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"emissiveTexture\"),\n            },\n        },\n        normalTexture: {\n            scale: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetTexture(material, payload, \"bumpTexture\")?.level,\n                set: (value: number, material, index?, payload?) => {\n                    const texture = _GetTexture(material, payload, \"bumpTexture\");\n                    if (texture) {\n                        texture.level = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"level\"],\n            },\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"bumpTexture\"),\n            },\n        },\n        occlusionTexture: {\n            strength: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).ambientTextureStrength,\n                set: (value: number, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.ambientTextureStrength = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"ambientTextureStrength\"],\n            },\n            extensions: {\n                KHR_texture_transform: _GenerateTextureMap(\"ambientTexture\"),\n            },\n        },\n        pbrMetallicRoughness: {\n            baseColorFactor: {\n                type: \"Color4\",\n                get: (material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    return Color4.FromColor3(mat.albedoColor, mat.alpha);\n                },\n                set: (value: Color4, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    mat.albedoColor.set(value.r, value.g, value.b);\n                    mat.alpha = value.a;\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                // This is correct on the animation level, but incorrect as a single property of a type Color4\n                getPropertyName: [() => \"albedoColor\", () => \"alpha\"],\n            },\n            baseColorTexture: {\n                extensions: {\n                    KHR_texture_transform: _GenerateTextureMap(\"albedoTexture\"),\n                },\n            },\n            metallicFactor: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).metallic,\n                set: (value, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.metallic = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"metallic\"],\n            },\n            roughnessFactor: {\n                type: \"number\",\n                get: (material, index?, payload?) => _GetMaterial(material, index, payload).roughness,\n                set: (value, material, index?, payload?) => {\n                    const mat = _GetMaterial(material, index, payload);\n                    if (mat) {\n                        mat.roughness = value;\n                    }\n                },\n                getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                getPropertyName: [() => \"roughness\"],\n            },\n            metallicRoughnessTexture: {\n                extensions: {\n                    KHR_texture_transform: _GenerateTextureMap(\"metallicTexture\"),\n                },\n            },\n        },\n        extensions: {\n            KHR_materials_anisotropy: {\n                anisotropyStrength: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).anisotropy.intensity,\n                    set: (value: number, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).anisotropy.intensity = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.intensity\"],\n                },\n                anisotropyRotation: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).anisotropy.angle,\n                    set: (value: number, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).anisotropy.angle = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"anisotropy.angle\"],\n                },\n                anisotropyTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"anisotropy\", \"texture\"),\n                    },\n                },\n            },\n            KHR_materials_clearcoat: {\n                clearcoatFactor: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).clearCoat.intensity,\n                    set: (value, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).clearCoat.intensity = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.intensity\"],\n                },\n                clearcoatRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index?, payload?) => _GetMaterial(material, index, payload).clearCoat.roughness,\n                    set: (value, material, index?, payload?) => {\n                        _GetMaterial(material, index, payload).clearCoat.roughness = value;\n                    },\n                    getTarget: (material, index?, payload?) => _GetMaterial(material, index, payload),\n                    getPropertyName: [() => \"clearCoat.roughness\"],\n                },\n                clearcoatTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"texture\"),\n                    },\n                },\n                clearcoatNormalTexture: {\n                    scale: {\n                        type: \"number\",\n                        get: (material, index, payload) => _GetMaterial(material, index, payload).clearCoat.bumpTexture?.level,\n                        getTarget: _GetMaterial,\n                        set: (value, material, index, payload) => (_GetMaterial(material, index, payload).clearCoat.bumpTexture!.level = value),\n                    },\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"bumpTexture\"),\n                    },\n                },\n                clearcoatRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"clearCoat\", \"textureRoughness\"),\n                    },\n                },\n            },\n            KHR_materials_dispersion: {\n                dispersion: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.dispersion,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.dispersion = value),\n                },\n            },\n            KHR_materials_emissive_strength: {\n                emissiveStrength: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).emissiveIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).emissiveIntensity = value),\n                },\n            },\n            KHR_materials_ior: {\n                ior: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).indexOfRefraction,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).indexOfRefraction = value),\n                },\n            },\n            KHR_materials_iridescence: {\n                iridescenceFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.intensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.intensity = value),\n                },\n                iridescenceIor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.indexOfRefraction,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.indexOfRefraction = value),\n                },\n                iridescenceTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"iridescence\", \"texture\"),\n                    },\n                },\n                iridescenceThicknessMaximum: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.maximumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.maximumThickness = value),\n                },\n                iridescenceThicknessMinimum: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).iridescence.minimumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).iridescence.minimumThickness = value),\n                },\n                iridescenceThicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"iridescence\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_sheen: {\n                sheenColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).sheen.color,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).sheen.color.copyFrom(value),\n                },\n                sheenColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"sheen\", \"texture\"),\n                    },\n                },\n                sheenRoughnessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).sheen.intensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).sheen.intensity = value),\n                },\n                sheenRoughnessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"sheen\", \"thicknessTexture\"),\n                    },\n                },\n            },\n            KHR_materials_specular: {\n                specularFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).metallicF0Factor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).metallicF0Factor = value),\n                    getPropertyName: [() => \"metallicF0Factor\"],\n                },\n                specularColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).metallicReflectanceColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).metallicReflectanceColor.copyFrom(value),\n                    getPropertyName: [() => \"metallicReflectanceColor\"],\n                },\n                specularTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"metallicReflectanceTexture\"),\n                    },\n                },\n                specularColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"reflectanceTexture\"),\n                    },\n                },\n            },\n            KHR_materials_transmission: {\n                transmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.refractionIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.refractionIntensity = value),\n                    getPropertyName: [() => \"subSurface.refractionIntensity\"],\n                },\n                transmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"refractionIntensityTexture\"),\n                    },\n                },\n            },\n            KHR_materials_diffuse_transmission: {\n                diffuseTransmissionFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.translucencyIntensity,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.translucencyIntensity = value),\n                },\n                diffuseTransmissionTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"translucencyIntensityTexture\"),\n                    },\n                },\n                diffuseTransmissionColorFactor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.translucencyColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => value && _GetMaterial(material, index, payload).subSurface.translucencyColor?.copyFrom(value),\n                },\n                diffuseTransmissionColorTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"translucencyColorTexture\"),\n                    },\n                },\n            },\n            KHR_materials_volume: {\n                attenuationColor: {\n                    type: \"Color3\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColor,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColor.copyFrom(value),\n                },\n                attenuationDistance: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.tintColorAtDistance,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.tintColorAtDistance = value),\n                },\n                thicknessFactor: {\n                    type: \"number\",\n                    get: (material, index, payload) => _GetMaterial(material, index, payload).subSurface.maximumThickness,\n                    getTarget: _GetMaterial,\n                    set: (value, material, index, payload) => (_GetMaterial(material, index, payload).subSurface.maximumThickness = value),\n                },\n                thicknessTexture: {\n                    extensions: {\n                        KHR_texture_transform: _GenerateTextureMap(\"subSurface\", \"thicknessTexture\"),\n                    },\n                },\n            },\n        },\n    },\n};\n\nconst extensionsTree: IGLTFObjectModelTreeExtensionsObject = {\n    KHR_lights_punctual: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights: IKHRLightsPunctual_Light[]) => lights.length,\n                getTarget: (lights: IKHRLightsPunctual_Light[]) => lights.map((light) => light._babylonLight!),\n                getPropertyName: [(_lights: IKHRLightsPunctual_Light[]) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                color: {\n                    type: \"Color3\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.diffuse,\n                    set: (value: Color3, light: IKHRLightsPunctual_Light) => light._babylonLight?.diffuse.copyFrom(value),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"diffuse\"],\n                },\n                intensity: {\n                    type: \"number\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.intensity,\n                    set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? (light._babylonLight.intensity = value) : undefined),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"intensity\"],\n                },\n                range: {\n                    type: \"number\",\n                    get: (light: IKHRLightsPunctual_Light) => light._babylonLight?.range,\n                    set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? (light._babylonLight.range = value) : undefined),\n                    getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                    getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"range\"],\n                },\n                spot: {\n                    innerConeAngle: {\n                        type: \"number\",\n                        get: (light: IKHRLightsPunctual_Light) => (light._babylonLight as SpotLight)?.innerAngle,\n                        set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? ((light._babylonLight as SpotLight).innerAngle = value) : undefined),\n                        getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                        getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"innerConeAngle\"],\n                    },\n                    outerConeAngle: {\n                        type: \"number\",\n                        get: (light: IKHRLightsPunctual_Light) => (light._babylonLight as SpotLight)?.angle,\n                        set: (value: number, light: IKHRLightsPunctual_Light) => (light._babylonLight ? ((light._babylonLight as SpotLight).angle = value) : undefined),\n                        getTarget: (light: IKHRLightsPunctual_Light) => light._babylonLight,\n                        getPropertyName: [(_light: IKHRLightsPunctual_Light) => \"outerConeAngle\"],\n                    },\n                },\n            },\n        },\n    },\n    EXT_lights_ies: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights: IKHRLightsPunctual_Light[]) => lights.length,\n                getTarget: (lights: IKHRLightsPunctual_Light[]) => lights.map((light) => light._babylonLight!),\n                getPropertyName: [(_lights: IKHRLightsPunctual_Light[]) => \"length\"],\n            },\n        },\n    },\n    EXT_lights_image_based: {\n        lights: {\n            length: {\n                type: \"number\",\n                get: (lights) => lights.length,\n                getTarget: (lights) => lights.map((light) => light._babylonTexture!),\n                getPropertyName: [(_lights) => \"length\"],\n            },\n            __array__: {\n                __target__: true,\n                intensity: {\n                    type: \"number\",\n                    get: (light) => light._babylonTexture?.level,\n                    set: (value, light) => {\n                        if (light._babylonTexture) light._babylonTexture.level = value;\n                    },\n\n                    getTarget: (light) => light._babylonTexture,\n                },\n                rotation: {\n                    type: \"Quaternion\",\n                    get: (light) => light._babylonTexture && Quaternion.FromRotationMatrix(light._babylonTexture?.getReflectionTextureMatrix()),\n                    set: (value, light) => {\n                        if (!light._babylonTexture) return;\n                        // Invert the rotation so that positive rotation is counter-clockwise.\n                        if (!light._babylonTexture.getScene()?.useRightHandedSystem) {\n                            value = Quaternion.Inverse(value);\n                        }\n\n                        Matrix.FromQuaternionToRef(value, light._babylonTexture.getReflectionTextureMatrix());\n                    },\n                    getTarget: (light) => light._babylonTexture,\n                },\n            },\n        },\n    },\n};\n\nfunction _GetTexture(material: IMaterial, payload: any, textureType: keyof PBRMaterial, textureInObject?: string) {\n    const babylonMaterial = _GetMaterial(material, payload);\n    return textureInObject ? babylonMaterial[textureType][textureInObject] : babylonMaterial[textureType];\n}\nfunction _GetMaterial(material: IMaterial, _index?: number, payload?: any) {\n    return material._data?.[payload?.fillMode ?? Constants.MATERIAL_TriangleFillMode]?.babylonMaterial as PBRMaterial;\n}\nfunction _GenerateTextureMap(textureType: keyof PBRMaterial, textureInObject?: string): ITextureDefinition {\n    return {\n        offset: {\n            componentsCount: 2,\n            // assuming two independent values for u and v, and NOT a Vector2\n            type: \"Vector2\",\n            get: (material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uOffset, texture?.vOffset);\n            },\n            getTarget: _GetMaterial,\n            set: (value, material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                (texture.uOffset = value.x), (texture.vOffset = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uOffset`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vOffset`,\n            ],\n        },\n        rotation: {\n            type: \"number\",\n            get: (material, _index?, payload?) => _GetTexture(material, payload, textureType, textureInObject)?.wAng,\n            getTarget: _GetMaterial,\n            set: (value, material, _index?, payload?) => (_GetTexture(material, payload, textureType, textureInObject).wAng = value),\n            getPropertyName: [() => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.wAng`],\n        },\n        scale: {\n            componentsCount: 2,\n            type: \"Vector2\",\n            get: (material, _index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                return new Vector2(texture?.uScale, texture?.vScale);\n            },\n            getTarget: _GetMaterial,\n            set: (value, material, index?, payload?) => {\n                const texture = _GetTexture(material, payload, textureType, textureInObject);\n                (texture.uScale = value.x), (texture.vScale = value.y);\n            },\n            getPropertyName: [\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.uScale`,\n                () => `${textureType}${textureInObject ? \".\" + textureInObject : \"\"}.vScale`,\n            ],\n        },\n    };\n}\n\nconst objectModelMapping: IGLTFObjectModelTree = {\n    cameras: camerasTree,\n    nodes: nodesTree,\n    materials: materialsTree,\n    extensions: extensionsTree,\n    animations: animationsTree,\n    meshes: meshesTree,\n};\n\n/**\n * get a path-to-object converter for the given glTF tree\n * @param gltf the glTF tree to use\n * @returns a path-to-object converter for the given glTF tree\n */\nexport function GetPathToObjectConverter(gltf: IGLTF) {\n    return new GLTFPathToObjectConverter(gltf, objectModelMapping);\n}\n\n/**\n * This function will return the object accessor for the given key in the object model\n * If the key is not found, it will return undefined\n * @param key the key to get the mapping for, for example /materials/\\{\\}/emissiveFactor\n * @returns an object accessor for the given key, or undefined if the key is not found\n */\nexport function GetMappingForKey(key: string): IObjectAccessor | undefined {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that current is an object accessor\n    if (current && current.type && current.get) {\n        return current;\n    }\n    return undefined;\n}\n\n/**\n * Set interpolation for a specific key in the object model\n * @param key the key to set, for example /materials/\\{\\}/emissiveFactor\n * @param interpolation the interpolation elements array\n */\nexport function SetInterpolationForKey(key: string, interpolation?: IInterpolationPropertyInfo[]): void {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        current = current[part];\n    }\n    // validate that the current object is an object accessor\n    if (current && current.type && current.get) {\n        (current as IObjectAccessor).interpolation = interpolation;\n    }\n}\n\n/**\n * This will ad a new object accessor in the object model at the given key.\n * Note that this will NOT change the typescript types. To do that you will need to change the interface itself (extending it in the module that uses it)\n * @param key the key to add the object accessor at. For example /cameras/\\{\\}/perspective/aspectRatio\n * @param accessor the object accessor to add\n */\nexport function AddObjectAccessorToKey<GLTFTargetType = any, BabylonTargetType = any, BabylonValueType = any>(\n    key: string,\n    accessor: IObjectAccessor<GLTFTargetType, BabylonTargetType, BabylonValueType>\n): void {\n    // replace every `{}` in key with __array__ to match the object model\n    const keyParts = key.split(\"/\").map((part) => part.replace(/{}/g, \"__array__\"));\n    let current = objectModelMapping as any;\n    for (const part of keyParts) {\n        // make sure part is not empty\n        if (!part) {\n            continue;\n        }\n        if (!current[part]) {\n            if (part === \"?\") {\n                current.__ignoreObjectTree__ = true;\n                continue;\n            }\n            current[part] = {};\n            // if the part is __array__ then add the __target__ property\n            if (part === \"__array__\") {\n                current[part].__target__ = true;\n            }\n        }\n        current = current[part];\n    }\n    Object.assign(current, accessor);\n}\n","import { Animation } from \"core/Animations/animation\";\r\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { INode } from \"./glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { SetInterpolationForKey } from \"./Extensions/objectModelMapping\";\r\n\r\n/** @internal */\r\nexport type GetValueFn = (target: any, source: Float32Array, offset: number, scale: number) => any;\r\n\r\n/** @internal */\r\nexport function getVector3(_target: any, source: Float32Array, offset: number, scale: number): Vector3 {\r\n    return Vector3.FromArray(source, offset).scaleInPlace(scale);\r\n}\r\n\r\n/** @internal */\r\nexport function getQuaternion(_target: any, source: Float32Array, offset: number, scale: number): Quaternion {\r\n    return Quaternion.FromArray(source, offset).scaleInPlace(scale);\r\n}\r\n\r\n/** @internal */\r\nexport function getWeights(target: INode, source: Float32Array, offset: number, scale: number): Array<number> {\r\n    const value = new Array<number>(target._numMorphTargets!);\r\n    for (let i = 0; i < value.length; i++) {\r\n        value[i] = source[offset++] * scale;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/** @internal */\r\nexport abstract class AnimationPropertyInfo {\r\n    /** @internal */\r\n    public constructor(\r\n        public readonly type: number,\r\n        public readonly name: string,\r\n        public readonly getValue: GetValueFn,\r\n        public readonly getStride: (target: any) => number\r\n    ) {}\r\n\r\n    protected _buildAnimation(name: string, fps: number, keys: any[]): Animation {\r\n        const babylonAnimation = new Animation(name, this.name, fps, this.type);\r\n        babylonAnimation.setKeys(keys);\r\n        return babylonAnimation;\r\n    }\r\n\r\n    /** @internal */\r\n    public abstract buildAnimations(target: any, name: string, fps: number, keys: any[]): { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[];\r\n}\r\n\r\n/** @internal */\r\nexport class TransformNodeAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: INode, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        babylonAnimations.push({ babylonAnimatable: target._babylonTransformNode!, babylonAnimation: this._buildAnimation(name, fps, keys) });\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WeightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    public buildAnimations(target: INode, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        if (target._numMorphTargets) {\r\n            for (let targetIndex = 0; targetIndex < target._numMorphTargets; targetIndex++) {\r\n                const babylonAnimation = new Animation(`${name}_${targetIndex}`, this.name, fps, this.type);\r\n                babylonAnimation.setKeys(\r\n                    keys.map((key) => ({\r\n                        frame: key.frame,\r\n                        inTangent: key.inTangent ? key.inTangent[targetIndex] : undefined,\r\n                        value: key.value[targetIndex],\r\n                        outTangent: key.outTangent ? key.outTangent[targetIndex] : undefined,\r\n                        interpolation: key.interpolation,\r\n                    }))\r\n                );\r\n\r\n                if (target._primitiveBabylonMeshes) {\r\n                    for (const babylonMesh of target._primitiveBabylonMeshes) {\r\n                        if (babylonMesh.morphTargetManager) {\r\n                            const morphTarget = babylonMesh.morphTargetManager.getTarget(targetIndex);\r\n                            const babylonAnimationClone = babylonAnimation.clone();\r\n                            morphTarget.animations.push(babylonAnimationClone);\r\n                            babylonAnimations.push({ babylonAnimatable: morphTarget, babylonAnimation: babylonAnimationClone });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\nSetInterpolationForKey(\"/nodes/{}/translation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"position\", getVector3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/rotation\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_QUATERNION, \"rotationQuaternion\", getQuaternion, () => 4)]);\r\nSetInterpolationForKey(\"/nodes/{}/scale\", [new TransformNodeAnimationPropertyInfo(Animation.ANIMATIONTYPE_VECTOR3, \"scaling\", getVector3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/weights\", [new WeightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"influence\", getWeights, (target) => target._numMorphTargets!)]);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction validateAsync(\r\n    data: string | Uint8Array,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<Uint8Array>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: getExternalResource,\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return ArrayBuffer.isView(data) ? GLTFValidator.validateBytes(data, options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction workerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                validateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://cdn.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: `${Tools._DefaultCdnUrl}/gltf_validator.js`,\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | Uint8Array,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<Uint8Array>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${validateAsync}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value.buffer]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: Tools.GetBabylonScriptURL(this.Configuration.url) });\r\n\r\n                if (ArrayBuffer.isView(data)) {\r\n                    // Slice the data to avoid copying the whole array buffer.\r\n                    const slicedData = data.slice();\r\n                    worker.postMessage({ id: \"validate\", data: slicedData, rootUrl: rootUrl, fileName: fileName }, [slicedData.buffer]);\r\n                } else {\r\n                    worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n                }\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadBabylonScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return validateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginFactory, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene, IDisposable } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DataReader } from \"core/Misc/dataReader\";\r\nimport { GLTFValidation } from \"./glTFValidation\";\r\nimport { GLTFFileLoaderMetadata, GLTFMagicBase64Encoded } from \"./glTFFileLoader.metadata\";\r\nimport type { LoadFileError } from \"core/Misc/fileTools\";\r\nimport { DecodeBase64UrlToBinary } from \"core/Misc/fileTools\";\r\nimport { RuntimeError, ErrorCodes } from \"core/Misc/error\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\n\r\n/**\r\n * Defines options for glTF loader extensions. This interface is extended by specific extensions.\r\n */\r\nexport interface GLTFLoaderExtensionOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the glTF loader.\r\n         */\r\n        [GLTFFileLoaderMetadata.name]: Partial<GLTFLoaderOptions>;\r\n    }\r\n}\r\n\r\ninterface IFileRequestInfo extends IFileRequest {\r\n    _lengthComputable?: boolean;\r\n    _loaded?: number;\r\n    _total?: number;\r\n}\r\n\r\nfunction readAsync(arrayBuffer: ArrayBuffer, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        return Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\nfunction readViewAsync(arrayBufferView: ArrayBufferView, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        if (byteOffset < 0 || byteOffset >= arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Offset is out of range.\");\r\n        }\r\n\r\n        if (byteOffset + byteLength > arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Length is out of range.\");\r\n        }\r\n\r\n        return Promise.resolve(new Uint8Array(arrayBufferView.buffer, arrayBufferView.byteOffset + byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    json: Object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<IDataBuffer>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines the order of this extension.\r\n     * The loader sorts the extensions using these values when loading.\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    importMeshAsync: (\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ) => Promise<ISceneLoaderAsyncResult>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds default/implicit options to extension specific options.\r\n */\r\ntype DefaultExtensionOptions<BaseExtensionOptions> = {\r\n    /**\r\n     * Defines if the extension is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BaseExtensionOptions;\r\n\r\nabstract class GLTFLoaderOptions {\r\n    // eslint-disable-next-line babylonjs/available\r\n    protected copyFrom(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        if (options) {\r\n            this.onParsed = options.onParsed;\r\n            this.coordinateSystemMode = options.coordinateSystemMode ?? this.coordinateSystemMode;\r\n            this.animationStartMode = options.animationStartMode ?? this.animationStartMode;\r\n            this.loadNodeAnimations = options.loadNodeAnimations ?? this.loadNodeAnimations;\r\n            this.loadSkins = options.loadSkins ?? this.loadSkins;\r\n            this.loadMorphTargets = options.loadMorphTargets ?? this.loadMorphTargets;\r\n            this.compileMaterials = options.compileMaterials ?? this.compileMaterials;\r\n            this.useClipPlane = options.useClipPlane ?? this.useClipPlane;\r\n            this.compileShadowGenerators = options.compileShadowGenerators ?? this.compileShadowGenerators;\r\n            this.transparencyAsCoverage = options.transparencyAsCoverage ?? this.transparencyAsCoverage;\r\n            this.useRangeRequests = options.useRangeRequests ?? this.useRangeRequests;\r\n            this.createInstances = options.createInstances ?? this.createInstances;\r\n            this.alwaysComputeBoundingBox = options.alwaysComputeBoundingBox ?? this.alwaysComputeBoundingBox;\r\n            this.loadAllMaterials = options.loadAllMaterials ?? this.loadAllMaterials;\r\n            this.loadOnlyMaterials = options.loadOnlyMaterials ?? this.loadOnlyMaterials;\r\n            this.skipMaterials = options.skipMaterials ?? this.skipMaterials;\r\n            this.useSRGBBuffers = options.useSRGBBuffers ?? this.useSRGBBuffers;\r\n            this.targetFps = options.targetFps ?? this.targetFps;\r\n            this.alwaysComputeSkeletonRootNode = options.alwaysComputeSkeletonRootNode ?? this.alwaysComputeSkeletonRootNode;\r\n            this.useGltfTextureNames = options.useGltfTextureNames ?? this.useGltfTextureNames;\r\n            this.preprocessUrlAsync = options.preprocessUrlAsync ?? this.preprocessUrlAsync;\r\n            this.customRootNode = options.customRootNode;\r\n            this.onMeshLoaded = options.onMeshLoaded;\r\n            this.onSkinLoaded = options.onSkinLoaded;\r\n            this.onTextureLoaded = options.onTextureLoaded;\r\n            this.onMaterialLoaded = options.onMaterialLoaded;\r\n            this.onCameraLoaded = options.onCameraLoaded;\r\n            this.extensionOptions = options.extensionOptions ?? this.extensionOptions;\r\n        }\r\n    }\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public abstract onParsed?: ((loaderData: IGLTFLoaderData) => void) | undefined;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n     * The animation start mode. Defaults to FIRST.\r\n     */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should load node animations. Defaults to true.\r\n     * NOTE: The animation of this node will still load if the node is also a joint of a skin and `loadSkins` is true.\r\n     */\r\n    public loadNodeAnimations = true;\r\n\r\n    /**\r\n     * Defines if the loader should load skins. Defaults to true.\r\n     */\r\n    public loadSkins = true;\r\n\r\n    /**\r\n     * Defines if the loader should load morph targets. Defaults to true.\r\n     */\r\n    public loadMorphTargets = true;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Defines if the loader should use range requests when load binary glTF files from HTTP.\r\n     * Enabling will disable offline support and glTF validator.\r\n     * Defaults to false.\r\n     */\r\n    public useRangeRequests = false;\r\n\r\n    /**\r\n     * Defines if the loader should create instances when multiple glTF nodes point to the same glTF mesh. Defaults to true.\r\n     */\r\n    public createInstances = true;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the bounding boxes of meshes and not use the min/max values from the position accessor. Defaults to false.\r\n     */\r\n    public alwaysComputeBoundingBox = false;\r\n\r\n    /**\r\n     * If true, load all materials defined in the file, even if not used by any mesh. Defaults to false.\r\n     */\r\n    public loadAllMaterials = false;\r\n\r\n    /**\r\n     * If true, load only the materials defined in the file. Defaults to false.\r\n     */\r\n    public loadOnlyMaterials = false;\r\n\r\n    /**\r\n     * If true, do not load any materials defined in the file. Defaults to false.\r\n     */\r\n    public skipMaterials = false;\r\n\r\n    /**\r\n     * If true, load the color (gamma encoded) textures into sRGB buffers (if supported by the GPU), which will yield more accurate results when sampling the texture. Defaults to true.\r\n     */\r\n    public useSRGBBuffers = true;\r\n\r\n    /**\r\n     * When loading glTF animations, which are defined in seconds, target them to this FPS. Defaults to 60.\r\n     */\r\n    public targetFps = 60;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the nearest common ancestor of the skeleton joints instead of using `skin.skeleton`. Defaults to false.\r\n     * Set this to true if loading assets with invalid `skin.skeleton` values.\r\n     */\r\n    public alwaysComputeSkeletonRootNode = false;\r\n\r\n    /**\r\n     * If true, the loader will derive the name for Babylon textures from the glTF texture name, image name, or image url. Defaults to false.\r\n     * Note that it is possible for multiple Babylon textures to share the same name when the Babylon textures load from the same glTF texture or image.\r\n     */\r\n    public useGltfTextureNames = false;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     * @param url url referenced by the asset\r\n     * @returns Async url to load\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n\r\n    /**\r\n     * Defines the node to use as the root of the hierarchy when loading the scene (default: undefined). If not defined, a root node will be automatically created.\r\n     * You can also pass null if you don't want a root node to be created.\r\n     */\r\n    public customRootNode?: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public abstract onMeshLoaded?: ((mesh: AbstractMesh) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public abstract onSkinLoaded?: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public abstract onTextureLoaded?: ((texture: BaseTexture) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public abstract onMaterialLoaded?: ((material: Material) => void) | undefined;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public abstract onCameraLoaded?: ((camera: Camera) => void) | undefined;\r\n\r\n    /**\r\n     * Defines options for glTF extensions.\r\n     */\r\n    public extensionOptions: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each extension.\r\n        // 2. Creating a mapped type of all the options of all the extensions to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Extension in keyof GLTFLoaderExtensionOptions]?: {\r\n            [Option in keyof DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>]: DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>[Option];\r\n        };\r\n    } = {};\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader extends GLTFLoaderOptions implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @internal */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @internal */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /**\r\n     * Creates a new glTF file loader.\r\n     * @param options The options for the loader\r\n     */\r\n    public constructor(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        super();\r\n        this.copyFrom(options);\r\n    }\r\n\r\n    // --------------------\r\n    // Begin Common options\r\n    // --------------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: ((loaderData: IGLTFLoaderData) => void) | undefined) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onParsedObserver = this.onParsedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    // ------------------\r\n    // End Common options\r\n    // ------------------\r\n\r\n    // ----------------\r\n    // Begin V1 options\r\n    // ----------------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @internal\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @internal\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // --------------\r\n    // End V1 options\r\n    // --------------\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the observable is raised as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public set onMeshLoaded(callback: ((mesh: AbstractMesh) => void) | undefined) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     * @param node - the transform node that corresponds to the original glTF skin node used for animations\r\n     * @param skinnedNode - the transform node that is the skinned mesh itself or the parent of the skinned meshes\r\n     */\r\n    public readonly onSkinLoadedObservable = new Observable<{ node: TransformNode; skinnedNode: TransformNode }>();\r\n\r\n    private _onSkinLoadedObserver: Nullable<Observer<{ node: TransformNode; skinnedNode: TransformNode }>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public set onSkinLoaded(callback: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined) {\r\n        if (this._onSkinLoadedObserver) {\r\n            this.onSkinLoadedObservable.remove(this._onSkinLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onSkinLoadedObserver = this.onSkinLoadedObservable.add((data) => callback(data.node, data.skinnedNode));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: ((texture: BaseTexture) => void) | undefined) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: ((material: Material) => void) | undefined) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: ((camera: Camera) => void) | undefined) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        } else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        } else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n    private _state: Nullable<GLTFLoaderState> = null;\r\n    private _progressCallback?: (event: ISceneLoaderProgressEvent) => void;\r\n    private _requests = new Array<IFileRequestInfo>();\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public readonly name = GLTFFileLoaderMetadata.name;\r\n\r\n    /** @internal */\r\n    public readonly extensions = GLTFFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        for (const request of this._requests) {\r\n            request.abort();\r\n        }\r\n\r\n        this._requests.length = 0;\r\n\r\n        delete this._progressCallback;\r\n\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onSkinLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest> {\r\n        if (ArrayBuffer.isView(fileOrUrl)) {\r\n            this._loadBinary(scene, fileOrUrl as ArrayBufferView, rootUrl, onSuccess, onError, name);\r\n            return null;\r\n        }\r\n\r\n        this._progressCallback = onProgress;\r\n\r\n        const fileName = (fileOrUrl as File).name || Tools.GetFilename(fileOrUrl as string);\r\n\r\n        if (useArrayBuffer) {\r\n            if (this.useRangeRequests) {\r\n                if (this.validate) {\r\n                    Logger.Warn(\"glTF validation is not supported when range requests are enabled\");\r\n                }\r\n\r\n                const fileRequest: IFileRequest = {\r\n                    abort: () => {},\r\n                    onCompleteObservable: new Observable<IFileRequest>(),\r\n                };\r\n\r\n                const dataBuffer = {\r\n                    readAsync: (byteOffset: number, byteLength: number) => {\r\n                        return new Promise<ArrayBufferView>((resolve, reject) => {\r\n                            this._loadFile(\r\n                                scene,\r\n                                fileOrUrl as File | string,\r\n                                (data) => {\r\n                                    resolve(new Uint8Array(data as ArrayBuffer));\r\n                                },\r\n                                true,\r\n                                (error) => {\r\n                                    reject(error);\r\n                                },\r\n                                (webRequest) => {\r\n                                    webRequest.setRequestHeader(\"Range\", `bytes=${byteOffset}-${byteOffset + byteLength - 1}`);\r\n                                }\r\n                            );\r\n                        });\r\n                    },\r\n                    byteLength: 0,\r\n                };\r\n\r\n                this._unpackBinaryAsync(new DataReader(dataBuffer)).then(\r\n                    (loaderData) => {\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                        onSuccess(loaderData);\r\n                    },\r\n                    onError ? (error) => onError(undefined, error) : undefined\r\n                );\r\n\r\n                return fileRequest;\r\n            }\r\n\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl as File | string,\r\n                (data) => {\r\n                    this._validate(scene, new Uint8Array(data as ArrayBuffer, 0, (data as ArrayBuffer).byteLength), rootUrl, fileName);\r\n                    this._unpackBinaryAsync(\r\n                        new DataReader({\r\n                            readAsync: (byteOffset, byteLength) => readAsync(data as ArrayBuffer, byteOffset, byteLength),\r\n                            byteLength: (data as ArrayBuffer).byteLength,\r\n                        })\r\n                    ).then(\r\n                        (loaderData) => {\r\n                            onSuccess(loaderData);\r\n                        },\r\n                        onError ? (error) => onError(undefined, error) : undefined\r\n                    );\r\n                },\r\n                true,\r\n                onError\r\n            );\r\n        } else {\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    try {\r\n                        this._validate(scene, data as string, rootUrl, fileName);\r\n                        onSuccess({ json: this._parseJson(data as string) });\r\n                    } catch {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                },\r\n                false,\r\n                onError\r\n            );\r\n        }\r\n    }\r\n\r\n    private _loadBinary(\r\n        scene: Scene,\r\n        data: ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        fileName?: string\r\n    ): void {\r\n        this._validate(scene, new Uint8Array(data.buffer, data.byteOffset, data.byteLength), rootUrl, fileName);\r\n        this._unpackBinaryAsync(\r\n            new DataReader({\r\n                readAsync: (byteOffset, byteLength) => readViewAsync(data, byteOffset, byteLength),\r\n                byteLength: data.byteLength,\r\n            })\r\n        ).then(\r\n            (loaderData) => {\r\n                onSuccess(loaderData);\r\n            },\r\n            onError ? (error) => onError(undefined, error) : undefined\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.importMeshAsync(meshesNames, scene, null, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.loadAsync(scene, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAssetContainerAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<AssetContainer> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n\r\n            // Prepare the asset container.\r\n            const container = new AssetContainer(scene);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            const materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            const textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n            const cameras: Array<Camera> = [];\r\n            this.onCameraLoadedObservable.add((camera) => {\r\n                cameras.push(camera);\r\n            });\r\n\r\n            const morphTargetManagers: Array<MorphTargetManager> = [];\r\n            this.onMeshLoadedObservable.add((mesh) => {\r\n                if (mesh.morphTargetManager) {\r\n                    morphTargetManagers.push(mesh.morphTargetManager);\r\n                }\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, container, data, rootUrl, onProgress, fileName).then((result) => {\r\n                Array.prototype.push.apply(container.geometries, result.geometries);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                Array.prototype.push.apply(container.lights, result.lights);\r\n                Array.prototype.push.apply(container.transformNodes, result.transformNodes);\r\n                Array.prototype.push.apply(container.cameras, cameras);\r\n                Array.prototype.push.apply(container.morphTargetManagers, morphTargetManagers);\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public canDirectLoad(data: string): boolean {\r\n        return GLTFFileLoaderMetadata.canDirectLoad(data);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public directLoad(scene: Scene, data: string): Promise<Object> {\r\n        if (\r\n            data.startsWith(\"base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\";base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        ) {\r\n            const arrayBuffer = DecodeBase64UrlToBinary(data);\r\n\r\n            this._validate(scene, new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength));\r\n            return this._unpackBinaryAsync(\r\n                new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => readAsync(arrayBuffer, byteOffset, byteLength),\r\n                    byteLength: arrayBuffer.byteLength,\r\n                })\r\n            );\r\n        }\r\n\r\n        this._validate(scene, data);\r\n        return Promise.resolve({ json: this._parseJson(data) });\r\n    }\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    public rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n\r\n    /** @internal */\r\n    public createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader(options[GLTFFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader state changes.\r\n     */\r\n    public onLoaderStateChangedObservable = new Observable<Nullable<GLTFLoaderState>>();\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setState(state: GLTFLoaderState): void {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n\r\n        this._state = state;\r\n        this.onLoaderStateChangedObservable.notifyObservers(this._state);\r\n        this._log(GLTFLoaderState[this._state]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = scene._loadFile(\r\n            fileOrUrl,\r\n            onSuccess,\r\n            (event) => {\r\n                this._onProgress(event, request);\r\n            },\r\n            true,\r\n            useArrayBuffer,\r\n            onError,\r\n            onOpened\r\n        ) as IFileRequestInfo;\r\n        request.onCompleteObservable.add(() => {\r\n            // Force the length computable to be true since we can guarantee the data is loaded.\r\n            request._lengthComputable = true;\r\n            request._total = request._loaded;\r\n        });\r\n        this._requests.push(request);\r\n        return request;\r\n    }\r\n\r\n    private _onProgress(event: ProgressEvent, request: IFileRequestInfo): void {\r\n        if (!this._progressCallback) {\r\n            return;\r\n        }\r\n\r\n        request._lengthComputable = event.lengthComputable;\r\n        request._loaded = event.loaded;\r\n        request._total = event.total;\r\n\r\n        let lengthComputable = true;\r\n        let loaded = 0;\r\n        let total = 0;\r\n        for (const request of this._requests) {\r\n            if (request._lengthComputable === undefined || request._loaded === undefined || request._total === undefined) {\r\n                return;\r\n            }\r\n\r\n            lengthComputable = lengthComputable && request._lengthComputable;\r\n            loaded += request._loaded;\r\n            total += request._total;\r\n        }\r\n\r\n        this._progressCallback({\r\n            lengthComputable: lengthComputable,\r\n            loaded: loaded,\r\n            total: lengthComputable ? total : 0,\r\n        });\r\n    }\r\n\r\n    private _validate(scene: Scene, data: string | Uint8Array, rootUrl = \"\", fileName = \"\"): void {\r\n        if (!this.validate) {\r\n            return;\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n        GLTFValidation.ValidateAsync(data, rootUrl, fileName, (uri) => {\r\n            return this.preprocessUrlAsync(rootUrl + uri).then((url) => {\r\n                return scene._loadFileAsync(url, undefined, true, true).then((data) => {\r\n                    return new Uint8Array(data, 0, data.byteLength);\r\n                });\r\n            });\r\n        }).then(\r\n            (result) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                this.onValidatedObservable.notifyObservers(result);\r\n                this.onValidatedObservable.clear();\r\n            },\r\n            (reason) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                Tools.Warn(`Failed to validate: ${reason.message}`);\r\n                this.onValidatedObservable.clear();\r\n            }\r\n        );\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader,\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _parseJson(json: string): Object {\r\n        this._startPerformanceCounter(\"Parse JSON\");\r\n        this._log(`JSON length: ${json.length}`);\r\n        const parsed = JSON.parse(json);\r\n        this._endPerformanceCounter(\"Parse JSON\");\r\n        return parsed;\r\n    }\r\n\r\n    private _unpackBinaryAsync(dataReader: DataReader): Promise<IGLTFLoaderData> {\r\n        this._startPerformanceCounter(\"Unpack Binary\");\r\n\r\n        // Read magic + version + length + json length + json format\r\n        return dataReader.loadAsync(20).then(() => {\r\n            const Binary = {\r\n                Magic: 0x46546c67,\r\n            };\r\n\r\n            const magic = dataReader.readUint32();\r\n            if (magic !== Binary.Magic) {\r\n                throw new RuntimeError(\"Unexpected magic: \" + magic, ErrorCodes.GLTFLoaderUnexpectedMagicError);\r\n            }\r\n\r\n            const version = dataReader.readUint32();\r\n\r\n            if (this.loggingEnabled) {\r\n                this._log(`Binary version: ${version}`);\r\n            }\r\n\r\n            const length = dataReader.readUint32();\r\n            if (!this.useRangeRequests && length !== dataReader.buffer.byteLength) {\r\n                Logger.Warn(`Length in header does not match actual data length: ${length} != ${dataReader.buffer.byteLength}`);\r\n            }\r\n\r\n            let unpacked: Promise<IGLTFLoaderData>;\r\n            switch (version) {\r\n                case 1: {\r\n                    unpacked = this._unpackBinaryV1Async(dataReader, length);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    unpacked = this._unpackBinaryV2Async(dataReader, length);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unsupported version: \" + version);\r\n                }\r\n            }\r\n\r\n            this._endPerformanceCounter(\"Unpack Binary\");\r\n\r\n            return unpacked;\r\n        });\r\n    }\r\n\r\n    private _unpackBinaryV1Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ContentFormat = {\r\n            JSON: 0,\r\n        };\r\n\r\n        const contentLength = dataReader.readUint32();\r\n        const contentFormat = dataReader.readUint32();\r\n\r\n        if (contentFormat !== ContentFormat.JSON) {\r\n            throw new Error(`Unexpected content format: ${contentFormat}`);\r\n        }\r\n\r\n        const bodyLength = length - dataReader.byteOffset;\r\n\r\n        const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(contentLength)), bin: null };\r\n        if (bodyLength !== 0) {\r\n            const startByteOffset = dataReader.byteOffset;\r\n            data.bin = {\r\n                readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                byteLength: bodyLength,\r\n            };\r\n        }\r\n\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    private _unpackBinaryV2Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ChunkFormat = {\r\n            JSON: 0x4e4f534a,\r\n            BIN: 0x004e4942,\r\n        };\r\n\r\n        // Read the JSON chunk header.\r\n        const chunkLength = dataReader.readUint32();\r\n        const chunkFormat = dataReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n\r\n        // Bail if there are no other chunks.\r\n        if (dataReader.byteOffset + chunkLength === length) {\r\n            return dataReader.loadAsync(chunkLength).then(() => {\r\n                return { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n            });\r\n        }\r\n\r\n        // Read the JSON chunk and the length and type of the next chunk.\r\n        return dataReader.loadAsync(chunkLength + 8).then(() => {\r\n            const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n\r\n            const readAsync = (): Promise<IGLTFLoaderData> => {\r\n                const chunkLength = dataReader.readUint32();\r\n                const chunkFormat = dataReader.readUint32();\r\n\r\n                switch (chunkFormat) {\r\n                    case ChunkFormat.JSON: {\r\n                        throw new Error(\"Unexpected JSON chunk\");\r\n                    }\r\n                    case ChunkFormat.BIN: {\r\n                        const startByteOffset = dataReader.byteOffset;\r\n                        data.bin = {\r\n                            readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                            byteLength: chunkLength,\r\n                        };\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        // ignore unrecognized chunkFormat\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (dataReader.byteOffset !== length) {\r\n                    return dataReader.loadAsync(8).then(readAsync);\r\n                }\r\n\r\n                return Promise.resolve(data);\r\n            };\r\n\r\n            return readAsync();\r\n        });\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number; minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0,\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2]),\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number; minor: number }, b: { major: number; minor: number }): number {\r\n        if (a.major > b.major) {\r\n            return 1;\r\n        }\r\n        if (a.major < b.major) {\r\n            return -1;\r\n        }\r\n        if (a.minor > b.minor) {\r\n            return 1;\r\n        }\r\n        if (a.minor < b.minor) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @internal */\r\n    public _log = this._logDisabled;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @internal */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substring(0, this._logIndentLevel * 2);\r\n        Logger.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {}\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @internal */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @internal */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {}\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {}\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new GLTFFileLoader());\r\n","// eslint-disable-next-line import/no-internal-modules\r\nimport type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const GLTFMagicBase64Encoded = \"Z2xURg\"; // \"glTF\" base64 encoded (without the quotes!)\r\n\r\nexport const GLTFFileLoaderMetadata = {\r\n    name: \"gltf\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".gltf\": { isBinary: false, mimeType: \"model/gltf+json\" },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".glb\": { isBinary: true, mimeType: \"model/gltf-binary\" },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n\r\n    canDirectLoad(data: string): boolean {\r\n        return (\r\n            (data.indexOf(\"asset\") !== -1 && data.indexOf(\"version\") !== -1) ||\r\n            data.startsWith(\"data:base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\"data:;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        );\r\n    },\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n","import type { AssetContainer } from \"core/assetContainer\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Enums\r\n * @internal\r\n */\r\nexport enum EComponentType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    FLOAT = 5126,\r\n}\r\n\r\n/** @internal */\r\nexport enum EShaderType {\r\n    FRAGMENT = 35632,\r\n    VERTEX = 35633,\r\n}\r\n\r\n/** @internal */\r\nexport enum EParameterType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    INT = 5124,\r\n    UNSIGNED_INT = 5125,\r\n    FLOAT = 5126,\r\n    FLOAT_VEC2 = 35664,\r\n    FLOAT_VEC3 = 35665,\r\n    FLOAT_VEC4 = 35666,\r\n    INT_VEC2 = 35667,\r\n    INT_VEC3 = 35668,\r\n    INT_VEC4 = 35669,\r\n    BOOL = 35670,\r\n    BOOL_VEC2 = 35671,\r\n    BOOL_VEC3 = 35672,\r\n    BOOL_VEC4 = 35673,\r\n    FLOAT_MAT2 = 35674,\r\n    FLOAT_MAT3 = 35675,\r\n    FLOAT_MAT4 = 35676,\r\n    SAMPLER_2D = 35678,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureWrapMode {\r\n    CLAMP_TO_EDGE = 33071,\r\n    MIRRORED_REPEAT = 33648,\r\n    REPEAT = 10497,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFilterType {\r\n    NEAREST = 9728,\r\n    LINEAR = 9728,\r\n    NEAREST_MIPMAP_NEAREST = 9984,\r\n    LINEAR_MIPMAP_NEAREST = 9985,\r\n    NEAREST_MIPMAP_LINEAR = 9986,\r\n    LINEAR_MIPMAP_LINEAR = 9987,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFormat {\r\n    ALPHA = 6406,\r\n    RGB = 6407,\r\n    RGBA = 6408,\r\n    LUMINANCE = 6409,\r\n    LUMINANCE_ALPHA = 6410,\r\n}\r\n\r\n/** @internal */\r\nexport enum ECullingType {\r\n    FRONT = 1028,\r\n    BACK = 1029,\r\n    FRONT_AND_BACK = 1032,\r\n}\r\n\r\n/** @internal */\r\nexport enum EBlendingFunction {\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 768,\r\n    ONE_MINUS_SRC_COLOR = 769,\r\n    DST_COLOR = 774,\r\n    ONE_MINUS_DST_COLOR = 775,\r\n    SRC_ALPHA = 770,\r\n    ONE_MINUS_SRC_ALPHA = 771,\r\n    DST_ALPHA = 772,\r\n    ONE_MINUS_DST_ALPHA = 773,\r\n    CONSTANT_COLOR = 32769,\r\n    ONE_MINUS_CONSTANT_COLOR = 32770,\r\n    CONSTANT_ALPHA = 32771,\r\n    ONE_MINUS_CONSTANT_ALPHA = 32772,\r\n    SRC_ALPHA_SATURATE = 776,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProperty {\r\n    extensions?: { [key: string]: any };\r\n    extras?: Object;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFChildRootProperty extends IGLTFProperty {\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAccessor extends IGLTFChildRootProperty {\r\n    bufferView: string;\r\n    byteOffset: number;\r\n    byteStride: number;\r\n    count: number;\r\n    type: string;\r\n    componentType: EComponentType;\r\n\r\n    max?: number[];\r\n    min?: number[];\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBufferView extends IGLTFChildRootProperty {\r\n    buffer: string;\r\n    byteOffset: number;\r\n    byteLength: number;\r\n    byteStride: number;\r\n\r\n    target?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBuffer extends IGLTFChildRootProperty {\r\n    uri: string;\r\n\r\n    byteLength?: number;\r\n    type?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFShader extends IGLTFChildRootProperty {\r\n    uri: string;\r\n    type: EShaderType;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProgram extends IGLTFChildRootProperty {\r\n    attributes: string[];\r\n    fragmentShader: string;\r\n    vertexShader: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueParameter {\r\n    type: number;\r\n\r\n    count?: number;\r\n    semantic?: string;\r\n    node?: string;\r\n    value?: number | boolean | string | Array<any>;\r\n    source?: string;\r\n\r\n    babylonValue?: any;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueCommonProfile {\r\n    lightingModel: string;\r\n    texcoordBindings: Object;\r\n\r\n    parameters?: Array<any>;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStatesFunctions {\r\n    blendColor?: number[];\r\n    blendEquationSeparate?: number[];\r\n    blendFuncSeparate?: number[];\r\n    colorMask: boolean[];\r\n    cullFace: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStates {\r\n    enable: number[];\r\n    functions: IGLTFTechniqueStatesFunctions;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechnique extends IGLTFChildRootProperty {\r\n    parameters: { [key: string]: IGLTFTechniqueParameter };\r\n    program: string;\r\n\r\n    attributes: { [key: string]: string };\r\n    uniforms: { [key: string]: string };\r\n    states: IGLTFTechniqueStates;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMaterial extends IGLTFChildRootProperty {\r\n    technique?: string;\r\n    values: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMeshPrimitive extends IGLTFProperty {\r\n    attributes: { [key: string]: string };\r\n    indices: string;\r\n    material: string;\r\n\r\n    mode?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMesh extends IGLTFChildRootProperty {\r\n    primitives: IGLTFMeshPrimitive[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFImage extends IGLTFChildRootProperty {\r\n    uri: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSampler extends IGLTFChildRootProperty {\r\n    magFilter?: number;\r\n    minFilter?: number;\r\n    wrapS?: number;\r\n    wrapT?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTexture extends IGLTFChildRootProperty {\r\n    sampler: string;\r\n    source: string;\r\n\r\n    format?: ETextureFormat;\r\n    internalFormat?: ETextureFormat;\r\n    target?: number;\r\n    type?: number;\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonTexture?: Texture;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAmbienLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFDirectionalLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFPointLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSpotLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    fallOfAngle?: number;\r\n    fallOffExponent?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLight extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraOrthographic {\r\n    xmag: number;\r\n    ymag: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraPerspective {\r\n    aspectRatio: number;\r\n    yfov: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCamera extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannelTarget {\r\n    id: string;\r\n    path: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannel {\r\n    sampler: string;\r\n    target: IGLTFAnimationChannelTarget;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationSampler {\r\n    input: string;\r\n    output: string;\r\n\r\n    interpolation?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimation extends IGLTFChildRootProperty {\r\n    channels?: IGLTFAnimationChannel[];\r\n    parameters?: { [key: string]: string };\r\n    samplers?: { [key: string]: IGLTFAnimationSampler };\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNodeInstanceSkin {\r\n    skeletons: string[];\r\n    skin: string;\r\n    meshes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSkins extends IGLTFChildRootProperty {\r\n    bindShapeMatrix: number[];\r\n    inverseBindMatrices: string;\r\n    jointNames: string[];\r\n\r\n    babylonSkeleton?: Skeleton;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNode extends IGLTFChildRootProperty {\r\n    camera?: string;\r\n    children: string[];\r\n    skin?: string;\r\n    jointName?: string;\r\n    light?: string;\r\n    matrix: number[];\r\n    mesh?: string;\r\n    meshes?: string[];\r\n    rotation?: number[];\r\n    scale?: number[];\r\n    translation?: number[];\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonNode?: Node;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFScene extends IGLTFChildRootProperty {\r\n    nodes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFRuntime {\r\n    extensions: { [key: string]: any };\r\n    accessors: { [key: string]: IGLTFAccessor };\r\n    buffers: { [key: string]: IGLTFBuffer };\r\n    bufferViews: { [key: string]: IGLTFBufferView };\r\n    meshes: { [key: string]: IGLTFMesh };\r\n    lights: { [key: string]: IGLTFLight };\r\n    cameras: { [key: string]: IGLTFCamera };\r\n    nodes: { [key: string]: IGLTFNode };\r\n    images: { [key: string]: IGLTFImage };\r\n    textures: { [key: string]: IGLTFTexture };\r\n    shaders: { [key: string]: IGLTFShader };\r\n    programs: { [key: string]: IGLTFProgram };\r\n    samplers: { [key: string]: IGLTFSampler };\r\n    techniques: { [key: string]: IGLTFTechnique };\r\n    materials: { [key: string]: IGLTFMaterial };\r\n    animations: { [key: string]: IGLTFAnimation };\r\n    skins: { [key: string]: IGLTFSkins };\r\n\r\n    currentScene?: Object;\r\n    scenes: { [key: string]: IGLTFScene }; // v1.1\r\n\r\n    extensionsUsed: string[];\r\n    extensionsRequired?: string[]; // v1.1\r\n\r\n    buffersCount: number;\r\n    shaderscount: number;\r\n\r\n    scene: Scene;\r\n    rootUrl: string;\r\n\r\n    loadedBufferCount: number;\r\n    loadedBufferViews: { [name: string]: ArrayBufferView };\r\n\r\n    loadedShaderCount: number;\r\n\r\n    importOnlyMeshes: boolean;\r\n    importMeshesNames?: string[];\r\n\r\n    dummyNodes: Node[];\r\n\r\n    assetContainer: Nullable<AssetContainer>;\r\n}\r\n\r\n/** @internal */\r\nexport interface INodeToRoot {\r\n    bone: Bone;\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IJointNode {\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n","import type { IGLTFTechniqueParameter, IGLTFAccessor, IGLTFRuntime, IGLTFBufferView } from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureWrapMode, ETextureFilterType, EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector2, Vector3, Vector4, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * Utils functions for GLTF\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFUtils {\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param scene the Scene object\r\n     * @param source the source node where to pick the matrix\r\n     * @param parameter the GLTF technique parameter\r\n     * @param uniformName the name of the shader's uniform\r\n     * @param shaderMaterial the shader material\r\n     */\r\n    public static SetMatrix(scene: Scene, source: Node, parameter: IGLTFTechniqueParameter, uniformName: string, shaderMaterial: ShaderMaterial | Effect): void {\r\n        let mat: Nullable<Matrix> = null;\r\n\r\n        if (parameter.semantic === \"MODEL\") {\r\n            mat = source.getWorldMatrix();\r\n        } else if (parameter.semantic === \"PROJECTION\") {\r\n            mat = scene.getProjectionMatrix();\r\n        } else if (parameter.semantic === \"VIEW\") {\r\n            mat = scene.getViewMatrix();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().multiply(scene.getViewMatrix()).invert());\r\n        } else if (parameter.semantic === \"MODELVIEW\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix());\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTION\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix());\r\n        } else if (parameter.semantic === \"MODELINVERSE\") {\r\n            mat = source.getWorldMatrix().invert();\r\n        } else if (parameter.semantic === \"VIEWINVERSE\") {\r\n            mat = scene.getViewMatrix().invert();\r\n        } else if (parameter.semantic === \"PROJECTIONINVERSE\") {\r\n            mat = scene.getProjectionMatrix().invert();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTIONINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().invert());\r\n        }\r\n\r\n        if (mat) {\r\n            switch (parameter.type) {\r\n                case EParameterType.FLOAT_MAT2:\r\n                    shaderMaterial.setMatrix2x2(uniformName, Matrix.GetAsMatrix2x2(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT3:\r\n                    shaderMaterial.setMatrix3x3(uniformName, Matrix.GetAsMatrix3x3(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT4:\r\n                    shaderMaterial.setMatrix(uniformName, mat);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param shaderMaterial the shader material\r\n     * @param uniform the name of the shader's uniform\r\n     * @param value the value of the uniform\r\n     * @param type the uniform's type (EParameterType FLOAT, VEC2, VEC3 or VEC4)\r\n     * @returns true if set, else false\r\n     */\r\n    public static SetUniform(shaderMaterial: ShaderMaterial | Effect, uniform: string, value: any, type: number): boolean {\r\n        switch (type) {\r\n            case EParameterType.FLOAT:\r\n                shaderMaterial.setFloat(uniform, value);\r\n                return true;\r\n            case EParameterType.FLOAT_VEC2:\r\n                shaderMaterial.setVector2(uniform, Vector2.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC3:\r\n                shaderMaterial.setVector3(uniform, Vector3.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC4:\r\n                shaderMaterial.setVector4(uniform, Vector4.FromArray(value));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the wrap mode of the texture\r\n     * @param mode the mode value\r\n     * @returns the wrap mode (TEXTURE_WRAP_ADDRESSMODE, MIRROR_ADDRESSMODE or CLAMP_ADDRESSMODE)\r\n     */\r\n    public static GetWrapMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case ETextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case ETextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the byte stride giving an accessor\r\n     * @param accessor the GLTF accessor objet\r\n     * @returns the byte stride\r\n     */\r\n    public static GetByteStrideFromType(accessor: IGLTFAccessor): number {\r\n        // Needs this function since \"byteStride\" isn't requiered in glTF format\r\n        const type = accessor.type;\r\n\r\n        switch (type) {\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n            default:\r\n                return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture filter mode giving a mode value\r\n     * @param mode the filter mode value\r\n     * @returns the filter mode (TODO - needs to be a type?)\r\n     */\r\n    public static GetTextureFilterMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureFilterType.LINEAR:\r\n            case ETextureFilterType.LINEAR_MIPMAP_NEAREST:\r\n            case ETextureFilterType.LINEAR_MIPMAP_LINEAR:\r\n                return Texture.TRILINEAR_SAMPLINGMODE;\r\n            case ETextureFilterType.NEAREST:\r\n            case ETextureFilterType.NEAREST_MIPMAP_NEAREST:\r\n                return Texture.NEAREST_SAMPLINGMODE;\r\n            default:\r\n                return Texture.BILINEAR_SAMPLINGMODE;\r\n        }\r\n    }\r\n\r\n    public static GetBufferFromBufferView(\r\n        gltfRuntime: IGLTFRuntime,\r\n        bufferView: IGLTFBufferView,\r\n        byteOffset: number,\r\n        byteLength: number,\r\n        componentType: EComponentType\r\n    ): ArrayBufferView {\r\n        byteOffset = bufferView.byteOffset + byteOffset;\r\n\r\n        const loadedBufferView = gltfRuntime.loadedBufferViews[bufferView.buffer];\r\n        if (byteOffset + byteLength > loadedBufferView.byteLength) {\r\n            throw new Error(\"Buffer access is out of range\");\r\n        }\r\n\r\n        const buffer = loadedBufferView.buffer;\r\n        byteOffset += loadedBufferView.byteOffset;\r\n\r\n        switch (componentType) {\r\n            case EComponentType.BYTE:\r\n                return new Int8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_BYTE:\r\n                return new Uint8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.SHORT:\r\n                return new Int16Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_SHORT:\r\n                return new Uint16Array(buffer, byteOffset, byteLength);\r\n            default:\r\n                return new Float32Array(buffer, byteOffset, byteLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a buffer from its accessor\r\n     * @param gltfRuntime the GLTF runtime\r\n     * @param accessor the GLTF accessor\r\n     * @returns an array buffer view\r\n     */\r\n    public static GetBufferFromAccessor(gltfRuntime: IGLTFRuntime, accessor: IGLTFAccessor): any {\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[accessor.bufferView];\r\n        const byteLength = accessor.count * GLTFUtils.GetByteStrideFromType(accessor);\r\n        return GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, accessor.byteOffset, byteLength, accessor.componentType);\r\n    }\r\n\r\n    /**\r\n     * Decodes a buffer view into a string\r\n     * @param view the buffer view\r\n     * @returns a string\r\n     */\r\n    public static DecodeBufferToText(view: ArrayBufferView): string {\r\n        let result = \"\";\r\n        const length = view.byteLength;\r\n\r\n        for (let i = 0; i < length; ++i) {\r\n            result += String.fromCharCode((<any>view)[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the default material of gltf. Related to\r\n     * https://github.com/KhronosGroup/glTF/tree/master/specification/1.0#appendix-a-default-material\r\n     * @param scene the Babylon.js scene\r\n     * @returns the default Babylon material\r\n     */\r\n    public static GetDefaultMaterial(scene: Scene): ShaderMaterial {\r\n        if (!GLTFUtils._DefaultMaterial) {\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialVertexShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform mat4 worldView;\",\r\n                \"uniform mat4 projection;\",\r\n                \"\",\r\n                \"attribute vec3 position;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_Position = projection * worldView * vec4(position, 1.0);\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialPixelShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform vec4 u_emission;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_FragColor = u_emission;\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            const shaderPath = {\r\n                vertex: \"GLTFDefaultMaterial\",\r\n                fragment: \"GLTFDefaultMaterial\",\r\n            };\r\n\r\n            const options = {\r\n                attributes: [\"position\"],\r\n                uniforms: [\"worldView\", \"projection\", \"u_emission\"],\r\n                samplers: new Array<string>(),\r\n                needAlphaBlending: false,\r\n            };\r\n\r\n            GLTFUtils._DefaultMaterial = new ShaderMaterial(\"GLTFDefaultMaterial\", scene, shaderPath, options);\r\n            GLTFUtils._DefaultMaterial.setColor4(\"u_emission\", new Color4(0.5, 0.5, 0.5, 1.0));\r\n        }\r\n\r\n        return GLTFUtils._DefaultMaterial;\r\n    }\r\n\r\n    // The GLTF default material\r\n    private static _DefaultMaterial: Nullable<ShaderMaterial> = null;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type {\r\n    IGLTFRuntime,\r\n    IGLTFTechniqueParameter,\r\n    IGLTFAnimation,\r\n    IGLTFAnimationSampler,\r\n    IGLTFNode,\r\n    IGLTFSkins,\r\n    INodeToRoot,\r\n    IJointNode,\r\n    IGLTFMesh,\r\n    IGLTFAccessor,\r\n    IGLTFLight,\r\n    IGLTFAmbienLight,\r\n    IGLTFDirectionalLight,\r\n    IGLTFPointLight,\r\n    IGLTFSpotLight,\r\n    IGLTFCamera,\r\n    IGLTFCameraPerspective,\r\n    IGLTFScene,\r\n    IGLTFTechnique,\r\n    IGLTFMaterial,\r\n    IGLTFProgram,\r\n    IGLTFBuffer,\r\n    IGLTFTexture,\r\n    IGLTFImage,\r\n    IGLTFSampler,\r\n    IGLTFShader,\r\n    IGLTFTechniqueStates,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureFilterType, ECullingType, EBlendingFunction, EShaderType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport { Quaternion, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { SubMesh } from \"core/Meshes/subMesh\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader } from \"../glTFFileLoader\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n\r\n/**\r\n * Tokenizer. Used for shaders compatibility\r\n * Automatically map world, view, projection, worldViewProjection, attributes and so on\r\n */\r\nenum ETokenType {\r\n    IDENTIFIER = 1,\r\n\r\n    UNKNOWN = 2,\r\n    END_OF_INPUT = 3,\r\n}\r\n\r\nclass Tokenizer {\r\n    private _toParse: string;\r\n    private _pos: number = 0;\r\n    private _maxPos: number;\r\n\r\n    public currentToken: ETokenType = ETokenType.UNKNOWN;\r\n    public currentIdentifier: string = \"\";\r\n    public currentString: string = \"\";\r\n    public isLetterOrDigitPattern: RegExp = /^[a-zA-Z0-9]+$/;\r\n\r\n    constructor(toParse: string) {\r\n        this._toParse = toParse;\r\n        this._maxPos = toParse.length;\r\n    }\r\n\r\n    public getNextToken(): ETokenType {\r\n        if (this.isEnd()) {\r\n            return ETokenType.END_OF_INPUT;\r\n        }\r\n\r\n        this.currentString = this.read();\r\n        this.currentToken = ETokenType.UNKNOWN;\r\n\r\n        if (this.currentString === \"_\" || this.isLetterOrDigitPattern.test(this.currentString)) {\r\n            this.currentToken = ETokenType.IDENTIFIER;\r\n            this.currentIdentifier = this.currentString;\r\n            while (!this.isEnd() && (this.isLetterOrDigitPattern.test((this.currentString = this.peek())) || this.currentString === \"_\")) {\r\n                this.currentIdentifier += this.currentString;\r\n                this.forward();\r\n            }\r\n        }\r\n\r\n        return this.currentToken;\r\n    }\r\n\r\n    public peek(): string {\r\n        return this._toParse[this._pos];\r\n    }\r\n\r\n    public read(): string {\r\n        return this._toParse[this._pos++];\r\n    }\r\n\r\n    public forward(): void {\r\n        this._pos++;\r\n    }\r\n\r\n    public isEnd(): boolean {\r\n        return this._pos >= this._maxPos;\r\n    }\r\n}\r\n\r\n/**\r\n * Values\r\n */\r\nconst glTFTransforms = [\"MODEL\", \"VIEW\", \"PROJECTION\", \"MODELVIEW\", \"MODELVIEWPROJECTION\", \"JOINTMATRIX\"];\r\nconst babylonTransforms = [\"world\", \"view\", \"projection\", \"worldView\", \"worldViewProjection\", \"mBones\"];\r\n\r\nconst glTFAnimationPaths = [\"translation\", \"rotation\", \"scale\"];\r\nconst babylonAnimationPaths = [\"position\", \"rotationQuaternion\", \"scaling\"];\r\n\r\n/**\r\n * Parse\r\n * @param parsedBuffers\r\n * @param gltfRuntime\r\n */\r\nconst parseBuffers = (parsedBuffers: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const buf in parsedBuffers) {\r\n        const parsedBuffer = parsedBuffers[buf];\r\n        gltfRuntime.buffers[buf] = parsedBuffer;\r\n        gltfRuntime.buffersCount++;\r\n    }\r\n};\r\n\r\nconst parseShaders = (parsedShaders: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const sha in parsedShaders) {\r\n        const parsedShader = parsedShaders[sha];\r\n        gltfRuntime.shaders[sha] = parsedShader;\r\n        gltfRuntime.shaderscount++;\r\n    }\r\n};\r\n\r\nconst parseObject = (parsedObjects: any, runtimeProperty: string, gltfRuntime: IGLTFRuntime) => {\r\n    for (const object in parsedObjects) {\r\n        const parsedObject = parsedObjects[object];\r\n        (<any>gltfRuntime)[runtimeProperty][object] = parsedObject;\r\n    }\r\n};\r\n\r\n/**\r\n * Utils\r\n * @param buffer\r\n */\r\nconst normalizeUVs = (buffer: any) => {\r\n    if (!buffer) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < buffer.length / 2; i++) {\r\n        buffer[i * 2 + 1] = 1.0 - buffer[i * 2 + 1];\r\n    }\r\n};\r\n\r\nconst getAttribute = (attributeParameter: IGLTFTechniqueParameter): Nullable<string> => {\r\n    if (attributeParameter.semantic === \"NORMAL\") {\r\n        return \"normal\";\r\n    } else if (attributeParameter.semantic === \"POSITION\") {\r\n        return \"position\";\r\n    } else if (attributeParameter.semantic === \"JOINT\") {\r\n        return \"matricesIndices\";\r\n    } else if (attributeParameter.semantic === \"WEIGHT\") {\r\n        return \"matricesWeights\";\r\n    } else if (attributeParameter.semantic === \"COLOR\") {\r\n        return \"color\";\r\n    } else if (attributeParameter.semantic && attributeParameter.semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n        const channel = Number(attributeParameter.semantic.split(\"_\")[1]);\r\n        return \"uv\" + (channel === 0 ? \"\" : channel + 1);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Loads and creates animations\r\n * @param gltfRuntime\r\n */\r\nconst loadAnimations = (gltfRuntime: IGLTFRuntime) => {\r\n    for (const anim in gltfRuntime.animations) {\r\n        const animation: IGLTFAnimation = gltfRuntime.animations[anim];\r\n\r\n        if (!animation.channels || !animation.samplers) {\r\n            continue;\r\n        }\r\n\r\n        let lastAnimation: Nullable<Animation> = null;\r\n\r\n        for (let i = 0; i < animation.channels.length; i++) {\r\n            // Get parameters and load buffers\r\n            const channel = animation.channels[i];\r\n            const sampler: IGLTFAnimationSampler = animation.samplers[channel.sampler];\r\n\r\n            if (!sampler) {\r\n                continue;\r\n            }\r\n\r\n            let inputData: Nullable<string> = null;\r\n            let outputData: Nullable<string> = null;\r\n\r\n            if (animation.parameters) {\r\n                inputData = animation.parameters[sampler.input];\r\n                outputData = animation.parameters[sampler.output];\r\n            } else {\r\n                inputData = sampler.input;\r\n                outputData = sampler.output;\r\n            }\r\n\r\n            const bufferInput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[inputData]);\r\n            const bufferOutput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[outputData]);\r\n\r\n            const targetId = channel.target.id;\r\n            let targetNode: any = gltfRuntime.scene.getNodeById(targetId);\r\n\r\n            if (targetNode === null) {\r\n                targetNode = gltfRuntime.scene.getNodeByName(targetId);\r\n            }\r\n\r\n            if (targetNode === null) {\r\n                Tools.Warn(\"Creating animation named \" + anim + \". But cannot find node named \" + targetId + \" to attach to\");\r\n                continue;\r\n            }\r\n\r\n            const isBone = targetNode instanceof Bone;\r\n\r\n            // Get target path (position, rotation or scaling)\r\n            let targetPath = channel.target.path;\r\n            const targetPathIndex = glTFAnimationPaths.indexOf(targetPath);\r\n\r\n            if (targetPathIndex !== -1) {\r\n                targetPath = babylonAnimationPaths[targetPathIndex];\r\n            }\r\n\r\n            // Determine animation type\r\n            let animationType = Animation.ANIMATIONTYPE_MATRIX;\r\n\r\n            if (!isBone) {\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    animationType = Animation.ANIMATIONTYPE_QUATERNION;\r\n                    targetNode.rotationQuaternion = new Quaternion();\r\n                } else {\r\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\r\n                }\r\n            }\r\n\r\n            // Create animation and key frames\r\n            let babylonAnimation: Nullable<Animation> = null;\r\n            const keys = [];\r\n            let arrayOffset = 0;\r\n            let modifyKey = false;\r\n\r\n            if (isBone && lastAnimation && lastAnimation.getKeys().length === bufferInput.length) {\r\n                babylonAnimation = lastAnimation;\r\n                modifyKey = true;\r\n            }\r\n\r\n            if (!modifyKey) {\r\n                gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n                babylonAnimation = new Animation(anim, isBone ? \"_matrix\" : targetPath, 1, animationType, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n                gltfRuntime.scene._blockEntityCollection = false;\r\n            }\r\n\r\n            // For each frame\r\n            for (let j = 0; j < bufferInput.length; j++) {\r\n                let value: any = null;\r\n\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    // VEC4\r\n                    value = Quaternion.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2], bufferOutput[arrayOffset + 3]]);\r\n                    arrayOffset += 4;\r\n                } else {\r\n                    // Position and scaling are VEC3\r\n                    value = Vector3.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2]]);\r\n                    arrayOffset += 3;\r\n                }\r\n\r\n                if (isBone) {\r\n                    const bone = <Bone>targetNode;\r\n                    let translation = Vector3.Zero();\r\n                    let rotationQuaternion = new Quaternion();\r\n                    let scaling = Vector3.Zero();\r\n\r\n                    // Warning on decompose\r\n                    let mat = bone.getBaseMatrix();\r\n\r\n                    if (modifyKey && lastAnimation) {\r\n                        mat = lastAnimation.getKeys()[j].value;\r\n                    }\r\n\r\n                    mat.decompose(scaling, rotationQuaternion, translation);\r\n\r\n                    if (targetPath === \"position\") {\r\n                        translation = value;\r\n                    } else if (targetPath === \"rotationQuaternion\") {\r\n                        rotationQuaternion = value;\r\n                    } else {\r\n                        scaling = value;\r\n                    }\r\n\r\n                    value = Matrix.Compose(scaling, rotationQuaternion, translation);\r\n                }\r\n\r\n                if (!modifyKey) {\r\n                    keys.push({\r\n                        frame: bufferInput[j],\r\n                        value: value,\r\n                    });\r\n                } else if (lastAnimation) {\r\n                    lastAnimation.getKeys()[j].value = value;\r\n                }\r\n            }\r\n\r\n            // Finish\r\n            if (!modifyKey && babylonAnimation) {\r\n                babylonAnimation.setKeys(keys);\r\n                targetNode.animations.push(babylonAnimation);\r\n            }\r\n\r\n            lastAnimation = babylonAnimation;\r\n\r\n            gltfRuntime.scene.stopAnimation(targetNode);\r\n            gltfRuntime.scene.beginAnimation(targetNode, 0, bufferInput[bufferInput.length - 1], true, 1.0);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @returns the bones transformation matrix\r\n * @param node\r\n */\r\nconst configureBoneTransformation = (node: IGLTFNode): Matrix => {\r\n    let mat: Nullable<Matrix> = null;\r\n\r\n    if (node.translation || node.rotation || node.scale) {\r\n        const scale = Vector3.FromArray(node.scale || [1, 1, 1]);\r\n        const rotation = Quaternion.FromArray(node.rotation || [0, 0, 0, 1]);\r\n        const position = Vector3.FromArray(node.translation || [0, 0, 0]);\r\n\r\n        mat = Matrix.Compose(scale, rotation, position);\r\n    } else {\r\n        mat = Matrix.FromArray(node.matrix);\r\n    }\r\n\r\n    return mat;\r\n};\r\n\r\n/**\r\n * Returns the parent bone\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param jointName\r\n * @param newSkeleton\r\n * @returns the parent bone\r\n */\r\nconst getParentBone = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, jointName: string, newSkeleton: Skeleton): Nullable<Bone> => {\r\n    // Try to find\r\n    for (let i = 0; i < newSkeleton.bones.length; i++) {\r\n        if (newSkeleton.bones[i].name === jointName) {\r\n            return newSkeleton.bones[i];\r\n        }\r\n    }\r\n\r\n    // Not found, search in gltf nodes\r\n    const nodes = gltfRuntime.nodes;\r\n    for (const nde in nodes) {\r\n        const node: IGLTFNode = nodes[nde];\r\n\r\n        if (!node.jointName) {\r\n            continue;\r\n        }\r\n\r\n        const children = node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child: IGLTFNode = gltfRuntime.nodes[children[i]];\r\n            if (!child.jointName) {\r\n                continue;\r\n            }\r\n\r\n            if (child.jointName === jointName) {\r\n                const mat = configureBoneTransformation(node);\r\n                const bone = new Bone(node.name || \"\", newSkeleton, getParentBone(gltfRuntime, skins, node.jointName, newSkeleton), mat);\r\n                bone.id = nde;\r\n                return bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the appropriate root node\r\n * @param nodesToRoot\r\n * @param id\r\n * @returns the root node\r\n */\r\nconst getNodeToRoot = (nodesToRoot: INodeToRoot[], id: string): Nullable<Bone> => {\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n\r\n        for (let j = 0; j < nodeToRoot.node.children.length; j++) {\r\n            const child = nodeToRoot.node.children[j];\r\n            if (child === id) {\r\n                return nodeToRoot.bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the node with the joint name\r\n * @param gltfRuntime\r\n * @param jointName\r\n * @returns the node with the joint name\r\n */\r\nconst getJointNode = (gltfRuntime: IGLTFRuntime, jointName: string): Nullable<IJointNode> => {\r\n    const nodes = gltfRuntime.nodes;\r\n    let node: IGLTFNode = nodes[jointName];\r\n    if (node) {\r\n        return {\r\n            node: node,\r\n            id: jointName,\r\n        };\r\n    }\r\n\r\n    for (const nde in nodes) {\r\n        node = nodes[nde];\r\n        if (node.jointName === jointName) {\r\n            return {\r\n                node: node,\r\n                id: nde,\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Checks if a nodes is in joints\r\n * @param skins\r\n * @param id\r\n * @returns true if the node is in joints, else false\r\n */\r\nconst nodeIsInJoints = (skins: IGLTFSkins, id: string): boolean => {\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        if (skins.jointNames[i] === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Fills the nodes to root for bones and builds hierarchy\r\n * @param gltfRuntime\r\n * @param newSkeleton\r\n * @param skins\r\n * @param nodesToRoot\r\n */\r\nconst getNodesToRoot = (gltfRuntime: IGLTFRuntime, newSkeleton: Skeleton, skins: IGLTFSkins, nodesToRoot: INodeToRoot[]) => {\r\n    // Creates nodes for root\r\n    for (const nde in gltfRuntime.nodes) {\r\n        const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n        const id = nde;\r\n\r\n        if (!node.jointName || nodeIsInJoints(skins, node.jointName)) {\r\n            continue;\r\n        }\r\n\r\n        // Create node to root bone\r\n        const mat = configureBoneTransformation(node);\r\n        const bone = new Bone(node.name || \"\", newSkeleton, null, mat);\r\n        bone.id = id;\r\n        nodesToRoot.push({ bone: bone, node: node, id: id });\r\n    }\r\n\r\n    // Parenting\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n        const children = nodeToRoot.node.children;\r\n\r\n        for (let j = 0; j < children.length; j++) {\r\n            let child: Nullable<INodeToRoot> = null;\r\n\r\n            for (let k = 0; k < nodesToRoot.length; k++) {\r\n                if (nodesToRoot[k].id === children[j]) {\r\n                    child = nodesToRoot[k];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (child) {\r\n                (<any>child.bone)._parent = nodeToRoot.bone;\r\n                nodeToRoot.bone.children.push(child.bone);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Imports a skeleton\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param mesh\r\n * @param newSkeleton\r\n * @returns the bone name\r\n */\r\nconst importSkeleton = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, mesh: Mesh, newSkeleton: Skeleton | undefined): Skeleton => {\r\n    if (!newSkeleton) {\r\n        newSkeleton = new Skeleton(skins.name || \"\", \"\", gltfRuntime.scene);\r\n    }\r\n\r\n    if (!skins.babylonSkeleton) {\r\n        return newSkeleton;\r\n    }\r\n\r\n    // Find the root bones\r\n    const nodesToRoot: INodeToRoot[] = [];\r\n    const nodesToRootToAdd: Bone[] = [];\r\n\r\n    getNodesToRoot(gltfRuntime, newSkeleton, skins, nodesToRoot);\r\n    newSkeleton.bones = [];\r\n\r\n    // Joints\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        const node = jointNode.node;\r\n\r\n        if (!node) {\r\n            Tools.Warn(\"Joint named \" + skins.jointNames[i] + \" does not exist\");\r\n            continue;\r\n        }\r\n\r\n        const id = jointNode.id;\r\n\r\n        // Optimize, if the bone already exists...\r\n        const existingBone = gltfRuntime.scene.getBoneById(id);\r\n        if (existingBone) {\r\n            newSkeleton.bones.push(existingBone);\r\n            continue;\r\n        }\r\n\r\n        // Search for parent bone\r\n        let foundBone = false;\r\n        let parentBone: Nullable<Bone> = null;\r\n\r\n        for (let j = 0; j < i; j++) {\r\n            const jointNode = getJointNode(gltfRuntime, skins.jointNames[j]);\r\n\r\n            if (!jointNode) {\r\n                continue;\r\n            }\r\n\r\n            const joint: IGLTFNode = jointNode.node;\r\n\r\n            if (!joint) {\r\n                Tools.Warn(\"Joint named \" + skins.jointNames[j] + \" does not exist when looking for parent\");\r\n                continue;\r\n            }\r\n\r\n            const children = joint.children;\r\n            if (!children) {\r\n                continue;\r\n            }\r\n            foundBone = false;\r\n\r\n            for (let k = 0; k < children.length; k++) {\r\n                if (children[k] === id) {\r\n                    parentBone = getParentBone(gltfRuntime, skins, skins.jointNames[j], newSkeleton);\r\n                    foundBone = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundBone) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Create bone\r\n        const mat = configureBoneTransformation(node);\r\n\r\n        if (!parentBone && nodesToRoot.length > 0) {\r\n            parentBone = getNodeToRoot(nodesToRoot, id);\r\n\r\n            if (parentBone) {\r\n                if (nodesToRootToAdd.indexOf(parentBone) === -1) {\r\n                    nodesToRootToAdd.push(parentBone);\r\n                }\r\n            }\r\n        }\r\n\r\n        const bone = new Bone(node.jointName || \"\", newSkeleton, parentBone, mat);\r\n        bone.id = id;\r\n    }\r\n\r\n    // Polish\r\n    const bones = newSkeleton.bones;\r\n    newSkeleton.bones = [];\r\n\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = getJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        for (let j = 0; j < bones.length; j++) {\r\n            if (bones[j].id === jointNode.id) {\r\n                newSkeleton.bones.push(bones[j]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    newSkeleton.prepare();\r\n\r\n    // Finish\r\n    for (let i = 0; i < nodesToRootToAdd.length; i++) {\r\n        newSkeleton.bones.push(nodesToRootToAdd[i]);\r\n    }\r\n\r\n    return newSkeleton;\r\n};\r\n\r\n/**\r\n * Imports a mesh and its geometries\r\n * @param gltfRuntime\r\n * @param node\r\n * @param meshes\r\n * @param id\r\n * @param newMesh\r\n * @returns the new mesh\r\n */\r\nconst importMesh = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, meshes: string[], id: string, newMesh: Mesh): Mesh => {\r\n    if (!newMesh) {\r\n        gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n        newMesh = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n        newMesh._parentContainer = gltfRuntime.assetContainer;\r\n        gltfRuntime.scene._blockEntityCollection = false;\r\n        newMesh.id = id;\r\n    }\r\n\r\n    if (!node.babylonNode) {\r\n        return newMesh;\r\n    }\r\n\r\n    const subMaterials: Material[] = [];\r\n\r\n    let vertexData: Nullable<VertexData> = null;\r\n    const verticesStarts: number[] = [];\r\n    const verticesCounts: number[] = [];\r\n    const indexStarts: number[] = [];\r\n    const indexCounts: number[] = [];\r\n\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        // Positions, normals and UVs\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            // Temporary vertex data\r\n            const tempVertexData = new VertexData();\r\n\r\n            const primitive = mesh.primitives[i];\r\n            if (primitive.mode !== 4) {\r\n                // continue;\r\n            }\r\n\r\n            const attributes = primitive.attributes;\r\n            let accessor: Nullable<IGLTFAccessor> = null;\r\n            let buffer: any = null;\r\n\r\n            // Set positions, normal and uvs\r\n            for (const semantic in attributes) {\r\n                // Link accessor and buffer view\r\n                accessor = gltfRuntime.accessors[attributes[semantic]];\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                if (semantic === \"NORMAL\") {\r\n                    tempVertexData.normals = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.normals).set(buffer);\r\n                } else if (semantic === \"POSITION\") {\r\n                    if (GLTFFileLoader.HomogeneousCoordinates) {\r\n                        tempVertexData.positions = new Float32Array(buffer.length - buffer.length / 4);\r\n\r\n                        for (let j = 0; j < buffer.length; j += 4) {\r\n                            tempVertexData.positions[j] = buffer[j];\r\n                            tempVertexData.positions[j + 1] = buffer[j + 1];\r\n                            tempVertexData.positions[j + 2] = buffer[j + 2];\r\n                        }\r\n                    } else {\r\n                        tempVertexData.positions = new Float32Array(buffer.length);\r\n                        (<Float32Array>tempVertexData.positions).set(buffer);\r\n                    }\r\n\r\n                    verticesCounts.push(tempVertexData.positions.length);\r\n                } else if (semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n                    const channel = Number(semantic.split(\"_\")[1]);\r\n                    const uvKind = VertexBuffer.UVKind + (channel === 0 ? \"\" : channel + 1);\r\n                    const uvs = new Float32Array(buffer.length);\r\n                    (<Float32Array>uvs).set(buffer);\r\n                    normalizeUVs(uvs);\r\n                    tempVertexData.set(uvs, uvKind);\r\n                } else if (semantic === \"JOINT\") {\r\n                    tempVertexData.matricesIndices = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesIndices).set(buffer);\r\n                } else if (semantic === \"WEIGHT\") {\r\n                    tempVertexData.matricesWeights = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesWeights).set(buffer);\r\n                } else if (semantic === \"COLOR\") {\r\n                    tempVertexData.colors = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.colors).set(buffer);\r\n                }\r\n            }\r\n\r\n            // Indices\r\n            accessor = gltfRuntime.accessors[primitive.indices];\r\n            if (accessor) {\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                tempVertexData.indices = new Int32Array(buffer.length);\r\n                tempVertexData.indices.set(buffer);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            } else {\r\n                // Set indices on the fly\r\n                const indices: number[] = [];\r\n                for (let j = 0; j < (<FloatArray>tempVertexData.positions).length / 3; j++) {\r\n                    indices.push(j);\r\n                }\r\n\r\n                tempVertexData.indices = new Int32Array(indices);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            }\r\n\r\n            if (!vertexData) {\r\n                vertexData = tempVertexData;\r\n            } else {\r\n                vertexData.merge(tempVertexData);\r\n            }\r\n\r\n            // Sub material\r\n            const material = gltfRuntime.scene.getMaterialById(primitive.material);\r\n\r\n            subMaterials.push(material === null ? GLTFUtils.GetDefaultMaterial(gltfRuntime.scene) : material);\r\n\r\n            // Update vertices start and index start\r\n            verticesStarts.push(verticesStarts.length === 0 ? 0 : verticesStarts[verticesStarts.length - 1] + verticesCounts[verticesCounts.length - 2]);\r\n            indexStarts.push(indexStarts.length === 0 ? 0 : indexStarts[indexStarts.length - 1] + indexCounts[indexCounts.length - 2]);\r\n        }\r\n    }\r\n    let material: StandardMaterial | MultiMaterial;\r\n    gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n    if (subMaterials.length > 1) {\r\n        material = new MultiMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n        (material as MultiMaterial).subMaterials = subMaterials;\r\n    } else {\r\n        material = new StandardMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n    }\r\n\r\n    if (subMaterials.length === 1) {\r\n        material = subMaterials[0] as StandardMaterial;\r\n    }\r\n\r\n    material._parentContainer = gltfRuntime.assetContainer;\r\n\r\n    if (!newMesh.material) {\r\n        newMesh.material = material;\r\n    }\r\n\r\n    // Apply geometry\r\n    new Geometry(id, gltfRuntime.scene, vertexData!, false, newMesh);\r\n    newMesh.computeWorldMatrix(true);\r\n\r\n    gltfRuntime.scene._blockEntityCollection = false;\r\n\r\n    // Apply submeshes\r\n    newMesh.subMeshes = [];\r\n    let index = 0;\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            if (mesh.primitives[i].mode !== 4) {\r\n                //continue;\r\n            }\r\n\r\n            SubMesh.AddToMesh(index, verticesStarts[index], verticesCounts[index], indexStarts[index], indexCounts[index], newMesh, newMesh, true);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Finish\r\n    return newMesh;\r\n};\r\n\r\n/**\r\n * Configure node transformation from position, rotation and scaling\r\n * @param newNode\r\n * @param position\r\n * @param rotation\r\n * @param scaling\r\n */\r\nconst configureNode = (newNode: any, position: Vector3, rotation: Quaternion, scaling: Vector3) => {\r\n    if (newNode.position) {\r\n        newNode.position = position;\r\n    }\r\n\r\n    if (newNode.rotationQuaternion || newNode.rotation) {\r\n        newNode.rotationQuaternion = rotation;\r\n    }\r\n\r\n    if (newNode.scaling) {\r\n        newNode.scaling = scaling;\r\n    }\r\n};\r\n\r\n/**\r\n * Configures node from transformation matrix\r\n * @param newNode\r\n * @param node\r\n */\r\nconst configureNodeFromMatrix = (newNode: Mesh, node: IGLTFNode) => {\r\n    if (node.matrix) {\r\n        const position = new Vector3(0, 0, 0);\r\n        const rotation = new Quaternion();\r\n        const scaling = new Vector3(0, 0, 0);\r\n        const mat = Matrix.FromArray(node.matrix);\r\n        mat.decompose(scaling, rotation, position);\r\n\r\n        configureNode(newNode, position, rotation, scaling);\r\n    } else if (node.translation && node.rotation && node.scale) {\r\n        configureNode(newNode, Vector3.FromArray(node.translation), Quaternion.FromArray(node.rotation), Vector3.FromArray(node.scale));\r\n    }\r\n\r\n    newNode.computeWorldMatrix(true);\r\n};\r\n\r\n/**\r\n * Imports a node\r\n * @param gltfRuntime\r\n * @param node\r\n * @param id\r\n * @returns the newly imported node\r\n */\r\nconst importNode = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, id: string): Nullable<Node> => {\r\n    let lastNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && (node.skin || node.meshes)) {\r\n        if (gltfRuntime.importMeshesNames && gltfRuntime.importMeshesNames.length > 0 && gltfRuntime.importMeshesNames.indexOf(node.name || \"\") === -1) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Meshes\r\n    if (node.skin) {\r\n        if (node.meshes) {\r\n            const skin: IGLTFSkins = gltfRuntime.skins[node.skin];\r\n\r\n            const newMesh = importMesh(gltfRuntime, node, node.meshes, id, <Mesh>node.babylonNode);\r\n            newMesh.skeleton = gltfRuntime.scene.getLastSkeletonById(node.skin);\r\n\r\n            if (newMesh.skeleton === null) {\r\n                newMesh.skeleton = importSkeleton(gltfRuntime, skin, newMesh, skin.babylonSkeleton);\r\n\r\n                if (!skin.babylonSkeleton) {\r\n                    skin.babylonSkeleton = newMesh.skeleton;\r\n                }\r\n            }\r\n\r\n            lastNode = newMesh;\r\n        }\r\n    } else if (node.meshes) {\r\n        /**\r\n         * Improve meshes property\r\n         */\r\n        const newMesh = importMesh(gltfRuntime, node, node.mesh ? [node.mesh] : node.meshes, id, <Mesh>node.babylonNode);\r\n        lastNode = newMesh;\r\n    }\r\n    // Lights\r\n    else if (node.light && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const light: IGLTFLight = gltfRuntime.lights[node.light];\r\n\r\n        if (light) {\r\n            if (light.type === \"ambient\") {\r\n                const ambienLight: IGLTFAmbienLight = (<any>light)[light.type];\r\n                const hemiLight = new HemisphericLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                hemiLight.name = node.name || \"\";\r\n\r\n                if (ambienLight.color) {\r\n                    hemiLight.diffuse = Color3.FromArray(ambienLight.color);\r\n                }\r\n\r\n                lastNode = hemiLight;\r\n            } else if (light.type === \"directional\") {\r\n                const directionalLight: IGLTFDirectionalLight = (<any>light)[light.type];\r\n                const dirLight = new DirectionalLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                dirLight.name = node.name || \"\";\r\n\r\n                if (directionalLight.color) {\r\n                    dirLight.diffuse = Color3.FromArray(directionalLight.color);\r\n                }\r\n\r\n                lastNode = dirLight;\r\n            } else if (light.type === \"point\") {\r\n                const pointLight: IGLTFPointLight = (<any>light)[light.type];\r\n                const ptLight = new PointLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                ptLight.name = node.name || \"\";\r\n\r\n                if (pointLight.color) {\r\n                    ptLight.diffuse = Color3.FromArray(pointLight.color);\r\n                }\r\n\r\n                lastNode = ptLight;\r\n            } else if (light.type === \"spot\") {\r\n                const spotLight: IGLTFSpotLight = (<any>light)[light.type];\r\n                const spLight = new SpotLight(node.light, Vector3.Zero(), Vector3.Zero(), 0, 0, gltfRuntime.scene);\r\n                spLight.name = node.name || \"\";\r\n\r\n                if (spotLight.color) {\r\n                    spLight.diffuse = Color3.FromArray(spotLight.color);\r\n                }\r\n\r\n                if (spotLight.fallOfAngle) {\r\n                    spLight.angle = spotLight.fallOfAngle;\r\n                }\r\n\r\n                if (spotLight.fallOffExponent) {\r\n                    spLight.exponent = spotLight.fallOffExponent;\r\n                }\r\n\r\n                lastNode = spLight;\r\n            }\r\n        }\r\n    }\r\n    // Cameras\r\n    else if (node.camera && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const camera: IGLTFCamera = gltfRuntime.cameras[node.camera];\r\n\r\n        if (camera) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            if (camera.type === \"orthographic\") {\r\n                const orthoCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                orthoCamera.name = node.name || \"\";\r\n                orthoCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                orthoCamera.attachControl();\r\n\r\n                lastNode = orthoCamera;\r\n\r\n                orthoCamera._parentContainer = gltfRuntime.assetContainer;\r\n            } else if (camera.type === \"perspective\") {\r\n                const perspectiveCamera: IGLTFCameraPerspective = (<any>camera)[camera.type];\r\n                const persCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                persCamera.name = node.name || \"\";\r\n                persCamera.attachControl();\r\n\r\n                if (!perspectiveCamera.aspectRatio) {\r\n                    perspectiveCamera.aspectRatio = gltfRuntime.scene.getEngine().getRenderWidth() / gltfRuntime.scene.getEngine().getRenderHeight();\r\n                }\r\n\r\n                if (perspectiveCamera.znear && perspectiveCamera.zfar) {\r\n                    persCamera.maxZ = perspectiveCamera.zfar;\r\n                    persCamera.minZ = perspectiveCamera.znear;\r\n                }\r\n\r\n                lastNode = persCamera;\r\n                persCamera._parentContainer = gltfRuntime.assetContainer;\r\n            }\r\n\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n        }\r\n    }\r\n\r\n    // Empty node\r\n    if (!node.jointName) {\r\n        if (node.babylonNode) {\r\n            return node.babylonNode;\r\n        } else if (lastNode === null) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const dummy = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n            dummy._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            node.babylonNode = dummy;\r\n            lastNode = dummy;\r\n        }\r\n    }\r\n\r\n    if (lastNode !== null) {\r\n        if (node.matrix && lastNode instanceof Mesh) {\r\n            configureNodeFromMatrix(lastNode, node);\r\n        } else {\r\n            const translation = node.translation || [0, 0, 0];\r\n            const rotation = node.rotation || [0, 0, 0, 1];\r\n            const scale = node.scale || [1, 1, 1];\r\n            configureNode(lastNode, Vector3.FromArray(translation), Quaternion.FromArray(rotation), Vector3.FromArray(scale));\r\n        }\r\n\r\n        lastNode.updateCache(true);\r\n        node.babylonNode = lastNode;\r\n    }\r\n\r\n    return lastNode;\r\n};\r\n\r\n/**\r\n * Traverses nodes and creates them\r\n * @param gltfRuntime\r\n * @param id\r\n * @param parent\r\n * @param meshIncluded\r\n */\r\nconst traverseNodes = (gltfRuntime: IGLTFRuntime, id: string, parent: Nullable<Node>, meshIncluded: boolean = false) => {\r\n    const node: IGLTFNode = gltfRuntime.nodes[id];\r\n    let newNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && !meshIncluded && gltfRuntime.importMeshesNames) {\r\n        if (gltfRuntime.importMeshesNames.indexOf(node.name || \"\") !== -1 || gltfRuntime.importMeshesNames.length === 0) {\r\n            meshIncluded = true;\r\n        } else {\r\n            meshIncluded = false;\r\n        }\r\n    } else {\r\n        meshIncluded = true;\r\n    }\r\n\r\n    if (!node.jointName && meshIncluded) {\r\n        newNode = importNode(gltfRuntime, node, id);\r\n\r\n        if (newNode !== null) {\r\n            newNode.id = id;\r\n            newNode.parent = parent;\r\n        }\r\n    }\r\n\r\n    if (node.children) {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            traverseNodes(gltfRuntime, node.children[i], newNode, meshIncluded);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * do stuff after buffers, shaders are loaded (e.g. hook up materials, load animations, etc.)\r\n * @param gltfRuntime\r\n */\r\nconst postLoad = (gltfRuntime: IGLTFRuntime) => {\r\n    // Nodes\r\n    let currentScene: IGLTFScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n    if (currentScene) {\r\n        for (let i = 0; i < currentScene.nodes.length; i++) {\r\n            traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n        }\r\n    } else {\r\n        for (const thing in gltfRuntime.scenes) {\r\n            currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set animations\r\n    loadAnimations(gltfRuntime);\r\n\r\n    for (let i = 0; i < gltfRuntime.scene.skeletons.length; i++) {\r\n        const skeleton = gltfRuntime.scene.skeletons[i];\r\n        gltfRuntime.scene.beginAnimation(skeleton, 0, Number.MAX_VALUE, true, 1.0);\r\n    }\r\n};\r\n\r\n/**\r\n * onBind shaderrs callback to set uniforms and matrices\r\n * @param mesh\r\n * @param gltfRuntime\r\n * @param unTreatedUniforms\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param onSuccess\r\n */\r\nconst onBindShaderMaterial = (\r\n    mesh: AbstractMesh,\r\n    gltfRuntime: IGLTFRuntime,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n\r\n        if (type === EParameterType.FLOAT_MAT2 || type === EParameterType.FLOAT_MAT3 || type === EParameterType.FLOAT_MAT4) {\r\n            if (uniform.semantic && !uniform.source && !uniform.node) {\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, mesh, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            } else if (uniform.semantic && (uniform.source || uniform.node)) {\r\n                let source = gltfRuntime.scene.getNodeByName(uniform.source || uniform.node || \"\");\r\n                if (source === null) {\r\n                    source = gltfRuntime.scene.getNodeById(uniform.source || uniform.node || \"\");\r\n                }\r\n                if (source === null) {\r\n                    continue;\r\n                }\r\n\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, source, uniform, unif, <Effect>shaderMaterial.getEffect());\r\n            }\r\n        } else {\r\n            const value = (<any>materialValues)[technique.uniforms[unif]];\r\n            if (!value) {\r\n                continue;\r\n            }\r\n\r\n            if (type === EParameterType.SAMPLER_2D) {\r\n                const texture = gltfRuntime.textures[material.values ? value : uniform.value].babylonTexture;\r\n\r\n                if (texture === null || texture === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                (<Effect>shaderMaterial.getEffect()).setTexture(unif, texture);\r\n            } else {\r\n                GLTFUtils.SetUniform(<Effect>shaderMaterial.getEffect(), unif, value, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSuccess(shaderMaterial);\r\n};\r\n\r\n/**\r\n * Prepare uniforms to send the only one time\r\n * Loads the appropriate textures\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n */\r\nconst prepareShaderMaterialUniforms = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n    const techniqueUniforms = technique.uniforms;\r\n\r\n    /**\r\n     * Prepare values here (not matrices)\r\n     */\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n        let value = (<any>materialValues)[techniqueUniforms[unif]];\r\n\r\n        if (value === undefined) {\r\n            // In case the value is the same for all materials\r\n            value = <any>uniform.value;\r\n        }\r\n\r\n        if (!value) {\r\n            continue;\r\n        }\r\n\r\n        const onLoadTexture = (uniformName: Nullable<string>) => {\r\n            return (texture: Texture) => {\r\n                if (uniform.value && uniformName) {\r\n                    // Static uniform\r\n                    shaderMaterial.setTexture(uniformName, texture);\r\n                    delete unTreatedUniforms[uniformName];\r\n                }\r\n            };\r\n        };\r\n\r\n        // Texture (sampler2D)\r\n        if (type === EParameterType.SAMPLER_2D) {\r\n            GLTFLoaderExtension.LoadTextureAsync(gltfRuntime, material.values ? value : uniform.value, onLoadTexture(unif), () => onLoadTexture(null));\r\n        }\r\n        // Others\r\n        else {\r\n            if (uniform.value && GLTFUtils.SetUniform(shaderMaterial, unif, material.values ? value : uniform.value, type)) {\r\n                // Static uniform\r\n                delete unTreatedUniforms[unif];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Shader compilation failed\r\n * @param program\r\n * @param shaderMaterial\r\n * @param onError\r\n * @returns callback when shader is compiled\r\n */\r\nconst onShaderCompileError = (program: IGLTFProgram, shaderMaterial: ShaderMaterial, onError: (message: string) => void) => {\r\n    return (effect: Effect, error: string) => {\r\n        shaderMaterial.dispose(true);\r\n        onError(\"Cannot compile program named \" + program.name + \". Error: \" + error + \". Default material will be applied\");\r\n    };\r\n};\r\n\r\n/**\r\n * Shader compilation success\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param unTreatedUniforms\r\n * @param onSuccess\r\n * @returns callback when shader is compiled\r\n */\r\nconst onShaderCompileSuccess = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    return (_: Effect) => {\r\n        prepareShaderMaterialUniforms(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms);\r\n\r\n        shaderMaterial.onBind = (mesh: AbstractMesh) => {\r\n            onBindShaderMaterial(mesh, gltfRuntime, unTreatedUniforms, shaderMaterial, technique, material, onSuccess);\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Returns the appropriate uniform if already handled by babylon\r\n * @param tokenizer\r\n * @param technique\r\n * @param unTreatedUniforms\r\n * @returns the name of the uniform handled by babylon\r\n */\r\nconst parseShaderUniforms = (tokenizer: Tokenizer, technique: IGLTFTechnique, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }): string => {\r\n    for (const unif in technique.uniforms) {\r\n        const uniform = technique.uniforms[unif];\r\n        const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n        if (tokenizer.currentIdentifier === unif) {\r\n            if (uniformParameter.semantic && !uniformParameter.source && !uniformParameter.node) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n\r\n                if (transformIndex !== -1) {\r\n                    delete unTreatedUniforms[unif];\r\n                    return babylonTransforms[transformIndex];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tokenizer.currentIdentifier;\r\n};\r\n\r\n/**\r\n * All shaders loaded. Create materials one by one\r\n * @param gltfRuntime\r\n */\r\nconst importMaterials = (gltfRuntime: IGLTFRuntime) => {\r\n    // Create materials\r\n    for (const mat in gltfRuntime.materials) {\r\n        GLTFLoaderExtension.LoadMaterialAsync(\r\n            gltfRuntime,\r\n            mat,\r\n            () => {},\r\n            () => {}\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Implementation of the base glTF spec\r\n * @internal\r\n */\r\nexport class GLTFLoaderBase {\r\n    public static CreateRuntime(parsedData: any, scene: Scene, rootUrl: string): IGLTFRuntime {\r\n        const gltfRuntime: IGLTFRuntime = {\r\n            extensions: {},\r\n            accessors: {},\r\n            buffers: {},\r\n            bufferViews: {},\r\n            meshes: {},\r\n            lights: {},\r\n            cameras: {},\r\n            nodes: {},\r\n            images: {},\r\n            textures: {},\r\n            shaders: {},\r\n            programs: {},\r\n            samplers: {},\r\n            techniques: {},\r\n            materials: {},\r\n            animations: {},\r\n            skins: {},\r\n            extensionsUsed: [],\r\n\r\n            scenes: {},\r\n\r\n            buffersCount: 0,\r\n            shaderscount: 0,\r\n\r\n            scene: scene,\r\n            rootUrl: rootUrl,\r\n\r\n            loadedBufferCount: 0,\r\n            loadedBufferViews: {},\r\n\r\n            loadedShaderCount: 0,\r\n\r\n            importOnlyMeshes: false,\r\n\r\n            dummyNodes: [],\r\n\r\n            assetContainer: null,\r\n        };\r\n\r\n        // Parse\r\n        if (parsedData.extensions) {\r\n            parseObject(parsedData.extensions, \"extensions\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.extensionsUsed) {\r\n            parseObject(parsedData.extensionsUsed, \"extensionsUsed\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.buffers) {\r\n            parseBuffers(parsedData.buffers, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.bufferViews) {\r\n            parseObject(parsedData.bufferViews, \"bufferViews\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.accessors) {\r\n            parseObject(parsedData.accessors, \"accessors\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.meshes) {\r\n            parseObject(parsedData.meshes, \"meshes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.lights) {\r\n            parseObject(parsedData.lights, \"lights\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.cameras) {\r\n            parseObject(parsedData.cameras, \"cameras\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.nodes) {\r\n            parseObject(parsedData.nodes, \"nodes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.images) {\r\n            parseObject(parsedData.images, \"images\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.textures) {\r\n            parseObject(parsedData.textures, \"textures\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.shaders) {\r\n            parseShaders(parsedData.shaders, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.programs) {\r\n            parseObject(parsedData.programs, \"programs\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.samplers) {\r\n            parseObject(parsedData.samplers, \"samplers\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.techniques) {\r\n            parseObject(parsedData.techniques, \"techniques\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.materials) {\r\n            parseObject(parsedData.materials, \"materials\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.animations) {\r\n            parseObject(parsedData.animations, \"animations\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.skins) {\r\n            parseObject(parsedData.skins, \"skins\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.scenes) {\r\n            gltfRuntime.scenes = parsedData.scenes;\r\n        }\r\n\r\n        if (parsedData.scene && parsedData.scenes) {\r\n            gltfRuntime.currentScene = parsedData.scenes[parsedData.scene];\r\n        }\r\n\r\n        return gltfRuntime;\r\n    }\r\n\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        const buffer: IGLTFBuffer = gltfRuntime.buffers[id];\r\n\r\n        if (Tools.IsBase64(buffer.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(buffer.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + buffer.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                onProgress,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    public static LoadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: Nullable<ArrayBufferView>) => void, onError: (message: string) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (!texture || !texture.source) {\r\n            onError(\"\");\r\n            return;\r\n        }\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(null);\r\n            return;\r\n        }\r\n\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n\r\n        if (Tools.IsBase64(source.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(source.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + source.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                undefined,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    public static CreateTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: Nullable<ArrayBufferView>, onSuccess: (texture: Texture) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(texture.babylonTexture);\r\n            return;\r\n        }\r\n\r\n        const sampler: IGLTFSampler = gltfRuntime.samplers[texture.sampler];\r\n\r\n        const createMipMaps =\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_LINEAR ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_LINEAR;\r\n\r\n        const samplingMode = Texture.BILINEAR_SAMPLINGMODE;\r\n\r\n        const blob = buffer == null ? new Blob() : new Blob([buffer]);\r\n        const blobURL = URL.createObjectURL(blob);\r\n        const revokeBlobURL = () => URL.revokeObjectURL(blobURL);\r\n        const newTexture = new Texture(blobURL, gltfRuntime.scene, !createMipMaps, true, samplingMode, revokeBlobURL, revokeBlobURL);\r\n        if (sampler.wrapS !== undefined) {\r\n            newTexture.wrapU = GLTFUtils.GetWrapMode(sampler.wrapS);\r\n        }\r\n        if (sampler.wrapT !== undefined) {\r\n            newTexture.wrapV = GLTFUtils.GetWrapMode(sampler.wrapT);\r\n        }\r\n        newTexture.name = id;\r\n\r\n        texture.babylonTexture = newTexture;\r\n        onSuccess(newTexture);\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string | ArrayBuffer) => void, onError?: (message: string) => void): void {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n\r\n        if (Tools.IsBase64(shader.uri)) {\r\n            const shaderString = atob(shader.uri.split(\",\")[1]);\r\n            if (onSuccess) {\r\n                onSuccess(shaderString);\r\n            }\r\n        } else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + shader.uri, onSuccess, undefined, undefined, false, (request) => {\r\n                if (request && onError) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material.technique) {\r\n            if (onError) {\r\n                onError(\"No technique found.\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const technique: IGLTFTechnique = gltfRuntime.techniques[material.technique];\r\n        if (!technique) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const defaultMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n            defaultMaterial._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            defaultMaterial.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n            defaultMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n            onSuccess(defaultMaterial);\r\n            return;\r\n        }\r\n\r\n        const program: IGLTFProgram = gltfRuntime.programs[technique.program];\r\n        const states: IGLTFTechniqueStates = technique.states;\r\n\r\n        const vertexShader: string = Effect.ShadersStore[program.vertexShader + \"VertexShader\"];\r\n        const pixelShader: string = Effect.ShadersStore[program.fragmentShader + \"PixelShader\"];\r\n        let newVertexShader = \"\";\r\n        let newPixelShader = \"\";\r\n\r\n        const vertexTokenizer = new Tokenizer(vertexShader);\r\n        const pixelTokenizer = new Tokenizer(pixelShader);\r\n\r\n        const unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter } = {};\r\n        const uniforms: string[] = [];\r\n        const attributes: string[] = [];\r\n        const samplers: string[] = [];\r\n\r\n        // Fill uniform, sampler2D and attributes\r\n        for (const unif in technique.uniforms) {\r\n            const uniform = technique.uniforms[unif];\r\n            const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n            unTreatedUniforms[unif] = uniformParameter;\r\n\r\n            if (uniformParameter.semantic && !uniformParameter.node && !uniformParameter.source) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n                if (transformIndex !== -1) {\r\n                    uniforms.push(babylonTransforms[transformIndex]);\r\n                    delete unTreatedUniforms[unif];\r\n                } else {\r\n                    uniforms.push(unif);\r\n                }\r\n            } else if (uniformParameter.type === EParameterType.SAMPLER_2D) {\r\n                samplers.push(unif);\r\n            } else {\r\n                uniforms.push(unif);\r\n            }\r\n        }\r\n\r\n        for (const attr in technique.attributes) {\r\n            const attribute = technique.attributes[attr];\r\n            const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n            if (attributeParameter.semantic) {\r\n                const name = getAttribute(attributeParameter);\r\n                if (name) {\r\n                    attributes.push(name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Configure vertex shader\r\n        while (!vertexTokenizer.isEnd() && vertexTokenizer.getNextToken()) {\r\n            const tokenType = vertexTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newVertexShader += vertexTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            let foundAttribute = false;\r\n\r\n            for (const attr in technique.attributes) {\r\n                const attribute = technique.attributes[attr];\r\n                const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n                if (vertexTokenizer.currentIdentifier === attr && attributeParameter.semantic) {\r\n                    newVertexShader += getAttribute(attributeParameter);\r\n                    foundAttribute = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundAttribute) {\r\n                continue;\r\n            }\r\n\r\n            newVertexShader += parseShaderUniforms(vertexTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Configure pixel shader\r\n        while (!pixelTokenizer.isEnd() && pixelTokenizer.getNextToken()) {\r\n            const tokenType = pixelTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newPixelShader += pixelTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            newPixelShader += parseShaderUniforms(pixelTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Create shader material\r\n        const shaderPath = {\r\n            vertex: program.vertexShader + id,\r\n            fragment: program.fragmentShader + id,\r\n        };\r\n\r\n        const options = {\r\n            attributes: attributes,\r\n            uniforms: uniforms,\r\n            samplers: samplers,\r\n            needAlphaBlending: states && states.enable && states.enable.indexOf(3042) !== -1,\r\n        };\r\n\r\n        Effect.ShadersStore[program.vertexShader + id + \"VertexShader\"] = newVertexShader;\r\n        Effect.ShadersStore[program.fragmentShader + id + \"PixelShader\"] = newPixelShader;\r\n\r\n        const shaderMaterial = new ShaderMaterial(id, gltfRuntime.scene, shaderPath, options);\r\n        shaderMaterial.onError = onShaderCompileError(program, shaderMaterial, onError);\r\n        shaderMaterial.onCompiled = onShaderCompileSuccess(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms, onSuccess);\r\n        shaderMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (states && states.functions) {\r\n            const functions = states.functions;\r\n            if (functions.cullFace && functions.cullFace[0] !== ECullingType.BACK) {\r\n                shaderMaterial.backFaceCulling = false;\r\n            }\r\n\r\n            const blendFunc = functions.blendFuncSeparate;\r\n            if (blendFunc) {\r\n                if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_ALPHA &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_COMBINE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ONE &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ONEONE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ADD;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ZERO &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_SUBTRACT;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.DST_COLOR &&\r\n                    blendFunc[1] === EBlendingFunction.ZERO &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MULTIPLY;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MAXIMIZED;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * glTF V1 Loader\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    public static Extensions: { [name: string]: GLTFLoaderExtension } = {};\r\n\r\n    public static RegisterExtension(extension: GLTFLoaderExtension): void {\r\n        if (GLTFLoader.Extensions[extension.name]) {\r\n            Tools.Error('Tool with the same name \"' + extension.name + '\" already exists');\r\n            return;\r\n        }\r\n\r\n        GLTFLoader.Extensions[extension.name] = extension;\r\n    }\r\n\r\n    public dispose(): void {\r\n        // do nothing\r\n    }\r\n\r\n    private _importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        onSuccess: (meshes: AbstractMesh[], skeletons: Skeleton[]) => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): boolean {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                gltfRuntime.assetContainer = assetContainer;\r\n                gltfRuntime.importOnlyMeshes = true;\r\n\r\n                if (meshesNames === \"\") {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                } else if (typeof meshesNames === \"string\") {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else if (meshesNames && !(meshesNames instanceof Array)) {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                    Tools.Warn(\"Argument meshesNames must be of type string or string[]\");\r\n                }\r\n\r\n                // Create nodes\r\n                this._createNodes(gltfRuntime);\r\n\r\n                const meshes: AbstractMesh[] = [];\r\n                const skeletons: Skeleton[] = [];\r\n\r\n                // Fill arrays of meshes and skeletons\r\n                for (const nde in gltfRuntime.nodes) {\r\n                    const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n\r\n                    if (node.babylonNode instanceof AbstractMesh) {\r\n                        meshes.push(<AbstractMesh>node.babylonNode);\r\n                    }\r\n                }\r\n\r\n                for (const skl in gltfRuntime.skins) {\r\n                    const skin: IGLTFSkins = gltfRuntime.skins[skl];\r\n\r\n                    if (skin.babylonSkeleton instanceof Skeleton) {\r\n                        skeletons.push(skin.babylonSkeleton);\r\n                    }\r\n                }\r\n\r\n                // Load buffers, shaders, materials, etc.\r\n                this._loadBuffersAsync(gltfRuntime, () => {\r\n                    this._loadShadersAsync(gltfRuntime, () => {\r\n                        importMaterials(gltfRuntime);\r\n                        postLoad(gltfRuntime);\r\n\r\n                        if (!GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                            onSuccess(meshes, skeletons);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                    onSuccess(meshes, skeletons);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from a loaded gltf file and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param assetContainer defines the asset container to use (can be null)\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise containg the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this._importMeshAsync(\r\n                meshesNames,\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                assetContainer,\r\n                (meshes, skeletons) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: [],\r\n                        skeletons: skeletons,\r\n                        animationGroups: [],\r\n                        lights: [],\r\n                        transformNodes: [],\r\n                        geometries: [],\r\n                        spriteManagers: [],\r\n                    });\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private _loadAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess: () => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                // Load runtime extensios\r\n                GLTFLoaderExtension.LoadRuntimeExtensionsAsync(\r\n                    gltfRuntime,\r\n                    () => {\r\n                        // Create nodes\r\n                        this._createNodes(gltfRuntime);\r\n\r\n                        // Load buffers, shaders, materials, etc.\r\n                        this._loadBuffersAsync(gltfRuntime, () => {\r\n                            this._loadShadersAsync(gltfRuntime, () => {\r\n                                importMaterials(gltfRuntime);\r\n                                postLoad(gltfRuntime);\r\n\r\n                                if (!GLTFFileLoader.IncrementalLoading) {\r\n                                    onSuccess();\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        if (GLTFFileLoader.IncrementalLoading) {\r\n                            onSuccess();\r\n                        }\r\n                    },\r\n                    onError\r\n                );\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from a loaded gltf file and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadAsync(\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private _loadShadersAsync(gltfRuntime: IGLTFRuntime, onload: () => void): void {\r\n        let hasShaders = false;\r\n\r\n        const processShader = (sha: string, shader: IGLTFShader) => {\r\n            GLTFLoaderExtension.LoadShaderStringAsync(\r\n                gltfRuntime,\r\n                sha,\r\n                (shaderString) => {\r\n                    if (shaderString instanceof ArrayBuffer) {\r\n                        return;\r\n                    }\r\n\r\n                    gltfRuntime.loadedShaderCount++;\r\n\r\n                    if (shaderString) {\r\n                        Effect.ShadersStore[sha + (shader.type === EShaderType.VERTEX ? \"VertexShader\" : \"PixelShader\")] = shaderString;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedShaderCount === gltfRuntime.shaderscount) {\r\n                        onload();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading shader program named \" + sha + \" located at \" + shader.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const sha in gltfRuntime.shaders) {\r\n            hasShaders = true;\r\n\r\n            const shader: IGLTFShader = gltfRuntime.shaders[sha];\r\n            if (shader) {\r\n                processShader.bind(this, sha, shader)();\r\n            } else {\r\n                Tools.Error(\"No shader named: \" + sha);\r\n            }\r\n        }\r\n\r\n        if (!hasShaders) {\r\n            onload();\r\n        }\r\n    }\r\n\r\n    private _loadBuffersAsync(gltfRuntime: IGLTFRuntime, onLoad: () => void): void {\r\n        let hasBuffers = false;\r\n\r\n        const processBuffer = (buf: string, buffer: IGLTFBuffer) => {\r\n            GLTFLoaderExtension.LoadBufferAsync(\r\n                gltfRuntime,\r\n                buf,\r\n                (bufferView) => {\r\n                    gltfRuntime.loadedBufferCount++;\r\n\r\n                    if (bufferView) {\r\n                        if (bufferView.byteLength != gltfRuntime.buffers[buf].byteLength) {\r\n                            Tools.Error(\"Buffer named \" + buf + \" is length \" + bufferView.byteLength + \". Expected: \" + buffer.byteLength); // Improve error message\r\n                        }\r\n\r\n                        gltfRuntime.loadedBufferViews[buf] = bufferView;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedBufferCount === gltfRuntime.buffersCount) {\r\n                        onLoad();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading buffer named \" + buf + \" located at \" + buffer.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const buf in gltfRuntime.buffers) {\r\n            hasBuffers = true;\r\n\r\n            const buffer: IGLTFBuffer = gltfRuntime.buffers[buf];\r\n            if (buffer) {\r\n                processBuffer.bind(this, buf, buffer)();\r\n            } else {\r\n                Tools.Error(\"No buffer named: \" + buf);\r\n            }\r\n        }\r\n\r\n        if (!hasBuffers) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    private _createNodes(gltfRuntime: IGLTFRuntime): void {\r\n        let currentScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n        if (currentScene) {\r\n            // Only one scene even if multiple scenes are defined\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        } else {\r\n            // Load all scenes\r\n            for (const thing in gltfRuntime.scenes) {\r\n                currentScene = <IGLTFScene>gltfRuntime.scenes[thing];\r\n\r\n                for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                    traverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class GLTFLoaderExtension {\r\n    private _name: string;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading the runtime\r\n     * Return true to stop further extensions from loading the runtime\r\n     * @param scene\r\n     * @param data\r\n     * @param rootUrl\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading the runtime\r\n     */\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess?: (gltfRuntime: IGLTFRuntime) => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an onverride for creating gltf runtime\r\n     * Return true to stop further extensions from creating the runtime\r\n     * @param gltfRuntime\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from creating the runtime\r\n     */\r\n    public loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading buffers\r\n     * Return true to stop further extensions from loading this buffer\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onProgress\r\n     * @returns true to stop further extensions from loading this buffer\r\n     */\r\n    public loadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading texture buffers\r\n     * Return true to stop further extensions from loading this texture data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture data\r\n     */\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for creating textures\r\n     * Return true to stop further extensions from loading this texture\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param buffer\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture\r\n     */\r\n    public createTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: ArrayBufferView, onSuccess: (texture: Texture) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading shader strings\r\n     * Return true to stop further extensions from loading this shader data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this shader data\r\n     */\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading materials\r\n     * Return true to stop further extensions from loading this material\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this material\r\n     */\r\n    public loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ---------\r\n    // Utilities\r\n    // ---------\r\n\r\n    public static LoadRuntimeAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess?: (gltfRuntime: IGLTFRuntime) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeAsync(scene, data, rootUrl, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    if (!onSuccess) {\r\n                        return;\r\n                    }\r\n                    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeExtensionsAsync(gltfRuntime, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    onSuccess();\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (bufferView: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadTextureAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                if (buffer) {\r\n                    GLTFLoaderExtension._CreateTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderData: string | ArrayBuffer) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _LoadTextureBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: Nullable<ArrayBufferView>) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _CreateTextureAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        buffer: ArrayBufferView,\r\n        onSuccess: (texture: Texture) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.createTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, onSuccess);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _ApplyExtensions(func: (loaderExtension: GLTFLoaderExtension) => boolean, defaultFunc: () => void): void {\r\n        for (const extensionName in GLTFLoader.Extensions) {\r\n            const loaderExtension = GLTFLoader.Extensions[extensionName];\r\n            if (func(loaderExtension)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        defaultFunc();\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF1Loader = () => new GLTFLoader();\r\n","import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport type { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    public override loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void): boolean {\r\n        const extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    public override loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    public override loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void): boolean {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    public override loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void): boolean {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());\r\n","import { GLTFLoaderExtension, GLTFLoaderBase, GLTFLoader } from \"./glTFLoader\";\r\n\r\nimport type { IGLTFRuntime, IGLTFMaterial } from \"./glTFLoaderInterfaces\";\r\n\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\n\r\ninterface IGLTFMaterialsCommonExtensionValues {\r\n    ambient?: number[] | string;\r\n    diffuse?: number[] | string;\r\n    emission?: number[] | string;\r\n    specular?: number[] | string;\r\n    shininess?: number;\r\n    transparency?: number;\r\n}\r\n\r\ninterface IGLTFMaterialsCommonExtension {\r\n    technique: string;\r\n    transparent?: number;\r\n    doubleSided?: boolean;\r\n    values: IGLTFMaterialsCommonExtensionValues;\r\n}\r\n\r\ninterface IGLTFRuntimeCommonExtension {\r\n    lights: { [key: string]: IGLTFLightCommonExtension };\r\n}\r\n\r\ninterface IGLTFLightCommonExtension {\r\n    name: string;\r\n    type: string;\r\n\r\n    ambient?: IGLTFAmbientLightCommonExtension;\r\n    point?: IGLTFPointLightCommonExtension;\r\n    directional?: IGLTFDirectionalLightCommonExtension;\r\n    spot?: IGLTFSpotLightCommonExtension;\r\n}\r\n\r\ninterface IGLTFPointLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\ninterface IGLTFAmbientLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFDirectionalLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFSpotLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    fallOffAngle: number;\r\n    fallOffExponent: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFMaterialsCommonExtension extends GLTFLoaderExtension {\r\n    constructor() {\r\n        super(\"KHR_materials_common\");\r\n    }\r\n\r\n    public override loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime): boolean {\r\n        if (!gltfRuntime.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFRuntimeCommonExtension = gltfRuntime.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        // Create lights\r\n        const lights = extension.lights;\r\n        if (lights) {\r\n            for (const thing in lights) {\r\n                const light: IGLTFLightCommonExtension = lights[thing];\r\n\r\n                switch (light.type) {\r\n                    case \"ambient\": {\r\n                        const ambientLight = new HemisphericLight(light.name, new Vector3(0, 1, 0), gltfRuntime.scene);\r\n                        const ambient = light.ambient;\r\n                        if (ambient) {\r\n                            ambientLight.diffuse = Color3.FromArray(ambient.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"point\": {\r\n                        const pointLight = new PointLight(light.name, new Vector3(10, 10, 10), gltfRuntime.scene);\r\n                        const point = light.point;\r\n                        if (point) {\r\n                            pointLight.diffuse = Color3.FromArray(point.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"directional\": {\r\n                        const dirLight = new DirectionalLight(light.name, new Vector3(0, -1, 0), gltfRuntime.scene);\r\n                        const directional = light.directional;\r\n                        if (directional) {\r\n                            dirLight.diffuse = Color3.FromArray(directional.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"spot\": {\r\n                        const spot = light.spot;\r\n                        if (spot) {\r\n                            const spotLight = new SpotLight(\r\n                                light.name,\r\n                                new Vector3(0, 10, 0),\r\n                                new Vector3(0, -1, 0),\r\n                                spot.fallOffAngle || Math.PI,\r\n                                spot.fallOffExponent || 0.0,\r\n                                gltfRuntime.scene\r\n                            );\r\n                            spotLight.diffuse = Color3.FromArray(spot.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        Tools.Warn('GLTF Material Common extension: light type \"' + light.type + \"” not supported\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material || !material.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFMaterialsCommonExtension = material.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        const standardMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n        standardMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (extension.technique === \"CONSTANT\") {\r\n            standardMaterial.disableLighting = true;\r\n        }\r\n\r\n        standardMaterial.backFaceCulling = extension.doubleSided === undefined ? false : !extension.doubleSided;\r\n        standardMaterial.alpha = extension.values.transparency === undefined ? 1.0 : extension.values.transparency;\r\n        standardMaterial.specularPower = extension.values.shininess === undefined ? 0.0 : extension.values.shininess;\r\n\r\n        // Ambient\r\n        if (typeof extension.values.ambient === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.ambient, standardMaterial, \"ambientTexture\", onError);\r\n        } else {\r\n            standardMaterial.ambientColor = Color3.FromArray(extension.values.ambient || [0, 0, 0]);\r\n        }\r\n\r\n        // Diffuse\r\n        if (typeof extension.values.diffuse === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.diffuse, standardMaterial, \"diffuseTexture\", onError);\r\n        } else {\r\n            standardMaterial.diffuseColor = Color3.FromArray(extension.values.diffuse || [0, 0, 0]);\r\n        }\r\n\r\n        // Emission\r\n        if (typeof extension.values.emission === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.emission, standardMaterial, \"emissiveTexture\", onError);\r\n        } else {\r\n            standardMaterial.emissiveColor = Color3.FromArray(extension.values.emission || [0, 0, 0]);\r\n        }\r\n\r\n        // Specular\r\n        if (typeof extension.values.specular === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.specular, standardMaterial, \"specularTexture\", onError);\r\n        } else {\r\n            standardMaterial.specularColor = Color3.FromArray(extension.values.specular || [0, 0, 0]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _loadTexture(gltfRuntime: IGLTFRuntime, id: string, material: StandardMaterial, propertyPath: string, onError: (message: string) => void): void {\r\n        // Create buffer from texture url\r\n        GLTFLoaderBase.LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                // Create texture from buffer\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, (texture) => ((<any>material)[propertyPath] = texture));\r\n            },\r\n            onError\r\n        );\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFMaterialsCommonExtension());\r\n","import type { GLTFLoader } from \"./glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\r\n\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ninterface IRegisteredGLTFExtension {\r\n    isGLTFExtension: boolean;\r\n    factory: GLTFExtensionFactory;\r\n}\r\n\r\nexport type GLTFExtensionFactory = (loader: GLTFLoader) => IGLTFLoaderExtension | Promise<IGLTFLoaderExtension>;\r\n\r\nconst _registeredGLTFExtensions = new Map<string, IRegisteredGLTFExtension>();\r\n\r\n/**\r\n * All currently registered glTF 2.0 loader extensions.\r\n */\r\nexport const registeredGLTFExtensions: ReadonlyMap<string, Readonly<IRegisteredGLTFExtension>> = _registeredGLTFExtensions;\r\n\r\n/**\r\n * Registers a loader extension.\r\n * @param name The name of the loader extension.\r\n * @param isGLTFExtension If the loader extension is a glTF extension, then it will only be used for glTF files that use the corresponding glTF extension. Otherwise, it will be used for all loaded glTF files.\r\n * @param factory The factory function that creates the loader extension.\r\n */\r\nexport function registerGLTFExtension(name: string, isGLTFExtension: boolean, factory: GLTFExtensionFactory): void {\r\n    if (unregisterGLTFExtension(name)) {\r\n        Logger.Warn(`Extension with the name '${name}' already exists`);\r\n    }\r\n\r\n    _registeredGLTFExtensions.set(name, {\r\n        isGLTFExtension,\r\n        factory,\r\n    });\r\n}\r\n\r\n/**\r\n * Unregisters a loader extension.\r\n * @param name The name of the loader extension.\r\n * @returns A boolean indicating whether the extension has been unregistered\r\n */\r\nexport function unregisterGLTFExtension(name: string): boolean {\r\n    return _registeredGLTFExtensions.delete(name);\r\n}\r\n","import type { IndicesArray, Nullable, TypedArray, TypedArrayConstructor } from \"core/types\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport { Quaternion, Vector3, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimationKey } from \"core/Animations/animationKey\";\r\nimport { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { ITextureCreationOptions } from \"core/Materials/Textures/texture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Buffer, VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { InstancedMesh } from \"core/Meshes/instancedMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport {\r\n    AnimationChannelTargetPath,\r\n    AnimationSamplerInterpolation,\r\n    AccessorType,\r\n    CameraType,\r\n    AccessorComponentType,\r\n    MaterialAlphaMode,\r\n    TextureMinFilter,\r\n    TextureWrapMode,\r\n    TextureMagFilter,\r\n    MeshPrimitiveMode,\r\n} from \"babylonjs-gltf2interface\";\r\nimport type {\r\n    IGLTF,\r\n    ISampler,\r\n    INode,\r\n    IScene,\r\n    IMesh,\r\n    IAccessor,\r\n    ISkin,\r\n    ICamera,\r\n    IAnimation,\r\n    IBuffer,\r\n    IBufferView,\r\n    IMaterialPbrMetallicRoughness,\r\n    IMaterial,\r\n    ITextureInfo,\r\n    ITexture,\r\n    IImage,\r\n    IMeshPrimitive,\r\n    IArrayItem,\r\n    _ISamplerData,\r\n    IAnimationChannel,\r\n    IAnimationSampler,\r\n    _IAnimationSamplerData,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader, GLTFLoaderState, GLTFLoaderCoordinateSystemMode, GLTFLoaderAnimationStartMode } from \"../glTFFileLoader\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DecodeBase64UrlToBinary, IsBase64DataUrl, LoadFileError } from \"core/Misc/fileTools\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Light } from \"core/Lights/light\";\r\nimport { BoundingInfo } from \"core/Culling/boundingInfo\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\nimport type { AnimationPropertyInfo } from \"./glTFLoaderAnimation\";\r\nimport type { IObjectInfo } from \"core/ObjectModel/objectModelInterfaces\";\r\nimport { registeredGLTFExtensions, registerGLTFExtension, unregisterGLTFExtension } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { GLTFExtensionFactory } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { IInterpolationPropertyInfo } from \"core/FlowGraph/typeDefinitions\";\r\nimport { GetMappingForKey } from \"./Extensions/objectModelMapping\";\r\nimport { deepMerge } from \"core/Misc/deepMerger\";\r\nimport { GetTypedArrayConstructor } from \"core/Buffers/bufferUtils\";\r\n\r\nexport { GLTFFileLoader };\r\n\r\ninterface ILoaderProperty extends IProperty {\r\n    _activeLoaderExtensionFunctions: {\r\n        [id: string]: boolean;\r\n    };\r\n}\r\n\r\ninterface IWithMetadata {\r\n    metadata: any;\r\n    _internalMetadata: any;\r\n}\r\n\r\n/**\r\n * Helper class for working with arrays when loading the glTF asset\r\n */\r\nexport class ArrayItem {\r\n    /**\r\n     * Gets an item from the given array.\r\n     * @param context The context when loading the asset\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item\r\n     */\r\n    public static Get<T>(context: string, array: ArrayLike<T> | undefined, index: number | undefined): T {\r\n        if (!array || index == undefined || !array[index]) {\r\n            throw new Error(`${context}: Failed to find index (${index})`);\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Gets an item from the given array or returns null if not available.\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item or null\r\n     */\r\n    public static TryGet<T>(array: ArrayLike<T> | undefined, index: number | undefined): Nullable<T> {\r\n        if (!array || index == undefined || !array[index]) {\r\n            return null;\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Assign an `index` field to each item of the given array.\r\n     * @param array The array of items\r\n     */\r\n    public static Assign(array?: IArrayItem[]): void {\r\n        if (array) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                array[index].index = index;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IAnimationTargetInfo {\r\n    /** @internal */\r\n    target: unknown;\r\n\r\n    /** @internal */\r\n    properties: Array<AnimationPropertyInfo>;\r\n}\r\n\r\n/** @internal */\r\nexport function LoadBoundingInfoFromPositionAccessor(accessor: IAccessor): Nullable<BoundingInfo> {\r\n    if (accessor.min && accessor.max) {\r\n        const minArray = accessor.min as [number, number, number];\r\n        const maxArray = accessor.max as [number, number, number];\r\n        const minVector = TmpVectors.Vector3[0].copyFromFloats(minArray[0], minArray[1], minArray[2]);\r\n        const maxVector = TmpVectors.Vector3[1].copyFromFloats(maxArray[0], maxArray[1], maxArray[2]);\r\n        if (accessor.normalized && accessor.componentType !== AccessorComponentType.FLOAT) {\r\n            let divider = 1;\r\n            switch (accessor.componentType) {\r\n                case AccessorComponentType.BYTE:\r\n                    divider = 127.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_BYTE:\r\n                    divider = 255.0;\r\n                    break;\r\n                case AccessorComponentType.SHORT:\r\n                    divider = 32767.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_SHORT:\r\n                    divider = 65535.0;\r\n                    break;\r\n            }\r\n            const oneOverDivider = 1 / divider;\r\n            minVector.scaleInPlace(oneOverDivider);\r\n            maxVector.scaleInPlace(oneOverDivider);\r\n        }\r\n        return new BoundingInfo(minVector, maxVector);\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * The glTF 2.0 loader\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    /** @internal */\r\n    public readonly _completePromises = new Array<Promise<unknown>>();\r\n\r\n    /** @internal */\r\n    public _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    /** Storage */\r\n    public _babylonLights: Light[] = [];\r\n\r\n    /** @internal */\r\n    public _disableInstancedMesh = 0;\r\n\r\n    /** @internal */\r\n    public _allMaterialsDirtyRequired = false;\r\n\r\n    /** @internal */\r\n    public _skipStartAnimationStep = false;\r\n\r\n    private readonly _parent: GLTFFileLoader;\r\n    private readonly _extensions = new Array<IGLTFLoaderExtension>();\r\n    private _disposed = false;\r\n    private _rootUrl: Nullable<string> = null;\r\n    private _fileName: Nullable<string> = null;\r\n    private _uniqueRootUrl: Nullable<string> = null;\r\n    private _gltf: IGLTF;\r\n    private _bin: Nullable<IDataBuffer> = null;\r\n    private _babylonScene: Scene;\r\n    private _rootBabylonMesh: Nullable<TransformNode> = null;\r\n    private _defaultBabylonMaterialData: { [drawMode: number]: Material } = {};\r\n    private readonly _postSceneLoadActions = new Array<() => void>();\r\n\r\n    /**\r\n     * The default glTF sampler.\r\n     */\r\n    public static readonly DefaultSampler: ISampler = { index: -1 };\r\n\r\n    /**\r\n     * Registers a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @param factory The factory function that creates the loader extension.\r\n     * @deprecated Please use registerGLTFExtension instead.\r\n     */\r\n    public static RegisterExtension(name: string, factory: GLTFExtensionFactory): void {\r\n        registerGLTFExtension(name, false, factory);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @returns A boolean indicating whether the extension has been unregistered\r\n     * @deprecated Please use unregisterGLTFExtension instead.\r\n     */\r\n    public static UnregisterExtension(name: string): boolean {\r\n        return unregisterGLTFExtension(name);\r\n    }\r\n\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    public get gltf(): IGLTF {\r\n        if (!this._gltf) {\r\n            throw new Error(\"glTF JSON is not available\");\r\n        }\r\n\r\n        return this._gltf;\r\n    }\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    public get bin(): Nullable<IDataBuffer> {\r\n        return this._bin;\r\n    }\r\n\r\n    /**\r\n     * The parent file loader.\r\n     */\r\n    public get parent(): GLTFFileLoader {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * The Babylon scene when loading the asset.\r\n     */\r\n    public get babylonScene(): Scene {\r\n        if (!this._babylonScene) {\r\n            throw new Error(\"Scene is not available\");\r\n        }\r\n\r\n        return this._babylonScene;\r\n    }\r\n\r\n    /**\r\n     * The root Babylon node when loading the asset.\r\n     */\r\n    public get rootBabylonMesh(): Nullable<TransformNode> {\r\n        return this._rootBabylonMesh;\r\n    }\r\n\r\n    /**\r\n     * The root url when loading the asset.\r\n     */\r\n    public get rootUrl(): Nullable<string> {\r\n        return this._rootUrl;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(parent: GLTFFileLoader) {\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._disposed = true;\r\n\r\n        this._completePromises.length = 0;\r\n\r\n        this._extensions.forEach((extension) => extension.dispose && extension.dispose());\r\n        this._extensions.length = 0;\r\n\r\n        (this._gltf as Nullable<IGLTF>) = null; // TODO\r\n        this._bin = null;\r\n        (this._babylonScene as Nullable<Scene>) = null; // TODO\r\n        this._rootBabylonMesh = null;\r\n        this._defaultBabylonMaterialData = {};\r\n        this._postSceneLoadActions.length = 0;\r\n\r\n        this._parent.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName = \"\"\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return Promise.resolve().then(() => {\r\n            this._babylonScene = scene;\r\n            this._assetContainer = container;\r\n            this._loadData(data);\r\n\r\n            let nodes: Nullable<Array<number>> = null;\r\n\r\n            if (meshesNames) {\r\n                const nodeMap: { [name: string]: number } = {};\r\n                if (this._gltf.nodes) {\r\n                    for (const node of this._gltf.nodes) {\r\n                        if (node.name) {\r\n                            nodeMap[node.name] = node.index;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const names = meshesNames instanceof Array ? meshesNames : [meshesNames];\r\n                nodes = names.map((name) => {\r\n                    const node = nodeMap[name];\r\n                    if (node === undefined) {\r\n                        throw new Error(`Failed to find node '${name}'`);\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n            }\r\n\r\n            return this._loadAsync(rootUrl, fileName, nodes, () => {\r\n                return {\r\n                    meshes: this._getMeshes(),\r\n                    particleSystems: [],\r\n                    skeletons: this._getSkeletons(),\r\n                    animationGroups: this._getAnimationGroups(),\r\n                    lights: this._babylonLights,\r\n                    transformNodes: this._getTransformNodes(),\r\n                    geometries: this._getGeometries(),\r\n                    spriteManagers: [],\r\n                };\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName = \"\"): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this._babylonScene = scene;\r\n            this._loadData(data);\r\n            return this._loadAsync(rootUrl, fileName, null, () => undefined);\r\n        });\r\n    }\r\n\r\n    private _loadAsync<T>(rootUrl: string, fileName: string, nodes: Nullable<Array<number>>, resultFunc: () => T): Promise<T> {\r\n        return Promise.resolve()\r\n            .then(async () => {\r\n                this._rootUrl = rootUrl;\r\n                this._uniqueRootUrl = !rootUrl.startsWith(\"file:\") && fileName ? rootUrl : `${rootUrl}${Date.now()}/`;\r\n                this._fileName = fileName;\r\n                this._allMaterialsDirtyRequired = false;\r\n\r\n                await this._loadExtensionsAsync();\r\n\r\n                const loadingToReadyCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.READY]}`;\r\n                const loadingToCompleteCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.COMPLETE]}`;\r\n\r\n                this._parent._startPerformanceCounter(loadingToReadyCounterName);\r\n                this._parent._startPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                this._parent._setState(GLTFLoaderState.LOADING);\r\n                this._extensionsOnLoading();\r\n\r\n                const promises = new Array<Promise<unknown>>();\r\n\r\n                // Block the marking of materials dirty until the scene is loaded.\r\n                const oldBlockMaterialDirtyMechanism = this._babylonScene.blockMaterialDirtyMechanism;\r\n                this._babylonScene.blockMaterialDirtyMechanism = true;\r\n\r\n                if (!this.parent.loadOnlyMaterials) {\r\n                    if (nodes) {\r\n                        promises.push(this.loadSceneAsync(\"/nodes\", { nodes: nodes, index: -1 }));\r\n                    } else if (this._gltf.scene != undefined || (this._gltf.scenes && this._gltf.scenes[0])) {\r\n                        const scene = ArrayItem.Get(`/scene`, this._gltf.scenes, this._gltf.scene || 0);\r\n                        promises.push(this.loadSceneAsync(`/scenes/${scene.index}`, scene));\r\n                    }\r\n                }\r\n\r\n                if (!this.parent.skipMaterials && this.parent.loadAllMaterials && this._gltf.materials) {\r\n                    for (let m = 0; m < this._gltf.materials.length; ++m) {\r\n                        const material = this._gltf.materials[m];\r\n                        const context = \"/materials/\" + m;\r\n                        const babylonDrawMode = Material.TriangleFillMode;\r\n\r\n                        promises.push(this._loadMaterialAsync(context, material, null, babylonDrawMode, () => {}));\r\n                    }\r\n                }\r\n\r\n                // Restore the blocking of material dirty.\r\n                if (this._allMaterialsDirtyRequired) {\r\n                    // This can happen if we add a light for instance as it will impact the whole scene.\r\n                    // This automatically resets everything if needed.\r\n                    this._babylonScene.blockMaterialDirtyMechanism = oldBlockMaterialDirtyMechanism;\r\n                } else {\r\n                    // By default a newly created material is dirty so there is no need to flag the full scene as dirty.\r\n                    // For perf reasons, we then bypass blockMaterialDirtyMechanism as this would \"dirty\" the entire scene.\r\n                    this._babylonScene._forceBlockMaterialDirtyMechanism(oldBlockMaterialDirtyMechanism);\r\n                }\r\n\r\n                if (this._parent.compileMaterials) {\r\n                    promises.push(this._compileMaterialsAsync());\r\n                }\r\n\r\n                if (this._parent.compileShadowGenerators) {\r\n                    promises.push(this._compileShadowGeneratorsAsync());\r\n                }\r\n\r\n                const resultPromise = Promise.all(promises).then(() => {\r\n                    if (this._rootBabylonMesh && this._rootBabylonMesh !== this._parent.customRootNode) {\r\n                        this._rootBabylonMesh.setEnabled(true);\r\n                    }\r\n\r\n                    // Making sure we enable enough lights to have all lights together\r\n                    for (const material of this._babylonScene.materials) {\r\n                        const mat = material as any;\r\n\r\n                        if (mat.maxSimultaneousLights !== undefined) {\r\n                            mat.maxSimultaneousLights = Math.max(mat.maxSimultaneousLights, this._babylonScene.lights.length);\r\n                        }\r\n                    }\r\n\r\n                    this._extensionsOnReady();\r\n                    this._parent._setState(GLTFLoaderState.READY);\r\n                    if (!this._skipStartAnimationStep) {\r\n                        this._startAnimations();\r\n                    }\r\n\r\n                    return resultFunc();\r\n                });\r\n\r\n                return resultPromise.then((result) => {\r\n                    this._parent._endPerformanceCounter(loadingToReadyCounterName);\r\n\r\n                    Tools.SetImmediate(() => {\r\n                        if (!this._disposed) {\r\n                            Promise.all(this._completePromises).then(\r\n                                () => {\r\n                                    this._parent._endPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                                    this._parent._setState(GLTFLoaderState.COMPLETE);\r\n\r\n                                    this._parent.onCompleteObservable.notifyObservers(undefined);\r\n                                    this._parent.onCompleteObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                },\r\n                                (error) => {\r\n                                    this._parent.onErrorObservable.notifyObservers(error);\r\n                                    this._parent.onErrorObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n\r\n                    return result;\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                if (!this._disposed) {\r\n                    this._parent.onErrorObservable.notifyObservers(error);\r\n                    this._parent.onErrorObservable.clear();\r\n\r\n                    this.dispose();\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    private _loadData(data: IGLTFLoaderData): void {\r\n        this._gltf = data.json as IGLTF;\r\n        this._setupData();\r\n\r\n        if (data.bin) {\r\n            const buffers = this._gltf.buffers;\r\n            if (buffers && buffers[0] && !buffers[0].uri) {\r\n                const binaryBuffer = buffers[0];\r\n                if (binaryBuffer.byteLength < data.bin.byteLength - 3 || binaryBuffer.byteLength > data.bin.byteLength) {\r\n                    Logger.Warn(`Binary buffer length (${binaryBuffer.byteLength}) from JSON does not match chunk length (${data.bin.byteLength})`);\r\n                }\r\n\r\n                this._bin = data.bin;\r\n            } else {\r\n                Logger.Warn(\"Unexpected BIN chunk\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setupData(): void {\r\n        ArrayItem.Assign(this._gltf.accessors);\r\n        ArrayItem.Assign(this._gltf.animations);\r\n        ArrayItem.Assign(this._gltf.buffers);\r\n        ArrayItem.Assign(this._gltf.bufferViews);\r\n        ArrayItem.Assign(this._gltf.cameras);\r\n        ArrayItem.Assign(this._gltf.images);\r\n        ArrayItem.Assign(this._gltf.materials);\r\n        ArrayItem.Assign(this._gltf.meshes);\r\n        ArrayItem.Assign(this._gltf.nodes);\r\n        ArrayItem.Assign(this._gltf.samplers);\r\n        ArrayItem.Assign(this._gltf.scenes);\r\n        ArrayItem.Assign(this._gltf.skins);\r\n        ArrayItem.Assign(this._gltf.textures);\r\n\r\n        if (this._gltf.nodes) {\r\n            const nodeParents: { [index: number]: number } = {};\r\n            for (const node of this._gltf.nodes) {\r\n                if (node.children) {\r\n                    for (const index of node.children) {\r\n                        nodeParents[index] = node.index;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rootNode = this._createRootNode();\r\n            for (const node of this._gltf.nodes) {\r\n                const parentIndex = nodeParents[node.index];\r\n                node.parent = parentIndex === undefined ? rootNode : this._gltf.nodes[parentIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _loadExtensionsAsync() {\r\n        const extensionPromises: Promise<IGLTFLoaderExtension>[] = [];\r\n\r\n        registeredGLTFExtensions.forEach((registeredExtension, name) => {\r\n            // Don't load explicitly disabled extensions.\r\n            if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                // But warn if the disabled extension is used by the model.\r\n                if (registeredExtension.isGLTFExtension && this.isExtensionUsed(name)) {\r\n                    Logger.Warn(`Extension ${name} is used but has been explicitly disabled.`);\r\n                }\r\n            }\r\n            // Load loader extensions that are not a glTF extension, as well as extensions that are glTF extensions and are used by the model.\r\n            else if (!registeredExtension.isGLTFExtension || this.isExtensionUsed(name)) {\r\n                extensionPromises.push(\r\n                    (async () => {\r\n                        const extension = await registeredExtension.factory(this);\r\n                        if (extension.name !== name) {\r\n                            Logger.Warn(`The name of the glTF loader extension instance does not match the registered name: ${extension.name} !== ${name}`);\r\n                        }\r\n\r\n                        this._parent.onExtensionLoadedObservable.notifyObservers(extension);\r\n                        return extension;\r\n                    })()\r\n                );\r\n            }\r\n        });\r\n\r\n        this._extensions.push(...(await Promise.all(extensionPromises)));\r\n\r\n        this._extensions.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));\r\n        this._parent.onExtensionLoadedObservable.clear();\r\n\r\n        if (this._gltf.extensionsRequired) {\r\n            for (const name of this._gltf.extensionsRequired) {\r\n                const available = this._extensions.some((extension) => extension.name === name && extension.enabled);\r\n                if (!available) {\r\n                    if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                        throw new Error(`Required extension ${name} is disabled`);\r\n                    }\r\n                    throw new Error(`Required extension ${name} is not available`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createRootNode(): INode {\r\n        if (this._parent.customRootNode !== undefined) {\r\n            this._rootBabylonMesh = this._parent.customRootNode;\r\n            return {\r\n                // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                _babylonTransformNode: this._rootBabylonMesh === null ? undefined : this._rootBabylonMesh,\r\n                index: -1,\r\n            };\r\n        }\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const rootMesh = new Mesh(\"__root__\", this._babylonScene);\r\n        this._rootBabylonMesh = rootMesh;\r\n        this._rootBabylonMesh._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        this._rootBabylonMesh.setEnabled(false);\r\n\r\n        const rootNode: INode = {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            _babylonTransformNode: this._rootBabylonMesh,\r\n            index: -1,\r\n        };\r\n\r\n        switch (this._parent.coordinateSystemMode) {\r\n            case GLTFLoaderCoordinateSystemMode.AUTO: {\r\n                if (!this._babylonScene.useRightHandedSystem) {\r\n                    rootNode.rotation = [0, 1, 0, 0];\r\n                    rootNode.scale = [1, 1, -1];\r\n                    GLTFLoader._LoadTransform(rootNode, this._rootBabylonMesh);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderCoordinateSystemMode.FORCE_RIGHT_HANDED: {\r\n                this._babylonScene.useRightHandedSystem = true;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid coordinate system mode (${this._parent.coordinateSystemMode})`);\r\n            }\r\n        }\r\n\r\n        this._parent.onMeshLoadedObservable.notifyObservers(rootMesh);\r\n        return rootNode;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF scene.\r\n     * @param context The context when loading the asset\r\n     * @param scene The glTF scene property\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadSceneAsync(context, scene);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${scene.name || \"\"}`);\r\n\r\n        if (scene.nodes) {\r\n            for (const index of scene.nodes) {\r\n                const node = ArrayItem.Get(`${context}/nodes/${index}`, this._gltf.nodes, index);\r\n                promises.push(\r\n                    this.loadNodeAsync(`/nodes/${node.index}`, node, (babylonMesh) => {\r\n                        babylonMesh.parent = this._rootBabylonMesh;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        for (const action of this._postSceneLoadActions) {\r\n            action();\r\n        }\r\n\r\n        promises.push(this._loadAnimationsAsync());\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private _forEachPrimitive(node: INode, callback: (babylonMesh: AbstractMesh) => void): void {\r\n        if (node._primitiveBabylonMeshes) {\r\n            for (const babylonMesh of node._primitiveBabylonMeshes) {\r\n                callback(babylonMesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getGeometries(): Geometry[] {\r\n        const geometries: Geometry[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    const geometry = (babylonMesh as Mesh).geometry;\r\n                    if (geometry && geometries.indexOf(geometry) === -1) {\r\n                        geometries.push(geometry);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return geometries;\r\n    }\r\n\r\n    private _getMeshes(): AbstractMesh[] {\r\n        const meshes: AbstractMesh[] = [];\r\n\r\n        // Root mesh is always first, if available.\r\n        if (this._rootBabylonMesh instanceof AbstractMesh) {\r\n            meshes.push(this._rootBabylonMesh);\r\n        }\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    meshes.push(babylonMesh);\r\n                });\r\n            }\r\n        }\r\n\r\n        return meshes;\r\n    }\r\n\r\n    private _getTransformNodes(): TransformNode[] {\r\n        const transformNodes: TransformNode[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                if (node._babylonTransformNode && node._babylonTransformNode.getClassName() === \"TransformNode\") {\r\n                    transformNodes.push(node._babylonTransformNode);\r\n                }\r\n                if (node._babylonTransformNodeForSkin) {\r\n                    transformNodes.push(node._babylonTransformNodeForSkin);\r\n                }\r\n            }\r\n        }\r\n\r\n        return transformNodes;\r\n    }\r\n\r\n    private _getSkeletons(): Skeleton[] {\r\n        const skeletons: Skeleton[] = [];\r\n\r\n        const skins = this._gltf.skins;\r\n        if (skins) {\r\n            for (const skin of skins) {\r\n                if (skin._data) {\r\n                    skeletons.push(skin._data.babylonSkeleton);\r\n                }\r\n            }\r\n        }\r\n\r\n        return skeletons;\r\n    }\r\n\r\n    private _getAnimationGroups(): AnimationGroup[] {\r\n        const animationGroups: AnimationGroup[] = [];\r\n\r\n        const animations = this._gltf.animations;\r\n        if (animations) {\r\n            for (const animation of animations) {\r\n                if (animation._babylonAnimationGroup) {\r\n                    animationGroups.push(animation._babylonAnimationGroup);\r\n                }\r\n            }\r\n        }\r\n\r\n        return animationGroups;\r\n    }\r\n\r\n    private _startAnimations(): void {\r\n        switch (this._parent.animationStartMode) {\r\n            case GLTFLoaderAnimationStartMode.NONE: {\r\n                // do nothing\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.FIRST: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                if (babylonAnimationGroups.length !== 0) {\r\n                    babylonAnimationGroups[0].start(true);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.ALL: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                for (const babylonAnimationGroup of babylonAnimationGroups) {\r\n                    babylonAnimationGroup.start(true);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                Logger.Error(`Invalid animation start mode (${this._parent.animationStartMode})`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF node.\r\n     * @param context The context when loading the asset\r\n     * @param node The glTF node property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon mesh when the load is complete\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void = () => {}): Promise<TransformNode> {\r\n        const extensionPromise = this._extensionsLoadNodeAsync(context, node, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (node._babylonTransformNode) {\r\n            throw new Error(`${context}: Invalid recursive node hierarchy`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${node.name || \"\"}`);\r\n\r\n        const loadNode = (babylonTransformNode: TransformNode) => {\r\n            GLTFLoader.AddPointerMetadata(babylonTransformNode, context);\r\n            GLTFLoader._LoadTransform(node, babylonTransformNode);\r\n\r\n            if (node.camera != undefined) {\r\n                const camera = ArrayItem.Get(`${context}/camera`, this._gltf.cameras, node.camera);\r\n                promises.push(\r\n                    this.loadCameraAsync(`/cameras/${camera.index}`, camera, (babylonCamera) => {\r\n                        babylonCamera.parent = babylonTransformNode;\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (node.children) {\r\n                for (const index of node.children) {\r\n                    const childNode = ArrayItem.Get(`${context}/children/${index}`, this._gltf.nodes, index);\r\n                    promises.push(\r\n                        this.loadNodeAsync(`/nodes/${childNode.index}`, childNode, (childBabylonMesh) => {\r\n                            childBabylonMesh.parent = babylonTransformNode;\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n\r\n            assign(babylonTransformNode);\r\n        };\r\n\r\n        const hasMesh = node.mesh != undefined;\r\n        const hasSkin = this._parent.loadSkins && node.skin != undefined;\r\n\r\n        if (!hasMesh || hasSkin) {\r\n            const nodeName = node.name || `node${node.index}`;\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const transformNode = new TransformNode(nodeName, this._babylonScene);\r\n            transformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            if (node.mesh == undefined) {\r\n                node._babylonTransformNode = transformNode;\r\n            } else {\r\n                node._babylonTransformNodeForSkin = transformNode;\r\n            }\r\n            loadNode(transformNode);\r\n        }\r\n\r\n        if (hasMesh) {\r\n            if (hasSkin) {\r\n                // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n                // This code path will place the skinned mesh as a sibling of the skeleton root node without loading the\r\n                // transform, which effectively ignores the transform of the skinned mesh, as per spec.\r\n\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(\r\n                    this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, (babylonTransformNode) => {\r\n                        const babylonTransformNodeForSkin = node._babylonTransformNodeForSkin!;\r\n\r\n                        // Merge the metadata from the skin node to the skinned mesh in case a loader extension added metadata.\r\n                        babylonTransformNode.metadata = deepMerge(babylonTransformNodeForSkin.metadata, babylonTransformNode.metadata || {});\r\n\r\n                        const skin = ArrayItem.Get(`${context}/skin`, this._gltf.skins, node.skin);\r\n                        promises.push(\r\n                            this._loadSkinAsync(`/skins/${skin.index}`, node, skin, (babylonSkeleton) => {\r\n                                this._forEachPrimitive(node, (babylonMesh) => {\r\n                                    babylonMesh.skeleton = babylonSkeleton;\r\n                                });\r\n\r\n                                // Wait until all the nodes are parented before parenting the skinned mesh.\r\n                                this._postSceneLoadActions.push(() => {\r\n                                    if (skin.skeleton != undefined) {\r\n                                        // Place the skinned mesh node as a sibling of the skeleton root node.\r\n                                        // Handle special case when the parent of the skeleton root is the skinned mesh.\r\n                                        const parentNode = ArrayItem.Get(`/skins/${skin.index}/skeleton`, this._gltf.nodes, skin.skeleton).parent!;\r\n                                        if (node.index === parentNode.index) {\r\n                                            babylonTransformNode.parent = babylonTransformNodeForSkin.parent;\r\n                                        } else {\r\n                                            babylonTransformNode.parent = parentNode._babylonTransformNode!;\r\n                                        }\r\n                                    } else {\r\n                                        babylonTransformNode.parent = this._rootBabylonMesh;\r\n                                    }\r\n\r\n                                    this._parent.onSkinLoadedObservable.notifyObservers({ node: babylonTransformNodeForSkin, skinnedNode: babylonTransformNode });\r\n                                });\r\n                            })\r\n                        );\r\n                    })\r\n                );\r\n            } else {\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, loadNode));\r\n            }\r\n        }\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._forEachPrimitive(node, (babylonMesh) => {\r\n                const asMesh = babylonMesh as Mesh;\r\n                if (!asMesh.isAnInstance && asMesh.geometry && asMesh.geometry.useBoundingInfoFromGeometry) {\r\n                    // simply apply the world matrices to the bounding info - the extends are already ok\r\n                    babylonMesh._updateBoundingInfo();\r\n                } else {\r\n                    babylonMesh.refreshBoundingInfo(true, true);\r\n                }\r\n            });\r\n\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    private _loadMeshAsync(context: string, node: INode, mesh: IMesh, assign: (babylonTransformNode: TransformNode) => void): Promise<TransformNode> {\r\n        const primitives = mesh.primitives;\r\n        if (!primitives || !primitives.length) {\r\n            throw new Error(`${context}: Primitives are missing`);\r\n        }\r\n\r\n        if (primitives[0].index == undefined) {\r\n            ArrayItem.Assign(primitives);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${mesh.name || \"\"}`);\r\n\r\n        const name = node.name || `node${node.index}`;\r\n\r\n        if (primitives.length === 1) {\r\n            const primitive = mesh.primitives[0];\r\n            promises.push(\r\n                this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, name, node, mesh, primitive, (babylonMesh) => {\r\n                    node._babylonTransformNode = babylonMesh;\r\n                    node._primitiveBabylonMeshes = [babylonMesh];\r\n                })\r\n            );\r\n        } else {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            node._babylonTransformNode = new TransformNode(name, this._babylonScene);\r\n            node._babylonTransformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            node._primitiveBabylonMeshes = [];\r\n            for (const primitive of primitives) {\r\n                promises.push(\r\n                    this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, `${name}_primitive${primitive.index}`, node, mesh, primitive, (babylonMesh) => {\r\n                        babylonMesh.parent = node._babylonTransformNode!;\r\n                        node._primitiveBabylonMeshes!.push(babylonMesh);\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        assign(node._babylonTransformNode!);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal Define this method to modify the default behavior when loading data for mesh primitives.\r\n     * @param context The context when loading the asset\r\n     * @param name The mesh name when loading the asset\r\n     * @param node The glTF node when loading the asset\r\n     * @param mesh The glTF mesh when loading the asset\r\n     * @param primitive The glTF mesh primitive property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded mesh when the load is complete or null if not handled\r\n     */\r\n    public _loadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Promise<AbstractMesh> {\r\n        const extensionPromise = this._extensionsLoadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        const shouldInstance = this._disableInstancedMesh === 0 && this._parent.createInstances && node.skin == undefined && !mesh.primitives[0].targets;\r\n\r\n        let babylonAbstractMesh: AbstractMesh;\r\n        let promise: Promise<unknown>;\r\n\r\n        if (shouldInstance && primitive._instanceData) {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            babylonAbstractMesh = primitive._instanceData.babylonSourceMesh.createInstance(name) as InstancedMesh;\r\n            babylonAbstractMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            promise = primitive._instanceData.promise;\r\n        } else {\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonMesh = new Mesh(name, this._babylonScene);\r\n            babylonMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            babylonMesh.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n\r\n            this._createMorphTargets(context, node, mesh, primitive, babylonMesh);\r\n            promises.push(\r\n                this._loadVertexDataAsync(context, primitive, babylonMesh).then((babylonGeometry) => {\r\n                    return this._loadMorphTargetsAsync(context, primitive, babylonMesh, babylonGeometry).then(() => {\r\n                        if (this._disposed) {\r\n                            return;\r\n                        }\r\n\r\n                        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n                        babylonGeometry.applyToMesh(babylonMesh);\r\n                        babylonGeometry._parentContainer = this._assetContainer;\r\n                        this._babylonScene._blockEntityCollection = false;\r\n                    });\r\n                })\r\n            );\r\n\r\n            const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\r\n            if (primitive.material == undefined) {\r\n                let babylonMaterial = this._defaultBabylonMaterialData[babylonDrawMode];\r\n                if (!babylonMaterial) {\r\n                    babylonMaterial = this._createDefaultMaterial(\"__GLTFLoader._default\", babylonDrawMode);\r\n                    this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n                    this._defaultBabylonMaterialData[babylonDrawMode] = babylonMaterial;\r\n                }\r\n                babylonMesh.material = babylonMaterial;\r\n            } else if (!this.parent.skipMaterials) {\r\n                const material = ArrayItem.Get(`${context}/material`, this._gltf.materials, primitive.material);\r\n                promises.push(\r\n                    this._loadMaterialAsync(`/materials/${material.index}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                        babylonMesh.material = babylonMaterial;\r\n                    })\r\n                );\r\n            }\r\n\r\n            promise = Promise.all(promises);\r\n\r\n            if (shouldInstance) {\r\n                primitive._instanceData = {\r\n                    babylonSourceMesh: babylonMesh,\r\n                    promise: promise,\r\n                };\r\n            }\r\n\r\n            babylonAbstractMesh = babylonMesh;\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonAbstractMesh, context);\r\n        this._parent.onMeshLoadedObservable.notifyObservers(babylonAbstractMesh);\r\n        assign(babylonAbstractMesh);\r\n\r\n        this.logClose();\r\n\r\n        return promise.then(() => {\r\n            return babylonAbstractMesh;\r\n        });\r\n    }\r\n\r\n    private _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Promise<Geometry> {\r\n        const extensionPromise = this._extensionsLoadVertexDataAsync(context, primitive, babylonMesh);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const attributes = primitive.attributes;\r\n        if (!attributes) {\r\n            throw new Error(`${context}: Attributes are missing`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const babylonGeometry = new Geometry(babylonMesh.name, this._babylonScene);\r\n\r\n        if (primitive.indices == undefined) {\r\n            babylonMesh.isUnIndexed = true;\r\n        } else {\r\n            const accessor = ArrayItem.Get(`${context}/indices`, this._gltf.accessors, primitive.indices);\r\n            promises.push(\r\n                this._loadIndicesAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    babylonGeometry.setIndices(data);\r\n                })\r\n            );\r\n        }\r\n\r\n        const loadAttribute = (name: string, kind: string, callback?: (accessor: IAccessor) => void) => {\r\n            if (attributes[name] == undefined) {\r\n                return;\r\n            }\r\n\r\n            babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n            if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                babylonMesh._delayInfo.push(kind);\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/attributes/${name}`, this._gltf.accessors, attributes[name]);\r\n            promises.push(\r\n                this._loadVertexAccessorAsync(`/accessors/${accessor.index}`, accessor, kind).then((babylonVertexBuffer) => {\r\n                    if (babylonVertexBuffer.getKind() === VertexBuffer.PositionKind && !this.parent.alwaysComputeBoundingBox && !babylonMesh.skeleton) {\r\n                        const babylonBoundingInfo = LoadBoundingInfoFromPositionAccessor(accessor);\r\n                        if (babylonBoundingInfo) {\r\n                            babylonGeometry._boundingInfo = babylonBoundingInfo;\r\n                            babylonGeometry.useBoundingInfoFromGeometry = true;\r\n                        }\r\n                    }\r\n                    babylonGeometry.setVerticesBuffer(babylonVertexBuffer, accessor.count);\r\n                })\r\n            );\r\n\r\n            if (kind == VertexBuffer.MatricesIndicesExtraKind) {\r\n                babylonMesh.numBoneInfluencers = 8;\r\n            }\r\n\r\n            if (callback) {\r\n                callback(accessor);\r\n            }\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n        loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n        loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n        loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n        loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n        loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n        loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n        loadAttribute(\"JOINTS_1\", VertexBuffer.MatricesIndicesExtraKind);\r\n        loadAttribute(\"WEIGHTS_1\", VertexBuffer.MatricesWeightsExtraKind);\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (accessor) => {\r\n            if (accessor.type === AccessorType.VEC4) {\r\n                babylonMesh.hasVertexAlpha = true;\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonGeometry;\r\n        });\r\n    }\r\n\r\n    private _createMorphTargets(context: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, babylonMesh: Mesh): void {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return;\r\n        }\r\n\r\n        if (node._numMorphTargets == undefined) {\r\n            node._numMorphTargets = primitive.targets.length;\r\n        } else if (primitive.targets.length !== node._numMorphTargets) {\r\n            throw new Error(`${context}: Primitives do not have the same number of targets`);\r\n        }\r\n\r\n        const targetNames = mesh.extras ? mesh.extras.targetNames : null;\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        babylonMesh.morphTargetManager = new MorphTargetManager(this._babylonScene);\r\n        babylonMesh.morphTargetManager._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        babylonMesh.morphTargetManager.areUpdatesFrozen = true;\r\n\r\n        for (let index = 0; index < primitive.targets.length; index++) {\r\n            const weight = node.weights ? node.weights[index] : mesh.weights ? mesh.weights[index] : 0;\r\n            const name = targetNames ? targetNames[index] : `morphTarget${index}`;\r\n            babylonMesh.morphTargetManager.addTarget(new MorphTarget(name, weight, babylonMesh.getScene()));\r\n            // TODO: tell the target whether it has positions, normals, tangents\r\n        }\r\n    }\r\n\r\n    private _loadMorphTargetsAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh, babylonGeometry: Geometry): Promise<void> {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const morphTargetManager = babylonMesh.morphTargetManager!;\r\n        for (let index = 0; index < morphTargetManager.numTargets; index++) {\r\n            const babylonMorphTarget = morphTargetManager.getTarget(index);\r\n            promises.push(this._loadMorphTargetVertexDataAsync(`${context}/targets/${index}`, babylonGeometry, primitive.targets[index], babylonMorphTarget));\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            morphTargetManager.areUpdatesFrozen = false;\r\n        });\r\n    }\r\n\r\n    private _loadMorphTargetVertexDataAsync(context: string, babylonGeometry: Geometry, attributes: { [name: string]: number }, babylonMorphTarget: MorphTarget): Promise<void> {\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const loadAttribute = (attribute: string, kind: string, setData: (babylonVertexBuffer: VertexBuffer, data: Float32Array) => void) => {\r\n            if (attributes[attribute] == undefined) {\r\n                return;\r\n            }\r\n\r\n            const babylonVertexBuffer = babylonGeometry.getVertexBuffer(kind);\r\n            if (!babylonVertexBuffer) {\r\n                return;\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/${attribute}`, this._gltf.accessors, attributes[attribute]);\r\n            promises.push(\r\n                this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    setData(babylonVertexBuffer, data);\r\n                })\r\n            );\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind, (babylonVertexBuffer, data) => {\r\n            const positions = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                positions[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setPositions(positions);\r\n        });\r\n\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind, (babylonVertexBuffer, data) => {\r\n            const normals = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(normals.length, (value, index) => {\r\n                normals[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setNormals(normals);\r\n        });\r\n\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind, (babylonVertexBuffer, data) => {\r\n            const tangents = new Float32Array((data.length / 3) * 4);\r\n            let dataIndex = 0;\r\n            babylonVertexBuffer.forEach((data.length / 3) * 4, (value, index) => {\r\n                // Tangent data for morph targets is stored as xyz delta.\r\n                // The vertexData.tangent is stored as xyzw.\r\n                // So we need to skip every fourth vertexData.tangent.\r\n                if ((index + 1) % 4 !== 0) {\r\n                    tangents[dataIndex] = data[dataIndex] + value;\r\n                    dataIndex++;\r\n                }\r\n            });\r\n            babylonMorphTarget.setTangents(tangents);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUVs(uvs);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUV2s(uvs);\r\n        });\r\n\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (babylonVertexBuffer, data) => {\r\n            let colors = null;\r\n            const componentSize = babylonVertexBuffer.getSize();\r\n            if (componentSize === 3) {\r\n                colors = new Float32Array((data.length / 3) * 4);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    const pixid = Math.floor(index / 3);\r\n                    const channel = index % 3;\r\n                    colors[4 * pixid + channel] = data[3 * pixid + channel] + value;\r\n                });\r\n                for (let i = 0; i < data.length / 3; ++i) {\r\n                    colors[4 * i + 3] = 1;\r\n                }\r\n            } else if (componentSize === 4) {\r\n                colors = new Float32Array(data.length);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    colors[index] = data[index] + value;\r\n                });\r\n            } else {\r\n                throw new Error(`${context}: Invalid number of components (${componentSize}) for COLOR_0 attribute`);\r\n            }\r\n            babylonMorphTarget.setColors(colors);\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private static _LoadTransform(node: INode, babylonNode: TransformNode): void {\r\n        // Ignore the TRS of skinned nodes.\r\n        // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n        if (node.skin != undefined) {\r\n            return;\r\n        }\r\n\r\n        let position = Vector3.Zero();\r\n        let rotation = Quaternion.Identity();\r\n        let scaling = Vector3.One();\r\n\r\n        if (node.matrix) {\r\n            const matrix = Matrix.FromArray(node.matrix);\r\n            matrix.decompose(scaling, rotation, position);\r\n        } else {\r\n            if (node.translation) {\r\n                position = Vector3.FromArray(node.translation);\r\n            }\r\n            if (node.rotation) {\r\n                rotation = Quaternion.FromArray(node.rotation);\r\n            }\r\n            if (node.scale) {\r\n                scaling = Vector3.FromArray(node.scale);\r\n            }\r\n        }\r\n\r\n        babylonNode.position = position;\r\n        babylonNode.rotationQuaternion = rotation;\r\n        babylonNode.scaling = scaling;\r\n    }\r\n\r\n    private _loadSkinAsync(context: string, node: INode, skin: ISkin, assign: (babylonSkeleton: Skeleton) => void): Promise<void> {\r\n        if (!this._parent.loadSkins) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const extensionPromise = this._extensionsLoadSkinAsync(context, node, skin);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (skin._data) {\r\n            assign(skin._data.babylonSkeleton);\r\n            return skin._data.promise;\r\n        }\r\n\r\n        const skeletonId = `skeleton${skin.index}`;\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonSkeleton = new Skeleton(skin.name || skeletonId, skeletonId, this._babylonScene);\r\n        babylonSkeleton._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        this._loadBones(context, skin, babylonSkeleton);\r\n        const promise = this._loadSkinInverseBindMatricesDataAsync(context, skin).then((inverseBindMatricesData) => {\r\n            this._updateBoneMatrices(babylonSkeleton, inverseBindMatricesData);\r\n        });\r\n\r\n        skin._data = {\r\n            babylonSkeleton: babylonSkeleton,\r\n            promise: promise,\r\n        };\r\n\r\n        assign(babylonSkeleton);\r\n\r\n        return promise;\r\n    }\r\n\r\n    private _loadBones(context: string, skin: ISkin, babylonSkeleton: Skeleton): void {\r\n        if (skin.skeleton == undefined || this._parent.alwaysComputeSkeletonRootNode) {\r\n            const rootNode = this._findSkeletonRootNode(`${context}/joints`, skin.joints);\r\n            if (rootNode) {\r\n                if (skin.skeleton === undefined) {\r\n                    skin.skeleton = rootNode.index;\r\n                } else {\r\n                    const isParent = (a: INode, b: INode): boolean => {\r\n                        for (; b.parent; b = b.parent) {\r\n                            if (b.parent === a) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    const skeletonNode = ArrayItem.Get(`${context}/skeleton`, this._gltf.nodes, skin.skeleton);\r\n                    if (skeletonNode !== rootNode && !isParent(skeletonNode, rootNode)) {\r\n                        Logger.Warn(`${context}/skeleton: Overriding with nearest common ancestor as skeleton node is not a common root`);\r\n                        skin.skeleton = rootNode.index;\r\n                    }\r\n                }\r\n            } else {\r\n                Logger.Warn(`${context}: Failed to find common root`);\r\n            }\r\n        }\r\n\r\n        const babylonBones: { [index: number]: Bone } = {};\r\n        for (const index of skin.joints) {\r\n            const node = ArrayItem.Get(`${context}/joints/${index}`, this._gltf.nodes, index);\r\n            this._loadBone(node, skin, babylonSkeleton, babylonBones);\r\n        }\r\n    }\r\n\r\n    private _findSkeletonRootNode(context: string, joints: Array<number>): Nullable<INode> {\r\n        if (joints.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const paths: { [joint: number]: Array<INode> } = {};\r\n        for (const index of joints) {\r\n            const path: INode[] = [];\r\n            let node = ArrayItem.Get(`${context}/${index}`, this._gltf.nodes, index);\r\n            while (node.index !== -1) {\r\n                path.unshift(node);\r\n                node = node.parent!;\r\n            }\r\n            paths[index] = path;\r\n        }\r\n\r\n        let rootNode: Nullable<INode> = null;\r\n        for (let i = 0; ; ++i) {\r\n            let path = paths[joints[0]];\r\n            if (i >= path.length) {\r\n                return rootNode;\r\n            }\r\n\r\n            const node = path[i];\r\n            for (let j = 1; j < joints.length; ++j) {\r\n                path = paths[joints[j]];\r\n                if (i >= path.length || node !== path[i]) {\r\n                    return rootNode;\r\n                }\r\n            }\r\n\r\n            rootNode = node;\r\n        }\r\n    }\r\n\r\n    private _loadBone(node: INode, skin: ISkin, babylonSkeleton: Skeleton, babylonBones: { [index: number]: Bone }): Bone {\r\n        node._isJoint = true;\r\n\r\n        let babylonBone = babylonBones[node.index];\r\n        if (babylonBone) {\r\n            return babylonBone;\r\n        }\r\n\r\n        let parentBabylonBone: Nullable<Bone> = null;\r\n        if (node.index !== skin.skeleton) {\r\n            if (node.parent && node.parent.index !== -1) {\r\n                parentBabylonBone = this._loadBone(node.parent, skin, babylonSkeleton, babylonBones);\r\n            } else if (skin.skeleton !== undefined) {\r\n                Logger.Warn(`/skins/${skin.index}/skeleton: Skeleton node is not a common root`);\r\n            }\r\n        }\r\n\r\n        const boneIndex = skin.joints.indexOf(node.index);\r\n        babylonBone = new Bone(node.name || `joint${node.index}`, babylonSkeleton, parentBabylonBone, this._getNodeMatrix(node), null, null, boneIndex);\r\n        babylonBones[node.index] = babylonBone;\r\n\r\n        // Wait until the scene is loaded to ensure the transform nodes are loaded.\r\n        this._postSceneLoadActions.push(() => {\r\n            // Link the Babylon bone with the corresponding Babylon transform node.\r\n            // A glTF joint is a pointer to a glTF node in the glTF node hierarchy similar to Unity3D.\r\n            babylonBone.linkTransformNode(node._babylonTransformNode!);\r\n        });\r\n\r\n        return babylonBone;\r\n    }\r\n\r\n    private _loadSkinInverseBindMatricesDataAsync(context: string, skin: ISkin): Promise<Nullable<Float32Array>> {\r\n        if (skin.inverseBindMatrices == undefined) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const accessor = ArrayItem.Get(`${context}/inverseBindMatrices`, this._gltf.accessors, skin.inverseBindMatrices);\r\n        return this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor);\r\n    }\r\n\r\n    private _updateBoneMatrices(babylonSkeleton: Skeleton, inverseBindMatricesData: Nullable<Float32Array>): void {\r\n        for (const babylonBone of babylonSkeleton.bones) {\r\n            const baseMatrix = Matrix.Identity();\r\n            const boneIndex = babylonBone._index!;\r\n            if (inverseBindMatricesData && boneIndex !== -1) {\r\n                Matrix.FromArrayToRef(inverseBindMatricesData, boneIndex * 16, baseMatrix);\r\n                baseMatrix.invertToRef(baseMatrix);\r\n            }\r\n\r\n            const babylonParentBone = babylonBone.getParent();\r\n            if (babylonParentBone) {\r\n                baseMatrix.multiplyToRef(babylonParentBone.getAbsoluteInverseBindMatrix(), baseMatrix);\r\n            }\r\n\r\n            babylonBone.updateMatrix(baseMatrix, false, false);\r\n            babylonBone._updateAbsoluteBindMatrices(undefined, false);\r\n        }\r\n    }\r\n\r\n    private _getNodeMatrix(node: INode): Matrix {\r\n        return node.matrix\r\n            ? Matrix.FromArray(node.matrix)\r\n            : Matrix.Compose(\r\n                  node.scale ? Vector3.FromArray(node.scale) : Vector3.One(),\r\n                  node.rotation ? Quaternion.FromArray(node.rotation) : Quaternion.Identity(),\r\n                  node.translation ? Vector3.FromArray(node.translation) : Vector3.Zero()\r\n              );\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF camera.\r\n     * @param context The context when loading the asset\r\n     * @param camera The glTF camera property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon camera when the load is complete\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void = () => {}): Promise<Camera> {\r\n        const extensionPromise = this._extensionsLoadCameraAsync(context, camera, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${camera.name || \"\"}`);\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonCamera = new FreeCamera(camera.name || `camera${camera.index}`, Vector3.Zero(), this._babylonScene, false);\r\n        babylonCamera._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        babylonCamera.ignoreParentScaling = true;\r\n        camera._babylonCamera = babylonCamera;\r\n\r\n        // Rotation by 180 as glTF has a different convention than Babylon.\r\n        babylonCamera.rotation.set(0, Math.PI, 0);\r\n\r\n        switch (camera.type) {\r\n            case CameraType.PERSPECTIVE: {\r\n                const perspective = camera.perspective;\r\n                if (!perspective) {\r\n                    throw new Error(`${context}: Camera perspective properties are missing`);\r\n                }\r\n\r\n                babylonCamera.fov = perspective.yfov;\r\n                babylonCamera.minZ = perspective.znear;\r\n                babylonCamera.maxZ = perspective.zfar || 0;\r\n                break;\r\n            }\r\n            case CameraType.ORTHOGRAPHIC: {\r\n                if (!camera.orthographic) {\r\n                    throw new Error(`${context}: Camera orthographic properties are missing`);\r\n                }\r\n\r\n                babylonCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                babylonCamera.orthoLeft = -camera.orthographic.xmag;\r\n                babylonCamera.orthoRight = camera.orthographic.xmag;\r\n                babylonCamera.orthoBottom = -camera.orthographic.ymag;\r\n                babylonCamera.orthoTop = camera.orthographic.ymag;\r\n                babylonCamera.minZ = camera.orthographic.znear;\r\n                babylonCamera.maxZ = camera.orthographic.zfar;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}: Invalid camera type (${camera.type})`);\r\n            }\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonCamera, context);\r\n        this._parent.onCameraLoadedObservable.notifyObservers(babylonCamera);\r\n        assign(babylonCamera);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonCamera;\r\n        });\r\n    }\r\n\r\n    private _loadAnimationsAsync(): Promise<void> {\r\n        const animations = this._gltf.animations;\r\n        if (!animations) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<void>>();\r\n\r\n        for (let index = 0; index < animations.length; index++) {\r\n            const animation = animations[index];\r\n            promises.push(\r\n                this.loadAnimationAsync(`/animations/${animation.index}`, animation).then((animationGroup) => {\r\n                    // Delete the animation group if it ended up not having any animations in it.\r\n                    if (animationGroup.targetedAnimations.length === 0) {\r\n                        animationGroup.dispose();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation.\r\n     * @param context The context when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @returns A promise that resolves with the loaded Babylon animation group when the load is complete\r\n     */\r\n    public loadAnimationAsync(context: string, animation: IAnimation): Promise<AnimationGroup> {\r\n        const promise = this._extensionsLoadAnimationAsync(context, animation);\r\n        if (promise) {\r\n            return promise;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        return import(\"core/Animations/animationGroup\").then(({ AnimationGroup }) => {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonAnimationGroup = new AnimationGroup(animation.name || `animation${animation.index}`, this._babylonScene);\r\n            babylonAnimationGroup._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            animation._babylonAnimationGroup = babylonAnimationGroup;\r\n\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            ArrayItem.Assign(animation.channels);\r\n            ArrayItem.Assign(animation.samplers);\r\n\r\n            for (const channel of animation.channels) {\r\n                promises.push(\r\n                    this._loadAnimationChannelAsync(`${context}/channels/${channel.index}`, context, animation, channel, (babylonTarget, babylonAnimation) => {\r\n                        babylonTarget.animations = babylonTarget.animations || [];\r\n                        babylonTarget.animations.push(babylonAnimation);\r\n                        babylonAnimationGroup.addTargetedAnimation(babylonAnimation, babylonTarget);\r\n                    })\r\n                );\r\n            }\r\n\r\n            return Promise.all(promises).then(() => {\r\n                babylonAnimationGroup.normalize(0);\r\n                return babylonAnimationGroup;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public async _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const promise = this._extensionsLoadAnimationChannelAsync(context, animationContext, animation, channel, onLoad);\r\n        if (promise) {\r\n            return promise;\r\n        }\r\n\r\n        if (channel.target.node == undefined) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const targetNode = ArrayItem.Get(`${context}/target/node`, this._gltf.nodes, channel.target.node);\r\n        const channelTargetPath = channel.target.path;\r\n        const pathIsWeights = channelTargetPath === AnimationChannelTargetPath.WEIGHTS;\r\n\r\n        // Ignore animations that have no animation targets.\r\n        if ((pathIsWeights && !targetNode._numMorphTargets) || (!pathIsWeights && !targetNode._babylonTransformNode)) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // Don't load node animations if disabled.\r\n        if (!this._parent.loadNodeAnimations && !pathIsWeights && !targetNode._isJoint) {\r\n            return Promise.resolve();\r\n        }\r\n        // async-load the animation sampler to provide the interpolation of the channelTargetPath\r\n        await import(\"./glTFLoaderAnimation\");\r\n\r\n        let properties: IInterpolationPropertyInfo[];\r\n        switch (channelTargetPath) {\r\n            case AnimationChannelTargetPath.TRANSLATION: {\r\n                properties = GetMappingForKey(\"/nodes/{}/translation\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.ROTATION: {\r\n                properties = GetMappingForKey(\"/nodes/{}/rotation\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.SCALE: {\r\n                properties = GetMappingForKey(\"/nodes/{}/scale\")?.interpolation!;\r\n                break;\r\n            }\r\n            case AnimationChannelTargetPath.WEIGHTS: {\r\n                properties = GetMappingForKey(\"/nodes/{}/weights\")?.interpolation!;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/target/path: Invalid value (${channel.target.path})`);\r\n            }\r\n        }\r\n        // stay safe\r\n        if (!properties) {\r\n            throw new Error(`${context}/target/path: Could not find interpolation properties for target path (${channel.target.path})`);\r\n        }\r\n\r\n        const targetInfo: IObjectInfo<IInterpolationPropertyInfo[]> = {\r\n            object: targetNode,\r\n            info: properties,\r\n        };\r\n\r\n        return this._loadAnimationChannelFromTargetInfoAsync(context, animationContext, animation, channel, targetInfo, onLoad);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param targetInfo The glTF target and properties\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public _loadAnimationChannelFromTargetInfoAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        targetInfo: IObjectInfo<IInterpolationPropertyInfo[]>,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const fps = this.parent.targetFps;\r\n        const invfps = 1 / fps;\r\n\r\n        const sampler = ArrayItem.Get(`${context}/sampler`, animation.samplers, channel.sampler);\r\n        return this._loadAnimationSamplerAsync(`${animationContext}/samplers/${channel.sampler}`, sampler).then((data) => {\r\n            let numAnimations = 0;\r\n\r\n            const target = targetInfo.object;\r\n            const propertyInfos = targetInfo.info;\r\n            // Extract the corresponding values from the read value.\r\n            // GLTF values may be dispatched to several Babylon properties.\r\n            // For example, baseColorFactor [`r`, `g`, `b`, `a`] is dispatched to\r\n            // - albedoColor as Color3(`r`, `g`, `b`)\r\n            // - alpha as `a`\r\n            for (const propertyInfo of propertyInfos) {\r\n                const stride = propertyInfo.getStride(target);\r\n                const input = data.input;\r\n                const output = data.output;\r\n                const keys = new Array<IAnimationKey>(input.length);\r\n                let outputOffset = 0;\r\n\r\n                switch (data.interpolation) {\r\n                    case AnimationSamplerInterpolation.STEP: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                                interpolation: AnimationKeyInterpolation.STEP,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const inTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n                            const outTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                inTangent: inTangent,\r\n                                value: value,\r\n                                outTangent: outTangent,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.LINEAR: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (outputOffset > 0) {\r\n                    const name = `${animation.name || `animation${animation.index}`}_channel${channel.index}_${numAnimations}`;\r\n                    const babylonAnimations = propertyInfo.buildAnimations(target, name, fps, keys);\r\n                    for (const babylonAnimation of babylonAnimations) {\r\n                        numAnimations++;\r\n                        onLoad(babylonAnimation.babylonAnimatable, babylonAnimation.babylonAnimation);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadAnimationSamplerAsync(context: string, sampler: IAnimationSampler): Promise<_IAnimationSamplerData> {\r\n        if (sampler._data) {\r\n            return sampler._data;\r\n        }\r\n\r\n        const interpolation = sampler.interpolation || AnimationSamplerInterpolation.LINEAR;\r\n        switch (interpolation) {\r\n            case AnimationSamplerInterpolation.STEP:\r\n            case AnimationSamplerInterpolation.LINEAR:\r\n            case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/interpolation: Invalid value (${sampler.interpolation})`);\r\n            }\r\n        }\r\n\r\n        const inputAccessor = ArrayItem.Get(`${context}/input`, this._gltf.accessors, sampler.input);\r\n        const outputAccessor = ArrayItem.Get(`${context}/output`, this._gltf.accessors, sampler.output);\r\n        sampler._data = Promise.all([\r\n            this._loadFloatAccessorAsync(`/accessors/${inputAccessor.index}`, inputAccessor),\r\n            this._loadFloatAccessorAsync(`/accessors/${outputAccessor.index}`, outputAccessor),\r\n        ]).then(([inputData, outputData]) => {\r\n            return {\r\n                input: inputData,\r\n                interpolation: interpolation,\r\n                output: outputData,\r\n            };\r\n        });\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer.\r\n     * @param context The context when loading the asset\r\n     * @param buffer The glTF buffer property\r\n     * @param byteOffset The byte offset to use\r\n     * @param byteLength The byte length to use\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferAsync(context, buffer, byteOffset, byteLength);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!buffer._data) {\r\n            if (buffer.uri) {\r\n                buffer._data = this.loadUriAsync(`${context}/uri`, buffer, buffer.uri);\r\n            } else {\r\n                if (!this._bin) {\r\n                    throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n                }\r\n\r\n                buffer._data = this._bin.readAsync(0, buffer.byteLength);\r\n            }\r\n        }\r\n\r\n        return buffer._data.then((data) => {\r\n            try {\r\n                return new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            } catch (e) {\r\n                throw new Error(`${context}: ${e.message}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer view.\r\n     * @param context The context when loading the asset\r\n     * @param bufferView The glTF buffer view property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferViewAsync(context, bufferView);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (bufferView._data) {\r\n            return bufferView._data;\r\n        }\r\n\r\n        const buffer = ArrayItem.Get(`${context}/buffer`, this._gltf.buffers, bufferView.buffer);\r\n        bufferView._data = this.loadBufferAsync(`/buffers/${buffer.index}`, buffer, bufferView.byteOffset || 0, bufferView.byteLength);\r\n\r\n        return bufferView._data;\r\n    }\r\n\r\n    private _loadAccessorAsync(context: string, accessor: IAccessor, constructor: TypedArrayConstructor): Promise<ArrayBufferView> {\r\n        if (accessor._data) {\r\n            return accessor._data;\r\n        }\r\n\r\n        const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n        const byteStride = numComponents * VertexBuffer.GetTypeByteLength(accessor.componentType);\r\n        const length = numComponents * accessor.count;\r\n\r\n        if (accessor.bufferView == undefined) {\r\n            accessor._data = Promise.resolve(new constructor(length));\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized && (!bufferView.byteStride || bufferView.byteStride === byteStride)) {\r\n                    return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, length);\r\n                } else {\r\n                    const typedArray = new constructor(length);\r\n                    VertexBuffer.ForEach(\r\n                        data,\r\n                        accessor.byteOffset || 0,\r\n                        bufferView.byteStride || byteStride,\r\n                        numComponents,\r\n                        accessor.componentType,\r\n                        typedArray.length,\r\n                        accessor.normalized || false,\r\n                        (value, index) => {\r\n                            typedArray[index] = value;\r\n                        }\r\n                    );\r\n                    return typedArray;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const sparse = accessor.sparse;\r\n            accessor._data = accessor._data.then((data) => {\r\n                const typedArray = data as TypedArray;\r\n                const indicesBufferView = ArrayItem.Get(`${context}/sparse/indices/bufferView`, this._gltf.bufferViews, sparse.indices.bufferView);\r\n                const valuesBufferView = ArrayItem.Get(`${context}/sparse/values/bufferView`, this._gltf.bufferViews, sparse.values.bufferView);\r\n                return Promise.all([\r\n                    this.loadBufferViewAsync(`/bufferViews/${indicesBufferView.index}`, indicesBufferView),\r\n                    this.loadBufferViewAsync(`/bufferViews/${valuesBufferView.index}`, valuesBufferView),\r\n                ]).then(([indicesData, valuesData]) => {\r\n                    const indices = GLTFLoader._GetTypedArray(\r\n                        `${context}/sparse/indices`,\r\n                        sparse.indices.componentType,\r\n                        indicesData,\r\n                        sparse.indices.byteOffset,\r\n                        sparse.count\r\n                    ) as IndicesArray;\r\n\r\n                    const sparseLength = numComponents * sparse.count;\r\n                    let values: TypedArray;\r\n\r\n                    if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized) {\r\n                        values = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                    } else {\r\n                        const sparseData = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                        values = new constructor(sparseLength);\r\n                        VertexBuffer.ForEach(sparseData, 0, byteStride, numComponents, accessor.componentType, values.length, accessor.normalized || false, (value, index) => {\r\n                            values[index] = value;\r\n                        });\r\n                    }\r\n\r\n                    let valuesIndex = 0;\r\n                    for (let indicesIndex = 0; indicesIndex < indices.length; indicesIndex++) {\r\n                        let dataIndex = indices[indicesIndex] * numComponents;\r\n                        for (let componentIndex = 0; componentIndex < numComponents; componentIndex++) {\r\n                            typedArray[dataIndex++] = values[valuesIndex++];\r\n                        }\r\n                    }\r\n\r\n                    return typedArray;\r\n                });\r\n            });\r\n        }\r\n\r\n        return accessor._data;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFloatAccessorAsync(context: string, accessor: IAccessor): Promise<Float32Array> {\r\n        return this._loadAccessorAsync(context, accessor, Float32Array) as Promise<Float32Array>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadIndicesAccessorAsync(context: string, accessor: IAccessor): Promise<IndicesArray> {\r\n        if (accessor.type !== AccessorType.SCALAR) {\r\n            throw new Error(`${context}/type: Invalid value ${accessor.type}`);\r\n        }\r\n\r\n        if (\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_BYTE &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_SHORT &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_INT\r\n        ) {\r\n            throw new Error(`${context}/componentType: Invalid value ${accessor.componentType}`);\r\n        }\r\n\r\n        if (accessor._data) {\r\n            return accessor._data as Promise<IndicesArray>;\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, accessor.componentType);\r\n            accessor._data = this._loadAccessorAsync(context, accessor, constructor);\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, accessor.count);\r\n            });\r\n        }\r\n\r\n        return accessor._data as Promise<IndicesArray>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexBufferViewAsync(bufferView: IBufferView): Promise<Buffer> {\r\n        if (bufferView._babylonBuffer) {\r\n            return bufferView._babylonBuffer;\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n        bufferView._babylonBuffer = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n            return new Buffer(engine, data, false);\r\n        });\r\n\r\n        return bufferView._babylonBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexAccessorAsync(context: string, accessor: IAccessor, kind: string): Promise<VertexBuffer> {\r\n        if (accessor._babylonVertexBuffer?.[kind]) {\r\n            return accessor._babylonVertexBuffer[kind];\r\n        }\r\n\r\n        if (!accessor._babylonVertexBuffer) {\r\n            accessor._babylonVertexBuffer = {};\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n\r\n        if (accessor.sparse || accessor.bufferView == undefined) {\r\n            accessor._babylonVertexBuffer[kind] = this._loadFloatAccessorAsync(context, accessor).then((data) => {\r\n                return new VertexBuffer(engine, data, kind, false);\r\n            });\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._babylonVertexBuffer[kind] = this._loadVertexBufferViewAsync(bufferView).then((babylonBuffer) => {\r\n                const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n                return new VertexBuffer(\r\n                    engine,\r\n                    babylonBuffer,\r\n                    kind,\r\n                    false,\r\n                    undefined,\r\n                    bufferView.byteStride,\r\n                    undefined,\r\n                    accessor.byteOffset,\r\n                    numComponents,\r\n                    accessor.componentType,\r\n                    accessor.normalized,\r\n                    true,\r\n                    undefined,\r\n                    true\r\n                );\r\n            });\r\n        }\r\n\r\n        return accessor._babylonVertexBuffer[kind];\r\n    }\r\n\r\n    private _loadMaterialMetallicRoughnessPropertiesAsync(context: string, properties: IMaterialPbrMetallicRoughness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\r\n                babylonMaterial.alpha = properties.baseColorFactor[3];\r\n            } else {\r\n                babylonMaterial.albedoColor = Color3.White();\r\n            }\r\n\r\n            babylonMaterial.metallic = properties.metallicFactor == undefined ? 1 : properties.metallicFactor;\r\n            babylonMaterial.roughness = properties.roughnessFactor == undefined ? 1 : properties.roughnessFactor;\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        babylonMaterial.albedoTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (properties.metallicRoughnessTexture) {\r\n                properties.metallicRoughnessTexture.nonColorData = true;\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/metallicRoughnessTexture`, properties.metallicRoughnessTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Metallic Roughness)`;\r\n                        babylonMaterial.metallicTexture = texture;\r\n                    })\r\n                );\r\n\r\n                babylonMaterial.useMetallnessFromMetallicTextureBlue = true;\r\n                babylonMaterial.useRoughnessFromMetallicTextureGreen = true;\r\n                babylonMaterial.useRoughnessFromMetallicTextureAlpha = false;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void = () => {}\r\n    ): Promise<Material> {\r\n        const extensionPromise = this._extensionsLoadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        material._data = material._data || {};\r\n        let babylonData = material._data[babylonDrawMode];\r\n        if (!babylonData) {\r\n            this.logOpen(`${context} ${material.name || \"\"}`);\r\n\r\n            const babylonMaterial = this.createMaterial(context, material, babylonDrawMode);\r\n\r\n            babylonData = {\r\n                babylonMaterial: babylonMaterial,\r\n                babylonMeshes: [],\r\n                promise: this.loadMaterialPropertiesAsync(context, material, babylonMaterial),\r\n            };\r\n\r\n            material._data[babylonDrawMode] = babylonData;\r\n\r\n            GLTFLoader.AddPointerMetadata(babylonMaterial, context);\r\n            this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        if (babylonMesh) {\r\n            babylonData.babylonMeshes.push(babylonMesh);\r\n\r\n            babylonMesh.onDisposeObservable.addOnce(() => {\r\n                const index = babylonData.babylonMeshes.indexOf(babylonMesh);\r\n                if (index !== -1) {\r\n                    babylonData.babylonMeshes.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        assign(babylonData.babylonMaterial);\r\n\r\n        return babylonData.promise.then(() => {\r\n            return babylonData.babylonMaterial;\r\n        });\r\n    }\r\n\r\n    private _createDefaultMaterial(name: string, babylonDrawMode: number): Material {\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonMaterial = new PBRMaterial(name, this._babylonScene);\r\n        babylonMaterial._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        // Moved to mesh so user can change materials on gltf meshes: babylonMaterial.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n        babylonMaterial.fillMode = babylonDrawMode;\r\n        babylonMaterial.enableSpecularAntiAliasing = true;\r\n        babylonMaterial.useRadianceOverAlpha = !this._parent.transparencyAsCoverage;\r\n        babylonMaterial.useSpecularOverAlpha = !this._parent.transparencyAsCoverage;\r\n        babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\r\n        babylonMaterial.metallic = 1;\r\n        babylonMaterial.roughness = 1;\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Creates a Babylon material from a glTF material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonDrawMode The draw mode for the Babylon material\r\n     * @returns The Babylon material\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Material {\r\n        const extensionPromise = this._extensionsCreateMaterial(context, material, babylonDrawMode);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const name = material.name || `material${material.index}`;\r\n        const babylonMaterial = this._createDefaultMaterial(name, babylonDrawMode);\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Loads properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        promises.push(this.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n\r\n        if (material.pbrMetallicRoughness) {\r\n            promises.push(this._loadMaterialMetallicRoughnessPropertiesAsync(`${context}/pbrMetallicRoughness`, material.pbrMetallicRoughness, babylonMaterial));\r\n        }\r\n\r\n        this.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads the normal, occlusion, and emissive properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialBasePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        babylonMaterial.emissiveColor = material.emissiveFactor ? Color3.FromArray(material.emissiveFactor) : new Color3(0, 0, 0);\r\n        if (material.doubleSided) {\r\n            babylonMaterial.backFaceCulling = false;\r\n            babylonMaterial.twoSidedLighting = true;\r\n        }\r\n\r\n        if (material.normalTexture) {\r\n            material.normalTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/normalTexture`, material.normalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Normal)`;\r\n                    babylonMaterial.bumpTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.invertNormalMapX = !this._babylonScene.useRightHandedSystem;\r\n            babylonMaterial.invertNormalMapY = this._babylonScene.useRightHandedSystem;\r\n            if (material.normalTexture.scale != undefined && babylonMaterial.bumpTexture) {\r\n                babylonMaterial.bumpTexture.level = material.normalTexture.scale;\r\n            }\r\n\r\n            babylonMaterial.forceIrradianceInFragment = true;\r\n        }\r\n\r\n        if (material.occlusionTexture) {\r\n            material.occlusionTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/occlusionTexture`, material.occlusionTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Occlusion)`;\r\n                    babylonMaterial.ambientTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.useAmbientInGrayScale = true;\r\n            if (material.occlusionTexture.strength != undefined) {\r\n                babylonMaterial.ambientTextureStrength = material.occlusionTexture.strength;\r\n            }\r\n        }\r\n\r\n        if (material.emissiveTexture) {\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/emissiveTexture`, material.emissiveTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Emissive)`;\r\n                    babylonMaterial.emissiveTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads the alpha properties from a glTF material into a Babylon material.\r\n     * Must be called after the setting the albedo texture of the Babylon material when the material has an albedo texture.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     */\r\n    public loadMaterialAlphaProperties(context: string, material: IMaterial, babylonMaterial: Material): void {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const alphaMode = material.alphaMode || MaterialAlphaMode.OPAQUE;\r\n        switch (alphaMode) {\r\n            case MaterialAlphaMode.OPAQUE: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_OPAQUE;\r\n                babylonMaterial.alpha = 1.0; // Force alpha to 1.0 for opaque mode.\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.MASK: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHATEST;\r\n                babylonMaterial.alphaCutOff = material.alphaCutoff == undefined ? 0.5 : material.alphaCutoff;\r\n                if (babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoTexture.hasAlpha = true;\r\n                }\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.BLEND: {\r\n                babylonMaterial.transparencyMode = PBRMaterial.PBRMATERIAL_ALPHABLEND;\r\n                if (babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoTexture.hasAlpha = true;\r\n                    babylonMaterial.useAlphaFromAlbedoTexture = true;\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/alphaMode: Invalid value (${material.alphaMode})`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF texture info.\r\n     * @param context The context when loading the asset\r\n     * @param textureInfo The glTF texture info property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon texture when the load is complete\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureInfoAsync(context, textureInfo, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        if (textureInfo.texCoord! >= 6) {\r\n            throw new Error(`${context}/texCoord: Invalid value (${textureInfo.texCoord})`);\r\n        }\r\n\r\n        const texture = ArrayItem.Get(`${context}/index`, this._gltf.textures, textureInfo.index);\r\n        texture._textureInfo = textureInfo;\r\n\r\n        const promise = this._loadTextureAsync(`/textures/${textureInfo.index}`, texture, (babylonTexture) => {\r\n            babylonTexture.coordinatesIndex = textureInfo.texCoord || 0;\r\n            GLTFLoader.AddPointerMetadata(babylonTexture, context);\r\n            this._parent.onTextureLoadedObservable.notifyObservers(babylonTexture);\r\n            assign(babylonTexture);\r\n        });\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureAsync(context, texture, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context} ${texture.name || \"\"}`);\r\n\r\n        const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._gltf.samplers, texture.sampler);\r\n        const image = ArrayItem.Get(`${context}/source`, this._gltf.images, texture.source);\r\n        const promise = this._createTextureAsync(context, sampler, image, assign, undefined, !texture._textureInfo.nonColorData);\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createTextureAsync(\r\n        context: string,\r\n        sampler: ISampler,\r\n        image: IImage,\r\n        assign: (babylonTexture: BaseTexture) => void = () => {},\r\n        textureLoaderOptions?: unknown,\r\n        useSRGBBuffer?: boolean\r\n    ): Promise<BaseTexture> {\r\n        const samplerData = this._loadSampler(`/samplers/${sampler.index}`, sampler);\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const deferred = new Deferred<void>();\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const textureCreationOptions: ITextureCreationOptions = {\r\n            noMipmap: samplerData.noMipMaps,\r\n            invertY: false,\r\n            samplingMode: samplerData.samplingMode,\r\n            onLoad: () => {\r\n                if (!this._disposed) {\r\n                    deferred.resolve();\r\n                }\r\n            },\r\n            onError: (message?: string, exception?: any) => {\r\n                if (!this._disposed) {\r\n                    deferred.reject(new Error(`${context}: ${exception && exception.message ? exception.message : message || \"Failed to load texture\"}`));\r\n                }\r\n            },\r\n            mimeType: image.mimeType,\r\n            loaderOptions: textureLoaderOptions,\r\n            useSRGBBuffer: !!useSRGBBuffer && this._parent.useSRGBBuffers,\r\n        };\r\n        const babylonTexture = new Texture(null, this._babylonScene, textureCreationOptions);\r\n        babylonTexture._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        promises.push(deferred.promise);\r\n\r\n        promises.push(\r\n            this.loadImageAsync(`/images/${image.index}`, image).then((data) => {\r\n                const name = image.uri || `${this._fileName}#image${image.index}`;\r\n                const dataUrl = `data:${this._uniqueRootUrl}${name}`;\r\n                babylonTexture.updateURL(dataUrl, data);\r\n\r\n                // Set the internal texture label.\r\n                const internalTexture = babylonTexture.getInternalTexture();\r\n                if (internalTexture) {\r\n                    internalTexture.label = image.name;\r\n                }\r\n            })\r\n        );\r\n\r\n        babylonTexture.wrapU = samplerData.wrapU;\r\n        babylonTexture.wrapV = samplerData.wrapV;\r\n        assign(babylonTexture);\r\n\r\n        if (this._parent.useGltfTextureNames) {\r\n            babylonTexture.name = image.name || image.uri || `image${image.index}`;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonTexture;\r\n        });\r\n    }\r\n\r\n    private _loadSampler(context: string, sampler: ISampler): _ISamplerData {\r\n        if (!sampler._data) {\r\n            sampler._data = {\r\n                noMipMaps: sampler.minFilter === TextureMinFilter.NEAREST || sampler.minFilter === TextureMinFilter.LINEAR,\r\n                samplingMode: GLTFLoader._GetTextureSamplingMode(context, sampler),\r\n                wrapU: GLTFLoader._GetTextureWrapMode(`${context}/wrapS`, sampler.wrapS),\r\n                wrapV: GLTFLoader._GetTextureWrapMode(`${context}/wrapT`, sampler.wrapT),\r\n            };\r\n        }\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF image.\r\n     * @param context The context when loading the asset\r\n     * @param image The glTF image property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadImageAsync(context: string, image: IImage): Promise<ArrayBufferView> {\r\n        if (!image._data) {\r\n            this.logOpen(`${context} ${image.name || \"\"}`);\r\n\r\n            if (image.uri) {\r\n                image._data = this.loadUriAsync(`${context}/uri`, image, image.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, image.bufferView);\r\n                image._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        return image._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF uri.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property associated with the uri\r\n     * @param uri The base64 or relative uri\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadUriAsync(context: string, property: IProperty, uri: string): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadUriAsync(context, property, uri);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!GLTFLoader._ValidateUri(uri)) {\r\n            throw new Error(`${context}: '${uri}' is invalid`);\r\n        }\r\n\r\n        if (IsBase64DataUrl(uri)) {\r\n            const data = new Uint8Array(DecodeBase64UrlToBinary(uri));\r\n            this.log(`${context}: Decoded ${uri.substring(0, 64)}... (${data.length} bytes)`);\r\n            return Promise.resolve(data);\r\n        }\r\n\r\n        this.log(`${context}: Loading ${uri}`);\r\n\r\n        return this._parent.preprocessUrlAsync(this._rootUrl + uri).then((url) => {\r\n            return new Promise((resolve, reject) => {\r\n                this._parent._loadFile(\r\n                    this._babylonScene,\r\n                    url,\r\n                    (data) => {\r\n                        if (!this._disposed) {\r\n                            this.log(`${context}: Loaded ${uri} (${(data as ArrayBuffer).byteLength} bytes)`);\r\n                            resolve(new Uint8Array(data as ArrayBuffer));\r\n                        }\r\n                    },\r\n                    true,\r\n                    (request) => {\r\n                        reject(new LoadFileError(`${context}: Failed to load '${uri}'${request ? \": \" + request.status + \" \" + request.statusText : \"\"}`, request));\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a JSON pointer to the _internalMetadata of the Babylon object at `<object>._internalMetadata.gltf.pointers`.\r\n     * @param babylonObject the Babylon object with _internalMetadata\r\n     * @param pointer the JSON pointer\r\n     */\r\n    public static AddPointerMetadata(babylonObject: IWithMetadata, pointer: string): void {\r\n        babylonObject.metadata = babylonObject.metadata || {};\r\n        const metadata = (babylonObject._internalMetadata = babylonObject._internalMetadata || {});\r\n        const gltf = (metadata.gltf = metadata.gltf || {});\r\n        const pointers = (gltf.pointers = gltf.pointers || []);\r\n        pointers.push(pointer);\r\n    }\r\n\r\n    private static _GetTextureWrapMode(context: string, mode: TextureWrapMode | undefined): number {\r\n        // Set defaults if undefined\r\n        mode = mode == undefined ? TextureWrapMode.REPEAT : mode;\r\n\r\n        switch (mode) {\r\n            case TextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case TextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case TextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                Logger.Warn(`${context}: Invalid value (${mode})`);\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    private static _GetTextureSamplingMode(context: string, sampler: ISampler): number {\r\n        // Set defaults if undefined\r\n        const magFilter = sampler.magFilter == undefined ? TextureMagFilter.LINEAR : sampler.magFilter;\r\n        const minFilter = sampler.minFilter == undefined ? TextureMinFilter.LINEAR_MIPMAP_LINEAR : sampler.minFilter;\r\n\r\n        if (magFilter === TextureMagFilter.LINEAR) {\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.LINEAR_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.LINEAR_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n            }\r\n        } else {\r\n            if (magFilter !== TextureMagFilter.NEAREST) {\r\n                Logger.Warn(`${context}/magFilter: Invalid value (${magFilter})`);\r\n            }\r\n\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.NEAREST_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.NEAREST_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArrayConstructor(context: string, componentType: AccessorComponentType): TypedArrayConstructor {\r\n        try {\r\n            return GetTypedArrayConstructor(componentType);\r\n        } catch (e) {\r\n            throw new Error(`${context}: ${e.message}`);\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArray(context: string, componentType: AccessorComponentType, bufferView: ArrayBufferView, byteOffset: number | undefined, length: number): TypedArray {\r\n        const buffer = bufferView.buffer;\r\n        byteOffset = bufferView.byteOffset + (byteOffset || 0);\r\n\r\n        const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, componentType);\r\n\r\n        const componentTypeLength = VertexBuffer.GetTypeByteLength(componentType);\r\n        if (byteOffset % componentTypeLength !== 0) {\r\n            // HACK: Copy the buffer if byte offset is not a multiple of component type byte length.\r\n            Logger.Warn(`${context}: Copying buffer as byte offset (${byteOffset}) is not a multiple of component type byte length (${componentTypeLength})`);\r\n            return new constructor(buffer.slice(byteOffset, byteOffset + length * componentTypeLength), 0);\r\n        }\r\n\r\n        return new constructor(buffer, byteOffset, length);\r\n    }\r\n\r\n    private static _GetNumComponents(context: string, type: string): number {\r\n        switch (type) {\r\n            case \"SCALAR\":\r\n                return 1;\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid type (${type})`);\r\n    }\r\n\r\n    private static _ValidateUri(uri: string): boolean {\r\n        return Tools.IsBase64(uri) || uri.indexOf(\"..\") === -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetDrawMode(context: string, mode: number | undefined): number {\r\n        if (mode == undefined) {\r\n            mode = MeshPrimitiveMode.TRIANGLES;\r\n        }\r\n\r\n        switch (mode) {\r\n            case MeshPrimitiveMode.POINTS:\r\n                return Material.PointListDrawMode;\r\n            case MeshPrimitiveMode.LINES:\r\n                return Material.LineListDrawMode;\r\n            case MeshPrimitiveMode.LINE_LOOP:\r\n                return Material.LineLoopDrawMode;\r\n            case MeshPrimitiveMode.LINE_STRIP:\r\n                return Material.LineStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLES:\r\n                return Material.TriangleFillMode;\r\n            case MeshPrimitiveMode.TRIANGLE_STRIP:\r\n                return Material.TriangleStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLE_FAN:\r\n                return Material.TriangleFanDrawMode;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid mesh primitive mode (${mode})`);\r\n    }\r\n\r\n    private _compileMaterialsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile materials\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        if (this._gltf.materials) {\r\n            for (const material of this._gltf.materials) {\r\n                if (material._data) {\r\n                    for (const babylonDrawMode in material._data) {\r\n                        const babylonData = material._data[babylonDrawMode];\r\n                        for (const babylonMesh of babylonData.babylonMeshes) {\r\n                            // Ensure nonUniformScaling is set if necessary.\r\n                            babylonMesh.computeWorldMatrix(true);\r\n\r\n                            const babylonMaterial = babylonData.babylonMaterial;\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh));\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { useInstances: true }));\r\n                            if (this._parent.useClipPlane) {\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true }));\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true, useInstances: true }));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile materials\");\r\n        });\r\n    }\r\n\r\n    private _compileShadowGeneratorsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile shadow generators\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const lights = this._babylonScene.lights;\r\n        for (const light of lights) {\r\n            const generator = light.getShadowGenerator();\r\n            if (generator) {\r\n                promises.push(generator.forceCompilationAsync());\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile shadow generators\");\r\n        });\r\n    }\r\n\r\n    private _forEachExtensions(action: (extension: IGLTFLoaderExtension) => void): void {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                action(extension);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyExtensions<T>(property: IProperty, functionName: string, actionAsync: (extension: IGLTFLoaderExtension) => Nullable<T> | undefined): Nullable<T> {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                const id = `${extension.name}.${functionName}`;\r\n                const loaderProperty = property as ILoaderProperty;\r\n                loaderProperty._activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions || {};\r\n                const activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions;\r\n                if (!activeLoaderExtensionFunctions[id]) {\r\n                    activeLoaderExtensionFunctions[id] = true;\r\n\r\n                    try {\r\n                        const result = actionAsync(extension);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    } finally {\r\n                        delete activeLoaderExtensionFunctions[id];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _extensionsOnLoading(): void {\r\n        this._forEachExtensions((extension) => extension.onLoading && extension.onLoading());\r\n    }\r\n\r\n    private _extensionsOnReady(): void {\r\n        this._forEachExtensions((extension) => extension.onReady && extension.onReady());\r\n    }\r\n\r\n    private _extensionsLoadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return this._applyExtensions(scene, \"loadScene\", (extension) => extension.loadSceneAsync && extension.loadSceneAsync(context, scene));\r\n    }\r\n\r\n    private _extensionsLoadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._applyExtensions(node, \"loadNode\", (extension) => extension.loadNodeAsync && extension.loadNodeAsync(context, node, assign));\r\n    }\r\n\r\n    private _extensionsLoadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._applyExtensions(camera, \"loadCamera\", (extension) => extension.loadCameraAsync && extension.loadCameraAsync(context, camera, assign));\r\n    }\r\n\r\n    private _extensionsLoadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return this._applyExtensions(primitive, \"loadVertexData\", (extension) => extension._loadVertexDataAsync && extension._loadVertexDataAsync(context, primitive, babylonMesh));\r\n    }\r\n\r\n    private _extensionsLoadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Nullable<Promise<AbstractMesh>> {\r\n        return this._applyExtensions(\r\n            primitive,\r\n            \"loadMeshPrimitive\",\r\n            (extension) => extension._loadMeshPrimitiveAsync && extension._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign)\r\n        );\r\n    }\r\n\r\n    private _extensionsLoadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterial\",\r\n            (extension) => extension._loadMaterialAsync && extension._loadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign)\r\n        );\r\n    }\r\n\r\n    private _extensionsCreateMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        return this._applyExtensions(material, \"createMaterial\", (extension) => extension.createMaterial && extension.createMaterial(context, material, babylonDrawMode));\r\n    }\r\n\r\n    private _extensionsLoadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterialProperties\",\r\n            (extension) => extension.loadMaterialPropertiesAsync && extension.loadMaterialPropertiesAsync(context, material, babylonMaterial)\r\n        );\r\n    }\r\n\r\n    private _extensionsLoadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(textureInfo, \"loadTextureInfo\", (extension) => extension.loadTextureInfoAsync && extension.loadTextureInfoAsync(context, textureInfo, assign));\r\n    }\r\n\r\n    private _extensionsLoadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(texture, \"loadTexture\", (extension) => extension._loadTextureAsync && extension._loadTextureAsync(context, texture, assign));\r\n    }\r\n\r\n    private _extensionsLoadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\r\n        return this._applyExtensions(animation, \"loadAnimation\", (extension) => extension.loadAnimationAsync && extension.loadAnimationAsync(context, animation));\r\n    }\r\n\r\n    private _extensionsLoadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            animation,\r\n            \"loadAnimationChannel\",\r\n            (extension) => extension._loadAnimationChannelAsync && extension._loadAnimationChannelAsync(context, animationContext, animation, channel, onLoad)\r\n        );\r\n    }\r\n\r\n    private _extensionsLoadSkinAsync(context: string, node: INode, skin: ISkin): Nullable<Promise<void>> {\r\n        return this._applyExtensions(skin, \"loadSkin\", (extension) => extension._loadSkinAsync && extension._loadSkinAsync(context, node, skin));\r\n    }\r\n\r\n    private _extensionsLoadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(property, \"loadUri\", (extension) => extension._loadUriAsync && extension._loadUriAsync(context, property, uri));\r\n    }\r\n\r\n    private _extensionsLoadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(bufferView, \"loadBufferView\", (extension) => extension.loadBufferViewAsync && extension.loadBufferViewAsync(context, bufferView));\r\n    }\r\n\r\n    private _extensionsLoadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(buffer, \"loadBuffer\", (extension) => extension.loadBufferAsync && extension.loadBufferAsync(context, buffer, byteOffset, byteLength));\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load an glTF extension.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extension from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extension does not exist\r\n     */\r\n    public static LoadExtensionAsync<TExtension = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extensionContext: string, extension: TExtension) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extensions) {\r\n            return null;\r\n        }\r\n\r\n        const extensions = property.extensions;\r\n\r\n        const extension = extensions[extensionName] as TExtension;\r\n        if (!extension) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extensions/${extensionName}`, extension);\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load a glTF extra.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extra from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extra does not exist\r\n     */\r\n    public static LoadExtraAsync<TExtra = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extraContext: string, extra: TExtra) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extras) {\r\n            return null;\r\n        }\r\n\r\n        const extras = property.extras;\r\n\r\n        const extra = extras[extensionName] as TExtra;\r\n        if (!extra) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extras/${extensionName}`, extra);\r\n    }\r\n\r\n    /**\r\n     * Checks for presence of an extension.\r\n     * @param name The name of the extension to check\r\n     * @returns A boolean indicating the presence of the given extension name in `extensionsUsed`\r\n     */\r\n    public isExtensionUsed(name: string): boolean {\r\n        return !!this._gltf.extensionsUsed && this._gltf.extensionsUsed.indexOf(name) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Increments the indentation level and logs a message.\r\n     * @param message The message to log\r\n     */\r\n    public logOpen(message: string): void {\r\n        this._parent._logOpen(message);\r\n    }\r\n\r\n    /**\r\n     * Decrements the indentation level.\r\n     */\r\n    public logClose(): void {\r\n        this._parent._logClose();\r\n    }\r\n\r\n    /**\r\n     * Logs a message\r\n     * @param message The message to log\r\n     */\r\n    public log(message: string): void {\r\n        this._parent._log(message);\r\n    }\r\n\r\n    /**\r\n     * Starts a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public startPerformanceCounter(counterName: string): void {\r\n        this._parent._startPerformanceCounter(counterName);\r\n    }\r\n\r\n    /**\r\n     * Ends a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public endPerformanceCounter(counterName: string): void {\r\n        this._parent._endPerformanceCounter(counterName);\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF2Loader = (parent) => new GLTFLoader(parent);\r\n","import type { Nullable } from \"core/types\";\r\nimport { SphericalHarmonics, SphericalPolynomial } from \"core/Maths/sphericalPolynomial\";\r\nimport { Quaternion, Matrix } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { RawCubeTexture } from \"core/Materials/Textures/rawCubeTexture\";\r\n\r\nimport type { IEXTLightsImageBased_LightReferenceImageBased, IEXTLightsImageBased_LightImageBased, IEXTLightsImageBased } from \"babylonjs-gltf2interface\";\r\nimport type { IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_lights_image_based\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_image_based extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_image_based\"]: {};\r\n    }\r\n}\r\n\r\ndeclare module \"babylonjs-gltf2interface\" {\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface IEXTLightsImageBased_LightImageBased {\r\n        _babylonTexture?: BaseTexture;\r\n        _loaded?: Promise<void>;\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_image_based implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsImageBased_LightImageBased[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IEXTLightsImageBased;\r\n            this._lights = extension.lights;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsImageBased_LightReferenceImageBased>(context, scene, this.name, (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\r\n            promises.push(\r\n                this._loadLightAsync(`/extensions/${this.name}/lights/${extension.light}`, light).then((texture) => {\r\n                    this._loader.babylonScene.environmentTexture = texture;\r\n                })\r\n            );\r\n\r\n            this._loader.logClose();\r\n\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadLightAsync(context: string, light: IEXTLightsImageBased_LightImageBased): Promise<BaseTexture> {\r\n        if (!light._loaded) {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            this._loader.logOpen(`${context}`);\r\n\r\n            const imageData = new Array<Array<ArrayBufferView>>(light.specularImages.length);\r\n            for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\r\n                const faces = light.specularImages[mipmap];\r\n                imageData[mipmap] = new Array<ArrayBufferView>(faces.length);\r\n                for (let face = 0; face < faces.length; face++) {\r\n                    const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\r\n                    this._loader.logOpen(`${specularImageContext}`);\r\n\r\n                    const index = faces[face];\r\n                    const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\r\n                    promises.push(\r\n                        this._loader.loadImageAsync(`/images/${index}`, image).then((data) => {\r\n                            imageData[mipmap][face] = data;\r\n                        })\r\n                    );\r\n\r\n                    this._loader.logClose();\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n\r\n            light._loaded = Promise.all(promises).then(() => {\r\n                const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\r\n                babylonTexture.name = light.name || \"environment\";\r\n                light._babylonTexture = babylonTexture;\r\n\r\n                if (light.intensity != undefined) {\r\n                    babylonTexture.level = light.intensity;\r\n                }\r\n\r\n                if (light.rotation) {\r\n                    let rotation = Quaternion.FromArray(light.rotation);\r\n\r\n                    // Invert the rotation so that positive rotation is counter-clockwise.\r\n                    if (!this._loader.babylonScene.useRightHandedSystem) {\r\n                        rotation = Quaternion.Inverse(rotation);\r\n                    }\r\n\r\n                    Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\r\n                }\r\n\r\n                if (!light.irradianceCoefficients) {\r\n                    throw new Error(`${context}: Irradiance coefficients are missing`);\r\n                }\r\n\r\n                const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\r\n                sphericalHarmonics.scaleInPlace(light.intensity);\r\n\r\n                sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n                const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n\r\n                // Compute the lod generation scale to fit exactly to the number of levels available.\r\n                const lodGenerationScale = (imageData.length - 1) / Math.log2(light.specularImageSize);\r\n                return babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\r\n            });\r\n        }\r\n\r\n        return light._loaded.then(() => {\r\n            return light._babylonTexture!;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_image_based(loader));\r\n","import { Vector3, Quaternion, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshGpuInstancing } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nimport \"core/Meshes/thinInstanceMesh\";\r\n\r\nconst NAME = \"EXT_mesh_gpu_instancing\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_mesh_gpu_instancing extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_mesh_gpu_instancing\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\r\n * [Playground Sample](https://playground.babylonjs.com/#QFIGLW#9)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_mesh_gpu_instancing implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshGpuInstancing, TransformNode>(context, node, this.name, (extensionContext, extension) => {\r\n            this._loader._disableInstancedMesh++;\r\n\r\n            const promise = this._loader.loadNodeAsync(`/nodes/${node.index}`, node, assign);\r\n\r\n            this._loader._disableInstancedMesh--;\r\n\r\n            if (!node._primitiveBabylonMeshes) {\r\n                return promise;\r\n            }\r\n\r\n            const promises = new Array<Promise<Nullable<Float32Array>>>();\r\n            let instanceCount = 0;\r\n\r\n            const loadAttribute = (attribute: string) => {\r\n                if (extension.attributes[attribute] == undefined) {\r\n                    promises.push(Promise.resolve(null));\r\n                    return;\r\n                }\r\n\r\n                const accessor = ArrayItem.Get(`${extensionContext}/attributes/${attribute}`, this._loader.gltf.accessors, extension.attributes[attribute]);\r\n                promises.push(this._loader._loadFloatAccessorAsync(`/accessors/${accessor.bufferView}`, accessor));\r\n\r\n                if (instanceCount === 0) {\r\n                    instanceCount = accessor.count;\r\n                } else if (instanceCount !== accessor.count) {\r\n                    throw new Error(`${extensionContext}/attributes: Instance buffer accessors do not have the same count.`);\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"TRANSLATION\");\r\n            loadAttribute(\"ROTATION\");\r\n            loadAttribute(\"SCALE\");\r\n\r\n            return promise.then((babylonTransformNode) => {\r\n                return Promise.all(promises).then(([translationBuffer, rotationBuffer, scaleBuffer]) => {\r\n                    const matrices = new Float32Array(instanceCount * 16);\r\n\r\n                    TmpVectors.Vector3[0].copyFromFloats(0, 0, 0); // translation\r\n                    TmpVectors.Quaternion[0].copyFromFloats(0, 0, 0, 1); // rotation\r\n                    TmpVectors.Vector3[1].copyFromFloats(1, 1, 1); // scale\r\n\r\n                    for (let i = 0; i < instanceCount; ++i) {\r\n                        translationBuffer && Vector3.FromArrayToRef(translationBuffer, i * 3, TmpVectors.Vector3[0]);\r\n                        rotationBuffer && Quaternion.FromArrayToRef(rotationBuffer, i * 4, TmpVectors.Quaternion[0]);\r\n                        scaleBuffer && Vector3.FromArrayToRef(scaleBuffer, i * 3, TmpVectors.Vector3[1]);\r\n\r\n                        Matrix.ComposeToRef(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0], TmpVectors.Matrix[0]);\r\n\r\n                        TmpVectors.Matrix[0].copyToArray(matrices, i * 16);\r\n                    }\r\n\r\n                    for (const babylonMesh of node._primitiveBabylonMeshes!) {\r\n                        (babylonMesh as Mesh).thinInstanceSetBuffer(\"matrix\", matrices, 16, true);\r\n                    }\r\n\r\n                    return babylonTransformNode;\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_mesh_gpu_instancing(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader\";\r\nimport type { IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshoptCompression } from \"babylonjs-gltf2interface\";\r\nimport { MeshoptCompression } from \"core/Meshes/Compression/meshoptCompression\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_meshopt_compression\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_meshopt_compression extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_meshopt_compression\"]: {};\r\n    }\r\n}\r\n\r\ninterface IBufferViewMeshopt extends IBufferView {\r\n    _meshOptData?: Promise<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md)\r\n *\r\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_meshopt_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshoptCompression, ArrayBufferView>(context, bufferView, this.name, (extensionContext, extension) => {\r\n            const bufferViewMeshopt = bufferView as IBufferViewMeshopt;\r\n            if (bufferViewMeshopt._meshOptData) {\r\n                return bufferViewMeshopt._meshOptData;\r\n            }\r\n\r\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\r\n            bufferViewMeshopt._meshOptData = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength).then((buffer) => {\r\n                return MeshoptCompression.Default.decodeGltfBufferAsync(buffer as Uint8Array, extension.count, extension.byteStride, extension.mode, extension.filter);\r\n            });\r\n\r\n            return bufferViewMeshopt._meshOptData;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_meshopt_compression(loader));\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IEXTTextureWebP } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_texture_webp\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_texture_webp extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_texture_webp\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_webp/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_texture_webp implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTTextureWebP, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_texture_webp(loader));\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IEXTTextureAVIF } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_texture_avif\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_texture_avif extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_texture_avif\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [glTF PR](https://github.com/KhronosGroup/glTF/pull/2235)\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_avif/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_texture_avif implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTTextureAVIF, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_texture_avif(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IEXTLightsIES_LightReference } from \"babylonjs-gltf2interface\";\r\nimport type { IEXTLightsIES_Light, INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nconst NAME = \"EXT_lights_ies\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_ies extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_ies\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Vendor/EXT_lights_ies)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_ies implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsIES_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as any;\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsIES_LightReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            let babylonSpotLight: SpotLight;\r\n            let light: IEXTLightsIES_Light;\r\n\r\n            const transformNode = await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\r\n                babylonSpotLight.angle = Math.PI / 2;\r\n                babylonSpotLight.innerAngle = 0;\r\n\r\n                babylonSpotLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonSpotLight;\r\n\r\n                babylonSpotLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonSpotLight.diffuse = extension.color ? Color3.FromArray(extension.color) : Color3.White();\r\n                babylonSpotLight.intensity = extension.multiplier || 1;\r\n                babylonSpotLight.range = Number.MAX_VALUE;\r\n                babylonSpotLight.parent = babylonMesh;\r\n\r\n                this._loader._babylonLights.push(babylonSpotLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonSpotLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n\r\n            // Load the profile\r\n            let bufferData: ArrayBufferView;\r\n            if (light!.uri) {\r\n                bufferData = await this._loader.loadUriAsync(context, light!, light!.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, light!.bufferView);\r\n                bufferData = await this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n            babylonSpotLight!.iesProfileTexture = new Texture(\r\n                name + \"_iesProfile\",\r\n                this._loader.babylonScene,\r\n                true,\r\n                false,\r\n                undefined,\r\n                null,\r\n                null,\r\n                bufferData,\r\n                true,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                \".ies\"\r\n            );\r\n\r\n            return transformNode;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_ies(loader));\r\n","import { DracoDecoder } from \"core/Meshes/Compression/dracoDecoder\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\r\nimport type { IKHRDracoMeshCompression } from \"babylonjs-gltf2interface\";\r\nimport type { IMeshPrimitive, IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem, LoadBoundingInfoFromPositionAccessor } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_draco_mesh_compression\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_draco_mesh_compression extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_draco_mesh_compression\"]: {};\r\n    }\r\n}\r\n\r\ninterface IBufferViewDraco extends IBufferView {\r\n    _dracoBabylonGeometry?: Promise<Geometry>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_draco_mesh_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * The draco decoder used to decode vertex data or DracoDecoder.Default if not defined\r\n     */\r\n    public dracoDecoder?: DracoDecoder;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines whether to use the normalized flag from the glTF accessor instead of the Draco data. Defaults to true.\r\n     */\r\n    public useNormalizedFlagFromAccessor = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = DracoDecoder.DefaultAvailable && this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        delete this.dracoDecoder;\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRDracoMeshCompression, Geometry>(context, primitive, this.name, (extensionContext, extension) => {\r\n            if (primitive.mode != undefined) {\r\n                if (primitive.mode !== MeshPrimitiveMode.TRIANGLES && primitive.mode !== MeshPrimitiveMode.TRIANGLE_STRIP) {\r\n                    throw new Error(`${context}: Unsupported mode ${primitive.mode}`);\r\n                }\r\n            }\r\n\r\n            const attributes: { [kind: string]: number } = {};\r\n            const normalized: { [kind: string]: boolean } = {};\r\n            const loadAttribute = (name: string, kind: string) => {\r\n                const uniqueId = extension.attributes[name];\r\n                if (uniqueId == undefined) {\r\n                    return;\r\n                }\r\n\r\n                babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n                if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                    babylonMesh._delayInfo.push(kind);\r\n                }\r\n\r\n                attributes[kind] = uniqueId;\r\n\r\n                if (this.useNormalizedFlagFromAccessor) {\r\n                    const accessor = ArrayItem.TryGet(this._loader.gltf.accessors, primitive.attributes[name]);\r\n                    if (accessor) {\r\n                        normalized[kind] = accessor.normalized || false;\r\n                    }\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n            loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n            loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n            loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n            loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n            loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n            loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n            loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n            loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n            loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n            loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n            loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind);\r\n\r\n            const bufferView = ArrayItem.Get(extensionContext, this._loader.gltf.bufferViews, extension.bufferView) as IBufferViewDraco;\r\n            if (!bufferView._dracoBabylonGeometry) {\r\n                bufferView._dracoBabylonGeometry = this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                    const dracoDecoder = this.dracoDecoder || DracoDecoder.Default;\r\n                    const positionAccessor = ArrayItem.TryGet(this._loader.gltf.accessors, primitive.attributes[\"POSITION\"]);\r\n                    const babylonBoundingInfo =\r\n                        !this._loader.parent.alwaysComputeBoundingBox && !babylonMesh.skeleton && positionAccessor ? LoadBoundingInfoFromPositionAccessor(positionAccessor) : null;\r\n                    return dracoDecoder\r\n                        ._decodeMeshToGeometryForGltfAsync(babylonMesh.name, this._loader.babylonScene, data, attributes, normalized, babylonBoundingInfo)\r\n                        .catch((error) => {\r\n                            throw new Error(`${context}: ${error.message}`);\r\n                        });\r\n                });\r\n            }\r\n\r\n            return bufferView._dracoBabylonGeometry;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_draco_mesh_compression(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IKHRLightsPunctual_LightReference } from \"babylonjs-gltf2interface\";\r\nimport { KHRLightsPunctual_LightType } from \"babylonjs-gltf2interface\";\r\nimport type { INode, IKHRLightsPunctual_Light } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_lights_punctual\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_lights_punctual extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_lights_punctual\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_lights_punctual/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_lights implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IKHRLightsPunctual_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as any;\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRLightsPunctual_LightReference, TransformNode>(context, node, this.name, (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            return this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                let babylonLight: Light;\r\n\r\n                const light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                switch (light.type) {\r\n                    case KHRLightsPunctual_LightType.DIRECTIONAL: {\r\n                        const babylonDirectionalLight = new DirectionalLight(name, Vector3.Backward(), this._loader.babylonScene);\r\n                        babylonDirectionalLight.position.setAll(0);\r\n                        babylonLight = babylonDirectionalLight;\r\n                        break;\r\n                    }\r\n                    case KHRLightsPunctual_LightType.POINT: {\r\n                        babylonLight = new PointLight(name, Vector3.Zero(), this._loader.babylonScene);\r\n                        break;\r\n                    }\r\n                    case KHRLightsPunctual_LightType.SPOT: {\r\n                        const babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\r\n                        babylonSpotLight.angle = ((light.spot && light.spot.outerConeAngle) || Math.PI / 4) * 2;\r\n                        babylonSpotLight.innerAngle = ((light.spot && light.spot.innerConeAngle) || 0) * 2;\r\n                        babylonLight = babylonSpotLight;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        this._loader.babylonScene._blockEntityCollection = false;\r\n                        throw new Error(`${extensionContext}: Invalid light type (${light.type})`);\r\n                    }\r\n                }\r\n\r\n                babylonLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonLight;\r\n\r\n                babylonLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonLight.diffuse = light.color ? Color3.FromArray(light.color) : Color3.White();\r\n                babylonLight.intensity = light.intensity == undefined ? 1 : light.intensity;\r\n                babylonLight.range = light.range == undefined ? Number.MAX_VALUE : light.range;\r\n                babylonLight.parent = babylonMesh;\r\n\r\n                this._loader._babylonLights.push(babylonLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_lights(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsPbrSpecularGlossiness } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_pbrSpecularGlossiness extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_pbrSpecularGlossiness\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_pbrSpecularGlossiness implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 200;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsPbrSpecularGlossiness>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularGlossinessPropertiesAsync(context: string, properties: IKHRMaterialsPbrSpecularGlossiness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.metallic = null;\r\n        babylonMaterial.roughness = null;\r\n\r\n        if (properties.diffuseFactor) {\r\n            babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\r\n            babylonMaterial.alpha = properties.diffuseFactor[3];\r\n        } else {\r\n            babylonMaterial.albedoColor = Color3.White();\r\n        }\r\n\r\n        babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\r\n        babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\r\n\r\n        if (properties.diffuseTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse)`;\r\n                    babylonMaterial.albedoTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularGlossinessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\r\n                    babylonMaterial.reflectivityTexture = texture;\r\n                    babylonMaterial.reflectivityTexture.hasAlpha = true;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_unlit extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_unlit\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_unlit implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 210;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, () => {\r\n            return this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\r\n        });\r\n    }\r\n\r\n    private _loadUnlitPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n        babylonMaterial.unlit = true;\r\n\r\n        const properties = material.pbrMetallicRoughness;\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\r\n                babylonMaterial.alpha = properties.baseColorFactor[3];\r\n            } else {\r\n                babylonMaterial.albedoColor = Color3.White();\r\n            }\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this._loader.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        babylonMaterial.albedoTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        if (material.doubleSided) {\r\n            babylonMaterial.backFaceCulling = false;\r\n            babylonMaterial.twoSidedLighting = true;\r\n        }\r\n\r\n        this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_unlit(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsClearcoat } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_clearcoat extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_clearcoat\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_clearcoat implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsClearcoat>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadClearCoatPropertiesAsync(context: string, properties: IKHRMaterialsClearcoat, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.clearCoat.isEnabled = true;\r\n        babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\r\n        babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\r\n\r\n        if (properties.clearcoatFactor != undefined) {\r\n            babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.intensity = 0;\r\n        }\r\n\r\n        if (properties.clearcoatTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat)`;\r\n                    babylonMaterial.clearCoat.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessFactor != undefined) {\r\n            babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.roughness = 0;\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessTexture) {\r\n            (properties.clearcoatRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\r\n                    babylonMaterial.clearCoat.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatNormalTexture) {\r\n            (properties.clearcoatNormalTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\r\n                    babylonMaterial.clearCoat.bumpTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\r\n            babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\r\n            if (properties.clearcoatNormalTexture.scale != undefined) {\r\n                babylonMaterial.clearCoat.bumpTexture!.level = properties.clearcoatNormalTexture.scale;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_clearcoat(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_iridescence extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_iridescence\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_iridescence implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIridescence>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIridescencePropertiesAsync(context: string, properties: IKHRMaterialsIridescence, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.iridescence.isEnabled = true;\r\n\r\n        babylonMaterial.iridescence.intensity = properties.iridescenceFactor ?? 0;\r\n        babylonMaterial.iridescence.indexOfRefraction = properties.iridescenceIor ?? (properties as any).iridescenceIOR ?? 1.3;\r\n        babylonMaterial.iridescence.minimumThickness = properties.iridescenceThicknessMinimum ?? 100;\r\n        babylonMaterial.iridescence.maximumThickness = properties.iridescenceThicknessMaximum ?? 400;\r\n\r\n        if (properties.iridescenceTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence)`;\r\n                    babylonMaterial.iridescence.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.iridescenceThicknessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\r\n                    babylonMaterial.iridescence.thicknessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_iridescence(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsAnisotropy } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_anisotropy\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_anisotropy extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_anisotropy\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_anisotropy)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_anisotropy implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsAnisotropy>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIridescencePropertiesAsync(context: string, properties: IKHRMaterialsAnisotropy, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.anisotropy.isEnabled = true;\r\n\r\n        babylonMaterial.anisotropy.intensity = properties.anisotropyStrength ?? 0;\r\n        babylonMaterial.anisotropy.angle = properties.anisotropyRotation ?? 0;\r\n\r\n        if (properties.anisotropyTexture) {\r\n            (properties.anisotropyTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/anisotropyTexture`, properties.anisotropyTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Anisotropy Intensity)`;\r\n                    babylonMaterial.anisotropy.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_anisotropy(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsEmissiveStrength } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_emissive_strength\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_emissive_strength extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_emissive_strength\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_emissive_strength implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 170;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsEmissiveStrength>(context, material, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial).then(() => {\r\n                this._loadEmissiveProperties(extensionContext, extension, babylonMaterial);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _loadEmissiveProperties(context: string, properties: IKHRMaterialsEmissiveStrength, babylonMaterial: Material): void {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        if (properties.emissiveStrength !== undefined) {\r\n            babylonMaterial.emissiveIntensity = properties.emissiveStrength;\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_emissive_strength(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_sheen extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_sheen\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_sheen implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSheen>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSheenPropertiesAsync(context: string, properties: IKHRMaterialsSheen, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.sheen.isEnabled = true;\r\n        babylonMaterial.sheen.intensity = 1;\r\n\r\n        if (properties.sheenColorFactor != undefined) {\r\n            babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\r\n        } else {\r\n            babylonMaterial.sheen.color = Color3.Black();\r\n        }\r\n\r\n        if (properties.sheenColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Color)`;\r\n                    babylonMaterial.sheen.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.sheenRoughnessFactor !== undefined) {\r\n            babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.sheen.roughness = 0;\r\n        }\r\n\r\n        if (properties.sheenRoughnessTexture) {\r\n            (properties.sheenRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\r\n                    babylonMaterial.sheen.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        babylonMaterial.sheen.albedoScaling = true;\r\n        babylonMaterial.sheen.useRoughnessFromMainTexture = false;\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_sheen(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_specular extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_specular\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSpecular>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHRMaterialsSpecular, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (properties.specularFactor !== undefined) {\r\n            babylonMaterial.metallicF0Factor = properties.specularFactor;\r\n        }\r\n\r\n        if (properties.specularColorFactor !== undefined) {\r\n            babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\r\n        }\r\n\r\n        if (properties.specularTexture) {\r\n            (properties.specularTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular)`;\r\n                    babylonMaterial.metallicReflectanceTexture = texture;\r\n                    babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Color)`;\r\n                    babylonMaterial.reflectanceTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_specular(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_ior extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_ior\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_ior implements IGLTFLoaderExtension {\r\n    /**\r\n     * Default ior Value from the spec.\r\n     */\r\n    private static readonly _DEFAULT_IOR = 1.5;\r\n\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 180;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIor>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIorPropertiesAsync(context: string, properties: IKHRMaterialsIor, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        if (properties.ior !== undefined) {\r\n            babylonMaterial.indexOfRefraction = properties.ior;\r\n        } else {\r\n            babylonMaterial.indexOfRefraction = KHR_materials_ior._DEFAULT_IOR;\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_ior(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Node } from \"core/node\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { INode, IMeshPrimitive, IMesh } from \"../glTFLoaderInterfaces\";\r\nimport type { IKHRMaterialVariants_Mapping, IKHRMaterialVariants_Variant, IKHRMaterialVariants_Variants } from \"babylonjs-gltf2interface\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport type { MaterialVariantsController } from \"../../glTFFileLoader\";\r\n\r\nconst NAME = \"KHR_materials_variants\";\r\n\r\nexport { MaterialVariantsController };\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // Define options related types here so they can be referenced in the options,\r\n    // but export the types at the module level. This ensures the types are in the\r\n    // correct namespace for UMD.\r\n    type MaterialVariantsController = {\r\n        /**\r\n         * The list of available variant names for this asset.\r\n         */\r\n        readonly variants: readonly string[];\r\n\r\n        /**\r\n         * Gets or sets the selected variant.\r\n         */\r\n        selectedVariant: string;\r\n    };\r\n\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_variants extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_variants\"]: Partial<{\r\n            /**\r\n             * Specifies the name of the variant that should be selected by default.\r\n             */\r\n            defaultVariant: string;\r\n\r\n            /**\r\n             * Defines a callback that will be called if material variants are loaded.\r\n             * @experimental\r\n             */\r\n            onLoaded: (controller: MaterialVariantsController) => void;\r\n        }>;\r\n    }\r\n}\r\n\r\ninterface IVariantsMap {\r\n    [key: string]: Array<{ mesh: AbstractMesh; material: Nullable<Material> }>;\r\n}\r\n\r\ninterface IExtensionMetadata {\r\n    lastSelected: Nullable<string | Array<string>>;\r\n    original: Array<{ mesh: AbstractMesh; material: Nullable<Material> }>;\r\n    variants: IVariantsMap;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_variants/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_variants implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _variants?: Array<IKHRMaterialVariants_Variant>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available variant names for this asset.\r\n     * @param rootNode The glTF root node\r\n     * @returns the list of all the variant names for this model\r\n     */\r\n    public static GetAvailableVariants(rootNode: TransformNode): string[] {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            return [];\r\n        }\r\n\r\n        return Object.keys(extensionMetadata.variants);\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available variant names for this asset.\r\n     * @param rootNode The glTF root node\r\n     * @returns the list of all the variant names for this model\r\n     */\r\n    public getAvailableVariants(rootNode: TransformNode): string[] {\r\n        return KHR_materials_variants.GetAvailableVariants(rootNode);\r\n    }\r\n\r\n    /**\r\n     * Select a variant given a variant name or a list of variant names.\r\n     * @param rootNode The glTF root node\r\n     * @param variantName The variant name(s) to select.\r\n     */\r\n    public static SelectVariant(rootNode: TransformNode, variantName: string | string[]): void {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot select variant on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        const select = (variantName: string): void => {\r\n            const entries = extensionMetadata.variants[variantName];\r\n            if (entries) {\r\n                for (const entry of entries) {\r\n                    entry.mesh.material = entry.material;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (variantName instanceof Array) {\r\n            for (const name of variantName) {\r\n                select(name);\r\n            }\r\n        } else {\r\n            select(variantName);\r\n        }\r\n\r\n        extensionMetadata.lastSelected = variantName;\r\n    }\r\n\r\n    /**\r\n     * Select a variant given a variant name or a list of variant names.\r\n     * @param rootNode The glTF root node\r\n     * @param variantName The variant name(s) to select.\r\n     */\r\n    public selectVariant(rootNode: TransformNode, variantName: string | string[]): void {\r\n        KHR_materials_variants.SelectVariant(rootNode, variantName);\r\n    }\r\n\r\n    /**\r\n     * Reset back to the original before selecting a variant.\r\n     * @param rootNode The glTF root node\r\n     */\r\n    public static Reset(rootNode: TransformNode): void {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot reset on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        for (const entry of extensionMetadata.original) {\r\n            entry.mesh.material = entry.material;\r\n        }\r\n\r\n        extensionMetadata.lastSelected = null;\r\n    }\r\n\r\n    /**\r\n     * Reset back to the original before selecting a variant.\r\n     * @param rootNode The glTF root node\r\n     */\r\n    public reset(rootNode: TransformNode): void {\r\n        KHR_materials_variants.Reset(rootNode);\r\n    }\r\n\r\n    /**\r\n     * Gets the last selected variant name(s) or null if original.\r\n     * @param rootNode The glTF root node\r\n     * @returns The selected variant name(s).\r\n     */\r\n    public static GetLastSelectedVariant(rootNode: TransformNode): Nullable<string | string[]> {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot get the last selected variant on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        return extensionMetadata.lastSelected;\r\n    }\r\n\r\n    /**\r\n     * Gets the last selected variant name(s) or null if original.\r\n     * @param rootNode The glTF root node\r\n     * @returns The selected variant name(s).\r\n     */\r\n    public getLastSelectedVariant(rootNode: TransformNode): Nullable<string | string[]> {\r\n        return KHR_materials_variants.GetLastSelectedVariant(rootNode);\r\n    }\r\n\r\n    private static _GetExtensionMetadata(rootNode: Nullable<TransformNode>): Nullable<IExtensionMetadata> {\r\n        return rootNode?._internalMetadata?.gltf?.[NAME] || null;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IKHRMaterialVariants_Variants;\r\n            this._variants = extension.variants;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onReady(): void {\r\n        const rootNode = this._loader.rootBabylonMesh;\r\n        if (rootNode) {\r\n            const options = this._loader.parent.extensionOptions[NAME];\r\n            if (options?.defaultVariant) {\r\n                KHR_materials_variants.SelectVariant(rootNode, options.defaultVariant);\r\n            }\r\n\r\n            options?.onLoaded?.({\r\n                get variants() {\r\n                    return KHR_materials_variants.GetAvailableVariants(rootNode);\r\n                },\r\n                get selectedVariant(): string {\r\n                    const lastSelectedVariant = KHR_materials_variants.GetLastSelectedVariant(rootNode);\r\n                    if (!lastSelectedVariant) {\r\n                        return KHR_materials_variants.GetAvailableVariants(rootNode)[0];\r\n                    }\r\n                    if (Array.isArray(lastSelectedVariant)) {\r\n                        return lastSelectedVariant[0];\r\n                    }\r\n                    return lastSelectedVariant;\r\n                },\r\n                set selectedVariant(variantName) {\r\n                    KHR_materials_variants.SelectVariant(rootNode, variantName);\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Nullable<Promise<AbstractMesh>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialVariants_Mapping, AbstractMesh>(context, primitive, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(\r\n                this._loader._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, (babylonMesh) => {\r\n                    assign(babylonMesh);\r\n\r\n                    if (babylonMesh instanceof Mesh) {\r\n                        const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\r\n\r\n                        const root = this._loader.rootBabylonMesh;\r\n                        const metadata = root ? (root._internalMetadata = root._internalMetadata || {}) : {};\r\n                        const gltf = (metadata.gltf = metadata.gltf || {});\r\n                        const extensionMetadata: IExtensionMetadata = (gltf[NAME] = gltf[NAME] || { lastSelected: null, original: [], variants: {} });\r\n\r\n                        // Store the original material.\r\n                        extensionMetadata.original.push({ mesh: babylonMesh, material: babylonMesh.material });\r\n\r\n                        // For each mapping, look at the variants and make a new entry for them.\r\n                        for (let mappingIndex = 0; mappingIndex < extension.mappings.length; ++mappingIndex) {\r\n                            const mapping = extension.mappings[mappingIndex];\r\n                            const material = ArrayItem.Get(`${extensionContext}/mappings/${mappingIndex}/material`, this._loader.gltf.materials, mapping.material);\r\n                            promises.push(\r\n                                this._loader._loadMaterialAsync(`#/materials/${mapping.material}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                                    for (let mappingVariantIndex = 0; mappingVariantIndex < mapping.variants.length; ++mappingVariantIndex) {\r\n                                        const variantIndex = mapping.variants[mappingVariantIndex];\r\n                                        const variant = ArrayItem.Get(`/extensions/${NAME}/variants/${variantIndex}`, this._variants, variantIndex);\r\n                                        extensionMetadata.variants[variant.name] = extensionMetadata.variants[variant.name] || [];\r\n                                        extensionMetadata.variants[variant.name].push({\r\n                                            mesh: babylonMesh,\r\n                                            material: babylonMaterial,\r\n                                        });\r\n\r\n                                        // Replace the target when original mesh is cloned\r\n                                        babylonMesh.onClonedObservable.add((newOne: Node) => {\r\n                                            const newMesh = newOne as Mesh;\r\n                                            let metadata: Nullable<IExtensionMetadata> = null;\r\n                                            let newRoot: Nullable<Node> = newMesh;\r\n\r\n                                            // Find root to get medata\r\n                                            do {\r\n                                                newRoot = newRoot!.parent;\r\n                                                if (!newRoot) {\r\n                                                    return;\r\n                                                }\r\n                                                metadata = KHR_materials_variants._GetExtensionMetadata(newRoot as Mesh);\r\n                                            } while (metadata === null);\r\n\r\n                                            // Need to clone the metadata on the root (first time only)\r\n                                            if (root && metadata === KHR_materials_variants._GetExtensionMetadata(root)) {\r\n                                                // Copy main metadata\r\n                                                newRoot._internalMetadata = {};\r\n                                                for (const key in root._internalMetadata) {\r\n                                                    newRoot._internalMetadata[key] = root._internalMetadata[key];\r\n                                                }\r\n\r\n                                                // Copy the gltf metadata\r\n                                                newRoot._internalMetadata.gltf = [];\r\n                                                for (const key in root._internalMetadata.gltf) {\r\n                                                    newRoot._internalMetadata.gltf[key] = root._internalMetadata.gltf[key];\r\n                                                }\r\n\r\n                                                // Duplicate the extension specific metadata\r\n                                                newRoot._internalMetadata.gltf[NAME] = { lastSelected: null, original: [], variants: {} };\r\n                                                for (const original of metadata.original) {\r\n                                                    newRoot._internalMetadata.gltf[NAME].original.push({\r\n                                                        mesh: original.mesh,\r\n                                                        material: original.material,\r\n                                                    });\r\n                                                }\r\n                                                for (const key in metadata.variants) {\r\n                                                    if (Object.prototype.hasOwnProperty.call(metadata.variants, key)) {\r\n                                                        newRoot._internalMetadata.gltf[NAME].variants[key] = [];\r\n                                                        for (const variantEntry of metadata.variants[key]) {\r\n                                                            newRoot._internalMetadata.gltf[NAME].variants[key].push({\r\n                                                                mesh: variantEntry.mesh,\r\n                                                                material: variantEntry.material,\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                                metadata = newRoot._internalMetadata.gltf[NAME];\r\n                                            }\r\n\r\n                                            // Relocate\r\n                                            for (const target of metadata!.original) {\r\n                                                if (target.mesh === babylonMesh) {\r\n                                                    target.mesh = newMesh;\r\n                                                }\r\n                                            }\r\n                                            for (const target of metadata!.variants[variant.name]) {\r\n                                                if (target.mesh === babylonMesh) {\r\n                                                    target.mesh = newMesh;\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                })\r\n                            );\r\n                        }\r\n                    }\r\n                })\r\n            );\r\n            return Promise.all(promises).then(([babylonMesh]) => {\r\n                return babylonMesh;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_variants(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsTransmission } from \"babylonjs-gltf2interface\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Color4 } from \"core/Maths/math.color\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\ninterface ITransmissionHelperHolder {\r\n    /**\r\n     * @internal\r\n     */\r\n    _transmissionHelper: TransmissionHelper | undefined;\r\n}\r\n\r\ninterface ITransmissionHelperOptions {\r\n    /**\r\n     * The size of the render buffers (default: 1024)\r\n     */\r\n    renderSize: number;\r\n\r\n    /**\r\n     * The number of samples to use when generating the render target texture for opaque meshes (default: 4)\r\n     */\r\n    samples: number;\r\n\r\n    /**\r\n     * Scale to apply when selecting the LOD level to sample the refraction texture (default: 1)\r\n     */\r\n    lodGenerationScale: number;\r\n\r\n    /**\r\n     * Offset to apply when selecting the LOD level to sample the refraction texture (default: -4)\r\n     */\r\n    lodGenerationOffset: number;\r\n\r\n    /**\r\n     * Type of the refraction render target texture (default: TEXTURETYPE_HALF_FLOAT)\r\n     */\r\n    renderTargetTextureType: number;\r\n\r\n    /**\r\n     * Defines if the mipmaps for the refraction render target texture must be generated (default: true)\r\n     */\r\n    generateMipmaps: boolean;\r\n\r\n    /**\r\n     * Clear color of the opaque texture. If not provided, use the scene clear color (which will be converted to linear space).\r\n     * If provided, should be in linear space\r\n     */\r\n    clearColor?: Color4;\r\n}\r\n\r\n/**\r\n * A class to handle setting up the rendering of opaque objects to be shown through transmissive objects.\r\n */\r\nclass TransmissionHelper {\r\n    /**\r\n     * Creates the default options for the helper.\r\n     * @returns the default options\r\n     */\r\n    private static _GetDefaultOptions(): ITransmissionHelperOptions {\r\n        return {\r\n            renderSize: 1024,\r\n            samples: 4,\r\n            lodGenerationScale: 1,\r\n            lodGenerationOffset: -4,\r\n            renderTargetTextureType: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            generateMipmaps: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene & ITransmissionHelperHolder;\r\n\r\n    private _options: ITransmissionHelperOptions;\r\n\r\n    private _opaqueRenderTarget: Nullable<RenderTargetTexture> = null;\r\n    private _opaqueMeshesCache: AbstractMesh[] = [];\r\n    private _transparentMeshesCache: AbstractMesh[] = [];\r\n    private _materialObservers: { [id: string]: Nullable<Observer<AbstractMesh>> } = {};\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string; exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<ITransmissionHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...TransmissionHelper._GetDefaultOptions(),\r\n            ...options,\r\n        };\r\n        this._scene = scene as any;\r\n        this._scene._transmissionHelper = this;\r\n\r\n        this.onErrorObservable = new Observable();\r\n        this._scene.onDisposeObservable.addOnce(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        this._parseScene();\r\n        this._setupRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<ITransmissionHelperOptions>) {\r\n        // First check if any options are actually being changed. If not, exit.\r\n        const newValues = Object.keys(options).filter((key: string) => (this._options as any)[key] !== (options as any)[key]);\r\n        if (!newValues.length) {\r\n            return;\r\n        }\r\n\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options,\r\n        };\r\n\r\n        const oldOptions = this._options;\r\n        this._options = newOptions;\r\n\r\n        // If size changes, recreate everything\r\n        if (\r\n            newOptions.renderSize !== oldOptions.renderSize ||\r\n            newOptions.renderTargetTextureType !== oldOptions.renderTargetTextureType ||\r\n            newOptions.generateMipmaps !== oldOptions.generateMipmaps ||\r\n            !this._opaqueRenderTarget\r\n        ) {\r\n            this._setupRenderTargets();\r\n        } else {\r\n            this._opaqueRenderTarget.samples = newOptions.samples;\r\n            this._opaqueRenderTarget.lodGenerationScale = newOptions.lodGenerationScale;\r\n            this._opaqueRenderTarget.lodGenerationOffset = newOptions.lodGenerationOffset;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the opaque render target texture or null if not available.\r\n     */\r\n    public getOpaqueTarget(): Nullable<Texture> {\r\n        return this._opaqueRenderTarget;\r\n    }\r\n\r\n    private _shouldRenderAsTransmission(material: Nullable<Material>): boolean {\r\n        if (!material) {\r\n            return false;\r\n        }\r\n        if (material instanceof PBRMaterial && material.subSurface.isRefractionEnabled) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _addMesh(mesh: AbstractMesh): void {\r\n        this._materialObservers[mesh.uniqueId] = mesh.onMaterialChangedObservable.add(this._onMeshMaterialChanged.bind(this));\r\n\r\n        // we need to defer the processing because _addMesh may be called as part as an instance mesh creation, in which case some\r\n        // internal properties are not setup yet, like _sourceMesh (needed when doing mesh.material below)\r\n        Tools.SetImmediate(() => {\r\n            if (this._shouldRenderAsTransmission(mesh.material)) {\r\n                (mesh.material as PBRMaterial).refractionTexture = this._opaqueRenderTarget;\r\n                if (this._transparentMeshesCache.indexOf(mesh) === -1) {\r\n                    this._transparentMeshesCache.push(mesh);\r\n                }\r\n            } else {\r\n                if (this._opaqueMeshesCache.indexOf(mesh) === -1) {\r\n                    this._opaqueMeshesCache.push(mesh);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _removeMesh(mesh: AbstractMesh): void {\r\n        mesh.onMaterialChangedObservable.remove(this._materialObservers[mesh.uniqueId]);\r\n        delete this._materialObservers[mesh.uniqueId];\r\n        let idx = this._transparentMeshesCache.indexOf(mesh);\r\n        if (idx !== -1) {\r\n            this._transparentMeshesCache.splice(idx, 1);\r\n        }\r\n        idx = this._opaqueMeshesCache.indexOf(mesh);\r\n        if (idx !== -1) {\r\n            this._opaqueMeshesCache.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    private _parseScene(): void {\r\n        this._scene.meshes.forEach(this._addMesh.bind(this));\r\n        // Listen for when a mesh is added to the scene and add it to our cache lists.\r\n        this._scene.onNewMeshAddedObservable.add(this._addMesh.bind(this));\r\n        // Listen for when a mesh is removed from to the scene and remove it from our cache lists.\r\n        this._scene.onMeshRemovedObservable.add(this._removeMesh.bind(this));\r\n    }\r\n\r\n    // When one of the meshes in the scene has its material changed, make sure that it's in the correct cache list.\r\n    private _onMeshMaterialChanged(mesh: AbstractMesh) {\r\n        const transparentIdx = this._transparentMeshesCache.indexOf(mesh);\r\n        const opaqueIdx = this._opaqueMeshesCache.indexOf(mesh);\r\n\r\n        // If the material is transparent, make sure that it's added to the transparent list and removed from the opaque list\r\n        const useTransmission = this._shouldRenderAsTransmission(mesh.material);\r\n        if (useTransmission) {\r\n            if (mesh.material instanceof PBRMaterial) {\r\n                mesh.material.subSurface.refractionTexture = this._opaqueRenderTarget;\r\n            }\r\n            if (opaqueIdx !== -1) {\r\n                this._opaqueMeshesCache.splice(opaqueIdx, 1);\r\n                this._transparentMeshesCache.push(mesh);\r\n            } else if (transparentIdx === -1) {\r\n                this._transparentMeshesCache.push(mesh);\r\n            }\r\n            // If the material is opaque, make sure that it's added to the opaque list and removed from the transparent list\r\n        } else {\r\n            if (transparentIdx !== -1) {\r\n                this._transparentMeshesCache.splice(transparentIdx, 1);\r\n                this._opaqueMeshesCache.push(mesh);\r\n            } else if (opaqueIdx === -1) {\r\n                this._opaqueMeshesCache.push(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Check if the opaque render target has not been disposed and can still be used.\r\n     * @returns\r\n     */\r\n    public _isRenderTargetValid() {\r\n        return this._opaqueRenderTarget?.getInternalTexture() !== null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Setup the render targets according to the specified options.\r\n     */\r\n    public _setupRenderTargets(): void {\r\n        if (this._opaqueRenderTarget) {\r\n            this._opaqueRenderTarget.dispose();\r\n        }\r\n        this._opaqueRenderTarget = new RenderTargetTexture(\r\n            \"opaqueSceneTexture\",\r\n            this._options.renderSize,\r\n            this._scene,\r\n            this._options.generateMipmaps,\r\n            undefined,\r\n            this._options.renderTargetTextureType\r\n        );\r\n        this._opaqueRenderTarget.ignoreCameraViewport = true;\r\n        this._opaqueRenderTarget.renderList = this._opaqueMeshesCache;\r\n        this._opaqueRenderTarget.clearColor = this._options.clearColor?.clone() ?? this._scene.clearColor.clone();\r\n        this._opaqueRenderTarget.gammaSpace = false;\r\n        this._opaqueRenderTarget.lodGenerationScale = this._options.lodGenerationScale;\r\n        this._opaqueRenderTarget.lodGenerationOffset = this._options.lodGenerationOffset;\r\n        this._opaqueRenderTarget.samples = this._options.samples;\r\n        this._opaqueRenderTarget.renderSprites = true;\r\n        this._opaqueRenderTarget.renderParticles = true;\r\n        this._opaqueRenderTarget.renderInLinearSpace = true;\r\n\r\n        let saveSceneEnvIntensity: number;\r\n        this._opaqueRenderTarget.onBeforeBindObservable.add((opaqueRenderTarget) => {\r\n            saveSceneEnvIntensity = this._scene.environmentIntensity;\r\n            this._scene.environmentIntensity = 1.0;\r\n            if (!this._options.clearColor) {\r\n                this._scene.clearColor.toLinearSpaceToRef(opaqueRenderTarget.clearColor, this._scene.getEngine().useExactSrgbConversions);\r\n            } else {\r\n                opaqueRenderTarget.clearColor.copyFrom(this._options.clearColor);\r\n            }\r\n        });\r\n        this._opaqueRenderTarget.onAfterUnbindObservable.add(() => {\r\n            this._scene.environmentIntensity = saveSceneEnvIntensity;\r\n        });\r\n\r\n        this._transparentMeshesCache.forEach((mesh: AbstractMesh) => {\r\n            if (this._shouldRenderAsTransmission(mesh.material)) {\r\n                (mesh.material as PBRMaterial).refractionTexture = this._opaqueRenderTarget;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        this._scene._transmissionHelper = undefined;\r\n        if (this._opaqueRenderTarget) {\r\n            this._opaqueRenderTarget.dispose();\r\n            this._opaqueRenderTarget = null;\r\n        }\r\n        this._transparentMeshesCache = [];\r\n        this._opaqueMeshesCache = [];\r\n    }\r\n}\r\n\r\nconst NAME = \"KHR_materials_transmission\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_transmission extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_transmission\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_transmission implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 175;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            loader.parent.transparencyAsCoverage = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsTransmission>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadTransparentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadTransparentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsTransmission): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n        const pbrMaterial = babylonMaterial as PBRMaterial;\r\n\r\n        // Enables \"refraction\" texture which represents transmitted light.\r\n        pbrMaterial.subSurface.isRefractionEnabled = true;\r\n\r\n        // Since this extension models thin-surface transmission only, we must make IOR = 1.0\r\n        pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\r\n\r\n        // Albedo colour will tint transmission.\r\n        pbrMaterial.subSurface.useAlbedoToTintRefraction = true;\r\n\r\n        if (extension.transmissionFactor !== undefined) {\r\n            pbrMaterial.subSurface.refractionIntensity = extension.transmissionFactor;\r\n            const scene = pbrMaterial.getScene() as unknown as ITransmissionHelperHolder;\r\n            if (pbrMaterial.subSurface.refractionIntensity && !scene._transmissionHelper) {\r\n                new TransmissionHelper({}, pbrMaterial.getScene());\r\n            } else if (pbrMaterial.subSurface.refractionIntensity && !scene._transmissionHelper?._isRenderTargetValid()) {\r\n                // If the render target is not valid, recreate it.\r\n                scene._transmissionHelper?._setupRenderTargets();\r\n            }\r\n        } else {\r\n            pbrMaterial.subSurface.refractionIntensity = 0.0;\r\n            pbrMaterial.subSurface.isRefractionEnabled = false;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        pbrMaterial.subSurface.minimumThickness = 0.0;\r\n        pbrMaterial.subSurface.maximumThickness = 0.0;\r\n        if (extension.transmissionTexture) {\r\n            (extension.transmissionTexture as ITextureInfo).nonColorData = true;\r\n            return this._loader.loadTextureInfoAsync(`${context}/transmissionTexture`, extension.transmissionTexture, undefined).then((texture: BaseTexture) => {\r\n                texture.name = `${babylonMaterial.name} (Transmission)`;\r\n                pbrMaterial.subSurface.refractionIntensityTexture = texture;\r\n                pbrMaterial.subSurface.useGltfStyleTextures = true;\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_transmission(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsDiffuseTransmission } from \"babylonjs-gltf2interface\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_diffuse_transmission\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_diffuse_transmission extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_diffuse_transmission\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_diffuse_transmission implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 174;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            loader.parent.transparencyAsCoverage = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsDiffuseTransmission>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadTranslucentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsDiffuseTransmission): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const pbrMaterial = babylonMaterial as PBRMaterial;\r\n\r\n        // Enables \"translucency\" texture which represents diffusely-transmitted light.\r\n        pbrMaterial.subSurface.isTranslucencyEnabled = true;\r\n\r\n        // Since this extension models thin-surface transmission only, we must make the\r\n        // internal IOR == 1.0 and set the thickness to 0.\r\n        pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\r\n        pbrMaterial.subSurface.minimumThickness = 0.0;\r\n        pbrMaterial.subSurface.maximumThickness = 0.0;\r\n\r\n        // Tint color will be used for transmission.\r\n        pbrMaterial.subSurface.useAlbedoToTintTranslucency = false;\r\n\r\n        if (extension.diffuseTransmissionFactor !== undefined) {\r\n            pbrMaterial.subSurface.translucencyIntensity = extension.diffuseTransmissionFactor;\r\n        } else {\r\n            pbrMaterial.subSurface.translucencyIntensity = 0.0;\r\n            pbrMaterial.subSurface.isTranslucencyEnabled = false;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        pbrMaterial.subSurface.useGltfStyleTextures = true;\r\n\r\n        if (extension.diffuseTransmissionTexture) {\r\n            (extension.diffuseTransmissionTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionTexture`, extension.diffuseTransmissionTexture).then((texture: BaseTexture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse Transmission)`;\r\n                    pbrMaterial.subSurface.translucencyIntensityTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (extension.diffuseTransmissionColorFactor !== undefined) {\r\n            pbrMaterial.subSurface.translucencyColor = Color3.FromArray(extension.diffuseTransmissionColorFactor);\r\n        } else {\r\n            pbrMaterial.subSurface.translucencyColor = Color3.White();\r\n        }\r\n\r\n        if (extension.diffuseTransmissionColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionColorTexture`, extension.diffuseTransmissionColorTexture).then((texture: BaseTexture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse Transmission Color)`;\r\n                    pbrMaterial.subSurface.translucencyColorTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_diffuse_transmission(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsVolume } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_volume\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_volume extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_volume\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_volume implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 173;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            // We need to disable instance usage because the attenuation factor depends on the node scale of each individual mesh\r\n            this._loader._disableInstancedMesh++;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        if (this.enabled) {\r\n            this._loader._disableInstancedMesh--;\r\n        }\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsVolume>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadVolumePropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadVolumePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsVolume): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        // If transparency isn't enabled already, this extension shouldn't do anything.\r\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\r\n        if ((!babylonMaterial.subSurface.isRefractionEnabled && !babylonMaterial.subSurface.isTranslucencyEnabled) || !extension.thicknessFactor) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // IOR in this extension only affects interior.\r\n        babylonMaterial.subSurface.volumeIndexOfRefraction = babylonMaterial.indexOfRefraction;\r\n        const attenuationDistance = extension.attenuationDistance !== undefined ? extension.attenuationDistance : Number.MAX_VALUE;\r\n        babylonMaterial.subSurface.tintColorAtDistance = attenuationDistance;\r\n        if (extension.attenuationColor !== undefined && extension.attenuationColor.length == 3) {\r\n            babylonMaterial.subSurface.tintColor.copyFromFloats(extension.attenuationColor[0], extension.attenuationColor[1], extension.attenuationColor[2]);\r\n        }\r\n\r\n        babylonMaterial.subSurface.minimumThickness = 0.0;\r\n        babylonMaterial.subSurface.maximumThickness = extension.thicknessFactor;\r\n        babylonMaterial.subSurface.useThicknessAsDepth = true;\r\n        if (extension.thicknessTexture) {\r\n            (extension.thicknessTexture as ITextureInfo).nonColorData = true;\r\n            return this._loader.loadTextureInfoAsync(`${context}/thicknessTexture`, extension.thicknessTexture).then((texture: BaseTexture) => {\r\n                texture.name = `${babylonMaterial.name} (Thickness)`;\r\n                babylonMaterial.subSurface.thicknessTexture = texture;\r\n                babylonMaterial.subSurface.useGltfStyleTextures = true;\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_volume(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsDispersion } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_dispersion\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_dispersion extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_dispersion\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/87bd64a7f5e23c84b6aef2e6082069583ed0ddb4/extensions/2.0/Khronos/KHR_materials_dispersion/README.md)\r\n * @experimental\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_dispersion implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 174;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsDispersion>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadDispersionPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadDispersionPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsDispersion): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        // If transparency isn't enabled already, this extension shouldn't do anything.\r\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\r\n        if (!babylonMaterial.subSurface.isRefractionEnabled || !extension.dispersion) {\r\n            return Promise.resolve();\r\n        }\r\n        babylonMaterial.subSurface.isDispersionEnabled = true;\r\n        babylonMaterial.subSurface.dispersion = extension.dispersion;\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_dispersion(loader));\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_mesh_quantization\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_mesh_quantization extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_mesh_quantization\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_mesh_quantization implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {}\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_mesh_quantization(loader));\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IKHRTextureBasisU } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_texture_basisu\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_texture_basisu extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_texture_basisu\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_basisu/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_basisu implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureBasisU, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                texture._textureInfo.nonColorData ? { useRGBAIfASTCBC7NotAvailableWhenUASTC: true } : undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_texture_basisu(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport type { ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_texture_transform extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_texture_transform\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_transform implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureTransform, BaseTexture>(context, textureInfo, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\r\n                if (!(babylonTexture instanceof Texture)) {\r\n                    throw new Error(`${extensionContext}: Texture type not supported`);\r\n                }\r\n\r\n                if (extension.offset) {\r\n                    babylonTexture.uOffset = extension.offset[0];\r\n                    babylonTexture.vOffset = extension.offset[1];\r\n                }\r\n\r\n                // Always rotate around the origin.\r\n                babylonTexture.uRotationCenter = 0;\r\n                babylonTexture.vRotationCenter = 0;\r\n\r\n                if (extension.rotation) {\r\n                    babylonTexture.wAng = -extension.rotation;\r\n                }\r\n\r\n                if (extension.scale) {\r\n                    babylonTexture.uScale = extension.scale[0];\r\n                    babylonTexture.vScale = extension.scale[1];\r\n                }\r\n\r\n                if (extension.texCoord != undefined) {\r\n                    babylonTexture.coordinatesIndex = extension.texCoord;\r\n                }\r\n\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_texture_transform(loader));\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRXmpJsonLd_Gltf, IKHRXmpJsonLd_Node } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_xmp_json_ld\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_xmp_json_ld extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_xmp_json_ld\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_xmp_json_ld/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_xmp_json_ld implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Called after the loader state changes to LOADING.\r\n     */\r\n    public onLoading(): void {\r\n        if (this._loader.rootBabylonMesh === null) {\r\n            return;\r\n        }\r\n\r\n        const xmp_gltf = this._loader.gltf.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Gltf;\r\n        const xmp_node = this._loader.gltf.asset?.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Node;\r\n        if (xmp_gltf && xmp_node) {\r\n            const packet = +xmp_node.packet;\r\n            if (xmp_gltf.packets && packet < xmp_gltf.packets.length) {\r\n                this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\r\n                this._loader.rootBabylonMesh.metadata.xmp = xmp_gltf.packets[packet];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_xmp_json_ld(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport type { ICamera, IKHRLightsPunctual_Light, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { AnimationPropertyInfo } from \"../glTFLoaderAnimation\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SetInterpolationForKey } from \"./objectModelMapping\";\r\n\r\nfunction getColor3(_target: any, source: Float32Array, offset: number, scale: number): Color3 {\r\n    return Color3.FromArray(source, offset).scale(scale);\r\n}\r\n\r\nfunction getAlpha(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 3] * scale;\r\n}\r\n\r\nfunction getFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale;\r\n}\r\n\r\nfunction getMinusFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return -source[offset] * scale;\r\n}\r\n\r\nfunction getNextFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 1] * scale;\r\n}\r\n\r\nfunction getFloatBy2(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale * 2;\r\n}\r\n\r\nfunction getTextureTransformTree(textureName: string) {\r\n    return {\r\n        scale: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uScale`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vScale`, getNextFloat, () => 2),\r\n        ],\r\n        offset: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uOffset`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vOffset`, getNextFloat, () => 2),\r\n        ],\r\n        rotation: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.wAng`, getMinusFloat, () => 1)],\r\n    };\r\n}\r\n\r\nclass CameraAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: ICamera, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonCamera!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nclass MaterialAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IMaterial, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        for (const fillMode in target._data!) {\r\n            babylonAnimations.push({\r\n                babylonAnimatable: target._data![fillMode].babylonMaterial,\r\n                babylonAnimation: this._buildAnimation(name, fps, keys),\r\n            });\r\n        }\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\nclass LightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IKHRLightsPunctual_Light, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonLight!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/xmag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoLeft\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoRight\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/ymag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoBottom\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoTop\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/perspective/yfov\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"fov\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\n// add interpolation to the materials mapping\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"albedoColor\", getColor3, () => 4),\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"alpha\", getAlpha, () => 4),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallic\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"roughness\", getFloat, () => 1)]);\r\nconst baseColorTextureInterpolation = getTextureTransformTree(\"albedoTexture\");\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/scale\", baseColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/offset\", baseColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/rotation\", baseColorTextureInterpolation.rotation);\r\n\r\nconst metallicRoughnessTextureInterpolation = getTextureTransformTree(\"metallicTexture\");\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/scale\", metallicRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/offset\", metallicRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/rotation\", metallicRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/emissiveFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"emissiveColor\", getColor3, () => 3)]);\r\nconst normalTextureInterpolation = getTextureTransformTree(\"bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/scale\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"bumpTexture.level\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/scale\", normalTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/offset\", normalTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/rotation\", normalTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/strength\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"ambientTextureStrength\", getFloat, () => 1)]);\r\n\r\nconst occlusionTextureInterpolation = getTextureTransformTree(\"ambientTexture\");\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/scale\", occlusionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/offset\", occlusionTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/rotation\", occlusionTextureInterpolation.rotation);\r\nconst emissiveTextureInterpolation = getTextureTransformTree(\"emissiveTexture\");\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/scale\", emissiveTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/offset\", emissiveTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/rotation\", emissiveTextureInterpolation.rotation);\r\n\r\n// materials extensions\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyRotation\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.angle\", getFloat, () => 1),\r\n]);\r\nconst anisotropyTextureInterpolation = getTextureTransformTree(\"anisotropy.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/scale\", anisotropyTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/offset\", anisotropyTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/rotation\", anisotropyTextureInterpolation.rotation);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.roughness\", getFloat, () => 1),\r\n]);\r\nconst clearcoatTextureInterpolation = getTextureTransformTree(\"clearCoat.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/scale\", clearcoatTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/offset\", clearcoatTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/rotation\", clearcoatTextureInterpolation.rotation);\r\nconst clearcoatNormalTextureInterpolation = getTextureTransformTree(\"clearCoat.bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/scale\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.bumpTexture.level\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/scale\", clearcoatNormalTextureInterpolation.scale);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatNormalTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatNormalTextureInterpolation.rotation\r\n);\r\nconst clearcoatRoughnessTextureInterpolation = getTextureTransformTree(\"clearCoat.textureRoughness\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/scale\",\r\n    clearcoatRoughnessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatRoughnessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatRoughnessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_dispersion/dispersionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.dispersion\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_emissive_strength/emissiveStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"emissiveIntensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_ior/ior\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceIor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMinimum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.minimumThickness\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMaximum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst iridescenceTextureInterpolation = getTextureTransformTree(\"iridescence.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/scale\", iridescenceTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/offset\", iridescenceTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/rotation\", iridescenceTextureInterpolation.rotation);\r\n\r\nconst iridescenceThicknessTextureInterpolation = getTextureTransformTree(\"iridescence.thicknessTexture\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/scale\",\r\n    iridescenceThicknessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/offset\",\r\n    iridescenceThicknessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/rotation\",\r\n    iridescenceThicknessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"sheen.color\", getColor3, () => 3),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"sheen.roughness\", getFloat, () => 1),\r\n]);\r\n\r\nconst sheenTextureInterpolation = getTextureTransformTree(\"sheen.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/scale\", sheenTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/offset\", sheenTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/rotation\", sheenTextureInterpolation.rotation);\r\n\r\nconst sheenRoughnessTextureInterpolation = getTextureTransformTree(\"sheen.textureRoughness\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/scale\", sheenRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/offset\", sheenRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/rotation\", sheenRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallicF0Factor\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"metallicReflectanceColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst specularTextureInterpolation = getTextureTransformTree(\"metallicReflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/scale\", specularTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/offset\", specularTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/rotation\", specularTextureInterpolation.rotation);\r\nconst specularColorTextureInterpolation = getTextureTransformTree(\"reflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/scale\", specularColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/offset\", specularColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    specularColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.refractionIntensity\", getFloat, () => 1),\r\n]);\r\nconst transmissionTextureInterpolation = getTextureTransformTree(\"subSurface.refractionIntensityTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/scale\", transmissionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/offset\", transmissionTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    transmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationColor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.tintColor\", getColor3, () => 3),\r\n]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationDistance\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.tintColorAtDistance\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst thicknessTextureInterpolation = getTextureTransformTree(\"subSurface.thicknessTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/scale\", thicknessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/offset\", thicknessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/rotation\", thicknessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.translucencyIntensity\", getFloat, () => 1),\r\n]);\r\n\r\nconst diffuseTransmissionTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyIntensityTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.translucencyColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst diffuseTransmissionColorTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyColorTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionColorTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionColorTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/intensity\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/range\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"range\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/innerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"innerAngle\", getFloatBy2, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/outerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"angle\", getFloatBy2, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/multiplier\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\n","import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimation, IAnimationChannel } from \"../glTFLoaderInterfaces\";\r\nimport type { IKHRAnimationPointer } from \"babylonjs-gltf2interface\";\r\nimport { AnimationChannelTargetPath } from \"babylonjs-gltf2interface\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { GetPathToObjectConverter } from \"./objectModelMapping\";\r\nimport \"./KHR_animation_pointer.data\";\r\n\r\nconst NAME = \"KHR_animation_pointer\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_animation_pointer extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_animation_pointer\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification PR](https://github.com/KhronosGroup/glTF/pull/2147)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_animation_pointer implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _pathToObjectConverter?: GLTFPathToObjectConverter<any, any, any>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this._pathToObjectConverter = GetPathToObjectConverter(this._loader.gltf);\r\n    }\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public get enabled(): boolean {\r\n        return this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._pathToObjectConverter; // GC\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete or null if not handled\r\n     */\r\n    public _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        const extension = channel.target.extensions?.KHR_animation_pointer as IKHRAnimationPointer;\r\n        if (!extension || !this._pathToObjectConverter) {\r\n            return null;\r\n        }\r\n\r\n        if (channel.target.path !== AnimationChannelTargetPath.POINTER) {\r\n            Logger.Warn(`${context}/target/path: Value (${channel.target.path}) must be (${AnimationChannelTargetPath.POINTER}) when using the ${this.name} extension`);\r\n        }\r\n\r\n        if (channel.target.node != undefined) {\r\n            Logger.Warn(`${context}/target/node: Value (${channel.target.node}) must not be present when using the ${this.name} extension`);\r\n        }\r\n\r\n        const extensionContext = `${context}/extensions/${this.name}`;\r\n\r\n        const pointer = extension.pointer;\r\n        if (!pointer) {\r\n            throw new Error(`${extensionContext}: Pointer is missing`);\r\n        }\r\n\r\n        try {\r\n            const obj = this._pathToObjectConverter.convert(pointer);\r\n            if (!obj.info.interpolation) {\r\n                throw new Error(`${extensionContext}/pointer: Interpolation is missing`);\r\n            }\r\n            return this._loader._loadAnimationChannelFromTargetInfoAsync(\r\n                context,\r\n                animationContext,\r\n                animation,\r\n                channel,\r\n                {\r\n                    object: obj.object,\r\n                    info: obj.info.interpolation,\r\n                },\r\n                onLoad\r\n            );\r\n        } catch (e) {\r\n            Logger.Warn(`${extensionContext}/pointer: Invalid pointer (${pointer}) skipped`);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_animation_pointer(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { AnimationEvent } from \"core/Animations/animationEvent\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Sound } from \"core/Audio/sound\";\r\nimport { WeightedSound } from \"core/Audio/weightedsound\";\r\n\r\nimport type { IArrayItem, IScene, INode, IAnimation } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IMSFTAudioEmitter_Clip, IMSFTAudioEmitter_Emitter, IMSFTAudioEmitter_EmittersReference, IMSFTAudioEmitter_AnimationEvent } from \"babylonjs-gltf2interface\";\r\nimport { IMSFTAudioEmitter_AnimationEventAction } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nimport \"core/Audio/audioSceneComponent\";\r\n\r\nconst NAME = \"MSFT_audio_emitter\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_audio_emitter extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_audio_emitter\"]: {};\r\n    }\r\n}\r\n\r\ninterface ILoaderClip extends IMSFTAudioEmitter_Clip, IArrayItem {\r\n    _objectURL?: Promise<string>;\r\n}\r\n\r\ninterface ILoaderEmitter extends IMSFTAudioEmitter_Emitter, IArrayItem {\r\n    _babylonData?: {\r\n        sound?: WeightedSound;\r\n        loaded: Promise<void>;\r\n    };\r\n    _babylonSounds: Sound[];\r\n}\r\n\r\ninterface IMSFTAudioEmitter {\r\n    clips: ILoaderClip[];\r\n    emitters: ILoaderEmitter[];\r\n}\r\n\r\ninterface ILoaderAnimationEvent extends IMSFTAudioEmitter_AnimationEvent, IArrayItem {}\r\n\r\ninterface ILoaderAnimationEvents {\r\n    events: ILoaderAnimationEvent[];\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/najadojo/glTF/blob/MSFT_audio_emitter/extensions/2.0/Vendor/MSFT_audio_emitter/README.md)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_audio_emitter implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _clips: Array<ILoaderClip>;\r\n    private _emitters: Array<ILoaderEmitter>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        (this._clips as any) = null;\r\n        (this._emitters as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IMSFTAudioEmitter;\r\n\r\n            this._clips = extension.clips;\r\n            this._emitters = extension.emitters;\r\n\r\n            ArrayItem.Assign(this._clips);\r\n            ArrayItem.Assign(this._emitters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTAudioEmitter_EmittersReference>(context, scene, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            for (const emitterIndex of extension.emitters) {\r\n                const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\r\n                if (\r\n                    emitter.refDistance != undefined ||\r\n                    emitter.maxDistance != undefined ||\r\n                    emitter.rolloffFactor != undefined ||\r\n                    emitter.distanceModel != undefined ||\r\n                    emitter.innerAngle != undefined ||\r\n                    emitter.outerAngle != undefined\r\n                ) {\r\n                    throw new Error(`${extensionContext}: Direction or Distance properties are not allowed on emitters attached to a scene`);\r\n                }\r\n\r\n                promises.push(this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter));\r\n            }\r\n\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTAudioEmitter_EmittersReference, TransformNode>(context, node, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            return this._loader\r\n                .loadNodeAsync(extensionContext, node, (babylonMesh) => {\r\n                    for (const emitterIndex of extension.emitters) {\r\n                        const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\r\n                        promises.push(\r\n                            this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter).then(() => {\r\n                                for (const sound of emitter._babylonSounds) {\r\n                                    sound.attachToMesh(babylonMesh);\r\n                                    if (emitter.innerAngle != undefined || emitter.outerAngle != undefined) {\r\n                                        sound.setLocalDirectionToMesh(Vector3.Forward());\r\n                                        sound.setDirectionalCone(\r\n                                            2 * Tools.ToDegrees(emitter.innerAngle == undefined ? Math.PI : emitter.innerAngle),\r\n                                            2 * Tools.ToDegrees(emitter.outerAngle == undefined ? Math.PI : emitter.outerAngle),\r\n                                            0\r\n                                        );\r\n                                    }\r\n                                }\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    assign(babylonMesh);\r\n                })\r\n                .then((babylonMesh) => {\r\n                    return Promise.all(promises).then(() => {\r\n                        return babylonMesh;\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\r\n        return GLTFLoader.LoadExtensionAsync<ILoaderAnimationEvents, AnimationGroup>(context, animation, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadAnimationAsync(context, animation).then((babylonAnimationGroup) => {\r\n                const promises = new Array<Promise<any>>();\r\n\r\n                ArrayItem.Assign(extension.events);\r\n                for (const event of extension.events) {\r\n                    promises.push(this._loadAnimationEventAsync(`${extensionContext}/events/${event.index}`, context, animation, event, babylonAnimationGroup));\r\n                }\r\n\r\n                return Promise.all(promises).then(() => {\r\n                    return babylonAnimationGroup;\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private _loadClipAsync(context: string, clip: ILoaderClip): Promise<string> {\r\n        if (clip._objectURL) {\r\n            return clip._objectURL;\r\n        }\r\n\r\n        let promise: Promise<ArrayBufferView>;\r\n        if (clip.uri) {\r\n            promise = this._loader.loadUriAsync(context, clip, clip.uri);\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, clip.bufferView);\r\n            promise = this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n        }\r\n\r\n        clip._objectURL = promise.then((data) => {\r\n            return URL.createObjectURL(new Blob([data], { type: clip.mimeType }));\r\n        });\r\n\r\n        return clip._objectURL;\r\n    }\r\n\r\n    private _loadEmitterAsync(context: string, emitter: ILoaderEmitter): Promise<void> {\r\n        emitter._babylonSounds = emitter._babylonSounds || [];\r\n        if (!emitter._babylonData) {\r\n            const clipPromises = new Array<Promise<any>>();\r\n            const name = emitter.name || `emitter${emitter.index}`;\r\n            const options = {\r\n                loop: false,\r\n                autoplay: false,\r\n                volume: emitter.volume == undefined ? 1 : emitter.volume,\r\n            };\r\n\r\n            for (let i = 0; i < emitter.clips.length; i++) {\r\n                const clipContext = `/extensions/${this.name}/clips`;\r\n                const clip = ArrayItem.Get(clipContext, this._clips, emitter.clips[i].clip);\r\n                clipPromises.push(\r\n                    this._loadClipAsync(`${clipContext}/${emitter.clips[i].clip}`, clip).then((objectURL: string) => {\r\n                        const sound = (emitter._babylonSounds[i] = new Sound(name, objectURL, this._loader.babylonScene, null, options));\r\n                        sound.refDistance = emitter.refDistance || 1;\r\n                        sound.maxDistance = emitter.maxDistance || 256;\r\n                        sound.rolloffFactor = emitter.rolloffFactor || 1;\r\n                        sound.distanceModel = emitter.distanceModel || \"exponential\";\r\n                    })\r\n                );\r\n            }\r\n\r\n            const promise = Promise.all(clipPromises).then(() => {\r\n                const weights = emitter.clips.map((clip) => {\r\n                    return clip.weight || 1;\r\n                });\r\n                const weightedSound = new WeightedSound(emitter.loop || false, emitter._babylonSounds, weights);\r\n                if (emitter.innerAngle) {\r\n                    weightedSound.directionalConeInnerAngle = 2 * Tools.ToDegrees(emitter.innerAngle);\r\n                }\r\n                if (emitter.outerAngle) {\r\n                    weightedSound.directionalConeOuterAngle = 2 * Tools.ToDegrees(emitter.outerAngle);\r\n                }\r\n                if (emitter.volume) {\r\n                    weightedSound.volume = emitter.volume;\r\n                }\r\n                emitter._babylonData!.sound = weightedSound;\r\n            });\r\n\r\n            emitter._babylonData = {\r\n                loaded: promise,\r\n            };\r\n        }\r\n\r\n        return emitter._babylonData.loaded;\r\n    }\r\n\r\n    private _getEventAction(\r\n        context: string,\r\n        sound: WeightedSound,\r\n        action: IMSFTAudioEmitter_AnimationEventAction,\r\n        time: number,\r\n        startOffset?: number\r\n    ): (currentFrame: number) => void {\r\n        switch (action) {\r\n            case IMSFTAudioEmitter_AnimationEventAction.play: {\r\n                return (currentFrame: number) => {\r\n                    const frameOffset = (startOffset || 0) + (currentFrame - time);\r\n                    sound.play(frameOffset);\r\n                };\r\n            }\r\n            case IMSFTAudioEmitter_AnimationEventAction.stop: {\r\n                return () => {\r\n                    sound.stop();\r\n                };\r\n            }\r\n            case IMSFTAudioEmitter_AnimationEventAction.pause: {\r\n                return () => {\r\n                    sound.pause();\r\n                };\r\n            }\r\n            default: {\r\n                throw new Error(`${context}: Unsupported action ${action}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _loadAnimationEventAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        event: ILoaderAnimationEvent,\r\n        babylonAnimationGroup: AnimationGroup\r\n    ): Promise<void> {\r\n        if (babylonAnimationGroup.targetedAnimations.length == 0) {\r\n            return Promise.resolve();\r\n        }\r\n        const babylonAnimation = babylonAnimationGroup.targetedAnimations[0];\r\n        const emitterIndex = event.emitter;\r\n        const emitter = ArrayItem.Get(`/extensions/${this.name}/emitters`, this._emitters, emitterIndex);\r\n        return this._loadEmitterAsync(context, emitter).then(() => {\r\n            const sound = emitter._babylonData!.sound;\r\n            if (sound) {\r\n                const babylonAnimationEvent = new AnimationEvent(event.time, this._getEventAction(context, sound, event.action, event.time, event.startOffset));\r\n                babylonAnimation.animation.addEvent(babylonAnimationEvent);\r\n                // Make sure all started audio stops when this animation is terminated.\r\n                babylonAnimationGroup.onAnimationGroupEndObservable.add(() => {\r\n                    sound.stop();\r\n                });\r\n                babylonAnimationGroup.onAnimationGroupPauseObservable.add(() => {\r\n                    sound.pause();\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_audio_emitter(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { INode, IMaterial, IBuffer, IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IProperty, IMSFTLOD } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_lod\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_lod extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_lod\"]: Partial<{\r\n            /**\r\n             * Maximum number of LODs to load, starting from the lowest LOD.\r\n             */\r\n            maxLODsToLoad: number;\r\n        }>;\r\n    }\r\n}\r\n\r\ninterface IBufferInfo {\r\n    start: number;\r\n    end: number;\r\n    loaded: Deferred<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/MSFT_lod/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_lod implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    /**\r\n     * Maximum number of LODs to load, starting from the lowest LOD.\r\n     */\r\n    public maxLODsToLoad = 10;\r\n\r\n    /**\r\n     * Observable raised when all node LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onNodeLODsLoadedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Observable raised when all material LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onMaterialLODsLoadedObservable = new Observable<number>();\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _bufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _nodeIndexLOD: Nullable<number> = null;\r\n    private _nodeSignalLODs = new Array<Deferred<void>>();\r\n    private _nodePromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _nodeBufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _materialIndexLOD: Nullable<number> = null;\r\n    private _materialSignalLODs = new Array<Deferred<void>>();\r\n    private _materialPromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _materialBufferLODs = new Array<IBufferInfo>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        // Options takes precedence. The maxLODsToLoad extension property is retained for back compat.\r\n        // For new extensions, they should only use options.\r\n        this.maxLODsToLoad = this._loader.parent.extensionOptions[NAME]?.maxLODsToLoad ?? this.maxLODsToLoad;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n\r\n        this._nodeIndexLOD = null;\r\n        this._nodeSignalLODs.length = 0;\r\n        this._nodePromiseLODs.length = 0;\r\n        this._nodeBufferLODs.length = 0;\r\n\r\n        this._materialIndexLOD = null;\r\n        this._materialSignalLODs.length = 0;\r\n        this._materialPromiseLODs.length = 0;\r\n        this._materialBufferLODs.length = 0;\r\n\r\n        this.onMaterialLODsLoadedObservable.clear();\r\n        this.onNodeLODsLoadedObservable.clear();\r\n    }\r\n\r\n    /** @internal */\r\n    public onReady(): void {\r\n        for (let indexLOD = 0; indexLOD < this._nodePromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._nodePromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Node LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded node LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onNodeLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._nodePromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Node LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._nodeBufferLODs, indexLOD + 1);\r\n                    if (this._nodeSignalLODs[indexLOD]) {\r\n                        this._nodeSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n\r\n        for (let indexLOD = 0; indexLOD < this._materialPromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._materialPromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Material LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded material LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onMaterialLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._materialPromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Material LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._materialBufferLODs, indexLOD + 1);\r\n                    if (this._materialSignalLODs[indexLOD]) {\r\n                        this._materialSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        const promise = this._loader.loadSceneAsync(context, scene);\r\n        this._loadBufferLOD(this._bufferLODs, 0);\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, TransformNode>(context, node, this.name, (extensionContext, extension) => {\r\n            let firstPromise: Promise<TransformNode>;\r\n\r\n            const nodeLODs = this._getLODs(extensionContext, node, this._loader.gltf.nodes, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < nodeLODs.length; indexLOD++) {\r\n                const nodeLOD = nodeLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._nodeIndexLOD = indexLOD;\r\n                    this._nodeSignalLODs[indexLOD] = this._nodeSignalLODs[indexLOD] || new Deferred();\r\n                }\r\n\r\n                const assignWrap = (babylonTransformNode: TransformNode) => {\r\n                    assign(babylonTransformNode);\r\n                    babylonTransformNode.setEnabled(false);\r\n                };\r\n\r\n                const promise = this._loader.loadNodeAsync(`/nodes/${nodeLOD.index}`, nodeLOD, assignWrap).then((babylonMesh) => {\r\n                    if (indexLOD !== 0) {\r\n                        // TODO: should not rely on _babylonTransformNode\r\n                        const previousNodeLOD = nodeLODs[indexLOD - 1];\r\n                        if (previousNodeLOD._babylonTransformNode) {\r\n                            this._disposeTransformNode(previousNodeLOD._babylonTransformNode);\r\n                            delete previousNodeLOD._babylonTransformNode;\r\n                        }\r\n                    }\r\n\r\n                    babylonMesh.setEnabled(true);\r\n                    return babylonMesh;\r\n                });\r\n\r\n                this._nodePromiseLODs[indexLOD] = this._nodePromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._nodeIndexLOD = null;\r\n                    this._nodePromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        // Don't load material LODs if already loading a node LOD.\r\n        if (this._nodeIndexLOD) {\r\n            return null;\r\n        }\r\n\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, Material>(context, material, this.name, (extensionContext, extension) => {\r\n            let firstPromise: Promise<Material>;\r\n\r\n            const materialLODs = this._getLODs(extensionContext, material, this._loader.gltf.materials, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < materialLODs.length; indexLOD++) {\r\n                const materialLOD = materialLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._materialIndexLOD = indexLOD;\r\n                }\r\n\r\n                const promise = this._loader\r\n                    ._loadMaterialAsync(`/materials/${materialLOD.index}`, materialLOD, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                        if (indexLOD === 0) {\r\n                            assign(babylonMaterial);\r\n                        }\r\n                    })\r\n                    .then((babylonMaterial) => {\r\n                        if (indexLOD !== 0) {\r\n                            assign(babylonMaterial);\r\n\r\n                            // TODO: should not rely on _data\r\n                            const previousDataLOD = materialLODs[indexLOD - 1]._data!;\r\n                            if (previousDataLOD[babylonDrawMode]) {\r\n                                this._disposeMaterials([previousDataLOD[babylonDrawMode].babylonMaterial]);\r\n                                delete previousDataLOD[babylonDrawMode];\r\n                            }\r\n                        }\r\n\r\n                        return babylonMaterial;\r\n                    });\r\n\r\n                this._materialPromiseLODs[indexLOD] = this._materialPromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._materialIndexLOD = null;\r\n                    this._materialPromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        // Defer the loading of uris if loading a node or material LOD.\r\n        if (this._nodeIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._nodeIndexLOD - 1;\r\n            this._nodeSignalLODs[previousIndexLOD] = this._nodeSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._nodeSignalLODs[this._nodeIndexLOD - 1].promise.then(() => {\r\n                return this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        } else if (this._materialIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._materialIndexLOD - 1;\r\n            this._materialSignalLODs[previousIndexLOD] = this._materialSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._materialSignalLODs[previousIndexLOD].promise.then(() => {\r\n                return this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        if (this._loader.parent.useRangeRequests && !buffer.uri) {\r\n            if (!this._loader.bin) {\r\n                throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n            }\r\n\r\n            const loadAsync = (bufferLODs: Array<IBufferInfo>, indexLOD: number) => {\r\n                const start = byteOffset;\r\n                const end = start + byteLength - 1;\r\n                let bufferLOD = bufferLODs[indexLOD];\r\n                if (bufferLOD) {\r\n                    bufferLOD.start = Math.min(bufferLOD.start, start);\r\n                    bufferLOD.end = Math.max(bufferLOD.end, end);\r\n                } else {\r\n                    bufferLOD = { start: start, end: end, loaded: new Deferred() };\r\n                    bufferLODs[indexLOD] = bufferLOD;\r\n                }\r\n\r\n                return bufferLOD.loaded.promise.then((data) => {\r\n                    return new Uint8Array(data.buffer, data.byteOffset + byteOffset - bufferLOD.start, byteLength);\r\n                });\r\n            };\r\n\r\n            this._loader.log(`deferred`);\r\n\r\n            if (this._nodeIndexLOD !== null) {\r\n                return loadAsync(this._nodeBufferLODs, this._nodeIndexLOD);\r\n            } else if (this._materialIndexLOD !== null) {\r\n                return loadAsync(this._materialBufferLODs, this._materialIndexLOD);\r\n            } else {\r\n                return loadAsync(this._bufferLODs, 0);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _loadBufferLOD(bufferLODs: Array<IBufferInfo>, indexLOD: number): void {\r\n        const bufferLOD = bufferLODs[indexLOD];\r\n        if (bufferLOD) {\r\n            this._loader.log(`Loading buffer range [${bufferLOD.start}-${bufferLOD.end}]`);\r\n            this._loader.bin!.readAsync(bufferLOD.start, bufferLOD.end - bufferLOD.start + 1).then(\r\n                (data) => {\r\n                    bufferLOD.loaded.resolve(data);\r\n                },\r\n                (error) => {\r\n                    bufferLOD.loaded.reject(error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns an array of LOD properties from lowest to highest.\r\n     * @param context\r\n     * @param property\r\n     * @param array\r\n     * @param ids\r\n     */\r\n    private _getLODs<T>(context: string, property: T, array: ArrayLike<T> | undefined, ids: number[]): T[] {\r\n        if (this.maxLODsToLoad <= 0) {\r\n            throw new Error(\"maxLODsToLoad must be greater than zero\");\r\n        }\r\n\r\n        const properties: T[] = [];\r\n\r\n        for (let i = ids.length - 1; i >= 0; i--) {\r\n            properties.push(ArrayItem.Get(`${context}/ids/${ids[i]}`, array, ids[i]));\r\n            if (properties.length === this.maxLODsToLoad) {\r\n                return properties;\r\n            }\r\n        }\r\n\r\n        properties.push(property);\r\n        return properties;\r\n    }\r\n\r\n    private _disposeTransformNode(babylonTransformNode: TransformNode): void {\r\n        const babylonMaterials: Material[] = [];\r\n        const babylonMaterial = (babylonTransformNode as Mesh).material;\r\n        if (babylonMaterial) {\r\n            babylonMaterials.push(babylonMaterial);\r\n        }\r\n        for (const babylonMesh of babylonTransformNode.getChildMeshes()) {\r\n            if (babylonMesh.material) {\r\n                babylonMaterials.push(babylonMesh.material);\r\n            }\r\n        }\r\n\r\n        babylonTransformNode.dispose();\r\n\r\n        const babylonMaterialsToDispose = babylonMaterials.filter((babylonMaterial) => this._loader.babylonScene.meshes.every((mesh) => mesh.material != babylonMaterial));\r\n        this._disposeMaterials(babylonMaterialsToDispose);\r\n    }\r\n\r\n    private _disposeMaterials(babylonMaterials: Material[]): void {\r\n        const babylonTextures: { [uniqueId: number]: BaseTexture } = {};\r\n\r\n        for (const babylonMaterial of babylonMaterials) {\r\n            for (const babylonTexture of babylonMaterial.getActiveTextures()) {\r\n                babylonTextures[babylonTexture.uniqueId] = babylonTexture;\r\n            }\r\n\r\n            babylonMaterial.dispose();\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            for (const babylonMaterial of this._loader.babylonScene.materials) {\r\n                if (babylonMaterial.hasTexture(babylonTextures[uniqueId])) {\r\n                    delete babylonTextures[uniqueId];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            babylonTextures[uniqueId].dispose();\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_lod(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_minecraftMesh\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_minecraftMesh extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_minecraftMesh\"]: {};\r\n    }\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_minecraftMesh implements IGLTFLoaderExtension {\r\n    /** @internal */\r\n    public readonly name = NAME;\r\n\r\n    /** @internal */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @internal */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                if (babylonMaterial.needAlphaBlending()) {\r\n                    babylonMaterial.forceDepthWrite = true;\r\n                    babylonMaterial.separateCullingPass = true;\r\n                }\r\n\r\n                babylonMaterial.backFaceCulling = babylonMaterial.forceDepthWrite;\r\n                babylonMaterial.twoSidedLighting = true;\r\n\r\n                return promise;\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_minecraftMesh(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_sRGBFactors\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_sRGBFactors extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_sRGBFactors\"]: {};\r\n    }\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_sRGBFactors implements IGLTFLoaderExtension {\r\n    /** @internal */\r\n    public readonly name = NAME;\r\n\r\n    /** @internal */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @internal */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                const useExactSrgbConversions = babylonMaterial.getScene().getEngine().useExactSrgbConversions;\r\n                if (!babylonMaterial.albedoTexture) {\r\n                    babylonMaterial.albedoColor.toLinearSpaceToRef(babylonMaterial.albedoColor, useExactSrgbConversions);\r\n                }\r\n\r\n                if (!babylonMaterial.reflectivityTexture) {\r\n                    babylonMaterial.reflectivityColor.toLinearSpaceToRef(babylonMaterial.reflectivityColor, useExactSrgbConversions);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_sRGBFactors(loader));\r\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { IKHRInteractivity_Declaration, IKHRInteractivity_Graph, IKHRInteractivity_Node } from \"babylonjs-gltf2interface\";\nimport { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { ISerializedFlowGraphBlock, ISerializedFlowGraphContext } from \"core/FlowGraph/typeDefinitions\";\nimport type { InteractivityEvent, InteractivityGraphToFlowGraphParser } from \"./interactivityGraphParser\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport { FlowGraphTypes, getAnimationTypeByFlowGraphType } from \"core/FlowGraph/flowGraphRichTypes\";\n\ninterface IGLTFToFlowGraphMappingObject<I = any, O = any> {\n    /**\n     * The name of the property in the FlowGraph block.\n     */\n    name: string;\n    /**\n     * The type of the property in the glTF specs.\n     * If not provided will be inferred.\n     */\n    gltfType?: string;\n    /**\n     * The type of the property in the FlowGraph block.\n     * If not defined it equals the glTF type.\n     */\n    flowGraphType?: string;\n    /**\n     * A function that transforms the data from the glTF to the FlowGraph block.\n     */\n    dataTransformer?: (data: I[], parser: InteractivityGraphToFlowGraphParser) => O[];\n    /**\n     * If the property is in the options passed to the constructor of the block.\n     */\n    inOptions?: boolean;\n\n    /**\n     * If the property is a pointer to a value.\n     * This will add an extra JsonPointerParser block to the graph.\n     */\n    isPointer?: boolean;\n\n    /**\n     * If the property is an index to a value.\n     * if defined this will be the name of the array to find the object in.\n     */\n    isVariable?: boolean;\n\n    /**\n     * the name of the class type this value will be mapped to.\n     * This is used if we generate more than one block for a single glTF node.\n     * Defaults to the first block in the mapping.\n     */\n    toBlock?: FlowGraphBlockNames;\n\n    /**\n     * Used in configuration values. If defined, this will be the default value, if no value is provided.\n     */\n    defaultValue?: O;\n}\n\nexport interface IGLTFToFlowGraphMapping {\n    /**\n     * The type of the FlowGraph block(s).\n     * Typically will be a single element in an array.\n     * When adding blocks defined in this module use the KHR_interactivity prefix.\n     */\n    blocks: (FlowGraphBlockNames | string)[];\n    /**\n     * The inputs of the glTF node mapped to the FlowGraph block.\n     */\n    inputs?: {\n        /**\n         * The value inputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow inputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The outputs of the glTF node mapped to the FlowGraph block.\n     */\n    outputs?: {\n        /**\n         * The value outputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow outputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The configuration of the glTF node mapped to the FlowGraph block.\n     * This information is usually passed to the constructor of the block.\n     */\n    configuration?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * If we generate more than one block for a single glTF node, this mapping will be used to map\n     * between the flowGraph classes.\n     */\n    typeToTypeMapping?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * The connections between two or more blocks.\n     * This is used to connect the blocks in the graph\n     */\n    interBlockConnectors?: {\n        /**\n         * The name of the input connection in the first block.\n         */\n        input: string;\n        /**\n         * The name of the output connection in the second block.\n         */\n        output: string;\n\n        /**\n         * The index of the block in the array of blocks that corresponds to the input.\n         */\n        inputBlockIndex: number;\n        /**\n         * The index of the block in the array of blocks that corresponds to the output.\n         */\n        outputBlockIndex: number;\n        /**\n         * If the connection is a variable connection or a flow connection.\n         */\n        isVariable?: boolean;\n    }[];\n\n    /**\n     * This optional function will allow to validate the node, according to the glTF specs.\n     * For example, if a node has a configuration object, it must be present and correct.\n     * This is a basic node-based validation.\n     * This function is expected to return false and log the error if the node is not valid.\n     * Note that this function can also modify the node, if needed.\n     *\n     * @param gltfBlock the glTF node to validate\n     * @param glTFObject the glTF object\n     * @returns true if validated, false if not.\n     */\n    validation?: (gltfBlock: IKHRInteractivity_Node, interactivityGraph: IKHRInteractivity_Graph, glTFObject?: IGLTF) => boolean;\n\n    /**\n     * This is used if we need extra information for the constructor/options that is not provided directly by the glTF node.\n     * This function can return more than one node, if extra nodes are needed for this block to function correctly.\n     * Returning more than one block will usually happen when a json pointer was provided.\n     *\n     * @param gltfBlock the glTF node\n     * @param mapping the mapping object\n     * @param arrays the arrays of the interactivity object\n     * @param serializedObjects the serialized object\n     * @returns an array of serialized nodes that will be added to the graph.\n     */\n    extraProcessor?: (\n        gltfBlock: IKHRInteractivity_Node,\n        declaration: IKHRInteractivity_Declaration,\n        mapping: IGLTFToFlowGraphMapping,\n        parser: InteractivityGraphToFlowGraphParser,\n        serializedObjects: ISerializedFlowGraphBlock[],\n        context: ISerializedFlowGraphContext,\n        globalGLTF?: IGLTF\n    ) => ISerializedFlowGraphBlock[];\n}\n\nexport function getMappingForFullOperationName(fullOperationName: string) {\n    const [op, extension] = fullOperationName.split(\":\");\n    return getMappingForDeclaration({ op, extension });\n}\n\nexport function getMappingForDeclaration(declaration: IKHRInteractivity_Declaration, returnNoOpIfNotAvailable: boolean = true): IGLTFToFlowGraphMapping | undefined {\n    const mapping = declaration.extension ? gltfExtensionsToFlowGraphMapping[declaration.extension]?.[declaration.op] : gltfToFlowGraphMapping[declaration.op];\n    if (!mapping) {\n        Logger.Warn(`No mapping found for operation ${declaration.op} and extension ${declaration.extension || \"KHR_interactivity\"}`);\n        if (returnNoOpIfNotAvailable) {\n            const inputs: IGLTFToFlowGraphMapping[\"inputs\"] = {};\n            const outputs: IGLTFToFlowGraphMapping[\"outputs\"] = {\n                flows: {},\n            };\n            if (declaration.inputValueSockets) {\n                inputs.values = {};\n                for (const key in declaration.inputValueSockets) {\n                    inputs.values[key] = {\n                        name: key,\n                    };\n                }\n            }\n            if (declaration.outputValueSockets) {\n                outputs.values = {};\n                Object.keys(declaration.outputValueSockets).forEach((key) => {\n                    outputs.values![key] = {\n                        name: key,\n                    };\n                });\n            }\n            return {\n                blocks: [], // no blocks, just mapping\n                inputs,\n                outputs,\n            };\n        }\n    }\n    return mapping;\n}\n\n/**\n * This function will add new mapping to glTF interactivity.\n * Other extensions can define new types of blocks, this is the way to let interactivity know how to parse them.\n * @param key the type of node, i.e. \"variable/get\"\n * @param extension the extension of the interactivity operation, i.e. \"KHR_selectability\"\n * @param mapping The mapping object. See documentation or examples below.\n */\nexport function addNewInteractivityFlowGraphMapping(key: string, extension: string, mapping: IGLTFToFlowGraphMapping) {\n    gltfExtensionsToFlowGraphMapping[extension] ||= {};\n    gltfExtensionsToFlowGraphMapping[extension][key] = mapping;\n}\n\nconst gltfExtensionsToFlowGraphMapping: { [extension: string]: { [key: string]: IGLTFToFlowGraphMapping } } = {\n    /**\n     * This is the BABYLON extension for glTF interactivity.\n     * It defines babylon-specific blocks and operations.\n     */\n    BABYLON: {\n        /**\n         * flow/log is a flow node that logs input to the console.\n         * It has \"in\" and \"out\" flows, and takes a message as input.\n         * The message can be any type of value.\n         * The message is logged to the console when the \"in\" flow is triggered.\n         * The \"out\" flow is triggered when the message is logged.\n         */\n        \"flow/log\": {\n            blocks: [FlowGraphBlockNames.ConsoleLog],\n            inputs: {\n                values: {\n                    message: { name: \"message\" },\n                },\n            },\n        },\n    },\n};\n\n// this mapper is just a way to convert the glTF nodes to FlowGraph nodes in terms of input/output connection names and values.\nconst gltfToFlowGraphMapping: { [key: string]: IGLTFToFlowGraphMapping } = {\n    \"event/onStart\": {\n        blocks: [FlowGraphBlockNames.SceneReadyEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/onTick\": {\n        blocks: [FlowGraphBlockNames.SceneTickEvent],\n        inputs: {},\n        outputs: {\n            values: {\n                timeSinceLastTick: { name: \"deltaTime\", gltfType: \"number\" /*, dataTransformer: (time: number) => time / 1000*/ },\n            },\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/send\": {\n        blocks: [FlowGraphBlockNames.SendCustomEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/send\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"event/receive\": {\n        blocks: [FlowGraphBlockNames.ReceiveCustomEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        validation(gltfBlock, interactivityGraph) {\n            if (!gltfBlock.configuration) {\n                Logger.Error(\"Receive event should have a configuration object\");\n                return false;\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            if (!eventConfiguration) {\n                Logger.Error(\"Receive event should have a single configuration object, the event itself\");\n                return false;\n            }\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                Logger.Error(\"Event id should be a number\");\n                return false;\n            }\n            const event = interactivityGraph.events?.[eventId];\n            if (!event) {\n                Logger.Error(`Event with id ${eventId} not found`);\n                return false;\n            }\n            return true;\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/receive\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"math/e\": getSimpleInputMapping(FlowGraphBlockNames.E),\n    \"math/pi\": getSimpleInputMapping(FlowGraphBlockNames.PI),\n    \"math/inf\": getSimpleInputMapping(FlowGraphBlockNames.Inf),\n    \"math/nan\": getSimpleInputMapping(FlowGraphBlockNames.NaN),\n    \"math/abs\": getSimpleInputMapping(FlowGraphBlockNames.Abs),\n    \"math/sign\": getSimpleInputMapping(FlowGraphBlockNames.Sign),\n    \"math/trunc\": getSimpleInputMapping(FlowGraphBlockNames.Trunc),\n    \"math/floor\": getSimpleInputMapping(FlowGraphBlockNames.Floor),\n    \"math/ceil\": getSimpleInputMapping(FlowGraphBlockNames.Ceil),\n    \"math/round\": {\n        blocks: [FlowGraphBlockNames.Round],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            serializedObjects[0].config.roundHalfAwayFromZero = true;\n            return serializedObjects;\n        },\n    },\n    \"math/fract\": getSimpleInputMapping(FlowGraphBlockNames.Fraction),\n    \"math/neg\": getSimpleInputMapping(FlowGraphBlockNames.Negation),\n    \"math/add\": getSimpleInputMapping(FlowGraphBlockNames.Add, [\"a\", \"b\"], true),\n    \"math/sub\": getSimpleInputMapping(FlowGraphBlockNames.Subtract, [\"a\", \"b\"], true),\n    \"math/mul\": {\n        blocks: [FlowGraphBlockNames.Multiply],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            serializedObjects[0].config.useMatrixPerComponent = true;\n            // try to infer the type or fallback to Integer\n            // check the gltf block for the inputs, see if they have a type\n            let type = -1;\n            Object.keys(_gltfBlock.values || {}).find((value) => {\n                if (_gltfBlock.values?.[value].type !== undefined) {\n                    type = _gltfBlock.values[value].type;\n                    return true;\n                }\n                return false;\n            });\n            if (type !== -1) {\n                serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/div\": getSimpleInputMapping(FlowGraphBlockNames.Divide, [\"a\", \"b\"], true),\n    \"math/rem\": getSimpleInputMapping(FlowGraphBlockNames.Modulo, [\"a\", \"b\"]),\n    \"math/min\": getSimpleInputMapping(FlowGraphBlockNames.Min, [\"a\", \"b\"]),\n    \"math/max\": getSimpleInputMapping(FlowGraphBlockNames.Max, [\"a\", \"b\"]),\n    \"math/clamp\": getSimpleInputMapping(FlowGraphBlockNames.Clamp, [\"a\", \"b\", \"c\"]),\n    \"math/saturate\": getSimpleInputMapping(FlowGraphBlockNames.Saturate),\n    \"math/mix\": getSimpleInputMapping(FlowGraphBlockNames.MathInterpolation, [\"a\", \"b\", \"c\"]),\n    \"math/eq\": getSimpleInputMapping(FlowGraphBlockNames.Equality, [\"a\", \"b\"]),\n    \"math/lt\": getSimpleInputMapping(FlowGraphBlockNames.LessThan, [\"a\", \"b\"]),\n    \"math/le\": getSimpleInputMapping(FlowGraphBlockNames.LessThanOrEqual, [\"a\", \"b\"]),\n    \"math/gt\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThan, [\"a\", \"b\"]),\n    \"math/ge\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThanOrEqual, [\"a\", \"b\"]),\n    \"math/isnan\": getSimpleInputMapping(FlowGraphBlockNames.IsNaN),\n    \"math/isinf\": getSimpleInputMapping(FlowGraphBlockNames.IsInfinity),\n    \"math/select\": {\n        blocks: [FlowGraphBlockNames.Conditional],\n        inputs: {\n            values: {\n                condition: { name: \"condition\" },\n                // Should we validate those have the same type here, or assume it is already validated?\n                a: { name: \"onTrue\" },\n                b: { name: \"onFalse\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/random\": {\n        blocks: [FlowGraphBlockNames.Random],\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/sin\": getSimpleInputMapping(FlowGraphBlockNames.Sin),\n    \"math/cos\": getSimpleInputMapping(FlowGraphBlockNames.Cos),\n    \"math/tan\": getSimpleInputMapping(FlowGraphBlockNames.Tan),\n    \"math/asin\": getSimpleInputMapping(FlowGraphBlockNames.Asin),\n    \"math/acos\": getSimpleInputMapping(FlowGraphBlockNames.Acos),\n    \"math/atan\": getSimpleInputMapping(FlowGraphBlockNames.Atan),\n    \"math/atan2\": getSimpleInputMapping(FlowGraphBlockNames.Atan2, [\"a\", \"b\"]),\n    \"math/sinh\": getSimpleInputMapping(FlowGraphBlockNames.Sinh),\n    \"math/cosh\": getSimpleInputMapping(FlowGraphBlockNames.Cosh),\n    \"math/tanh\": getSimpleInputMapping(FlowGraphBlockNames.Tanh),\n    \"math/asinh\": getSimpleInputMapping(FlowGraphBlockNames.Asinh),\n    \"math/acosh\": getSimpleInputMapping(FlowGraphBlockNames.Acosh),\n    \"math/atanh\": getSimpleInputMapping(FlowGraphBlockNames.Atanh),\n    \"math/exp\": getSimpleInputMapping(FlowGraphBlockNames.Exponential),\n    \"math/log\": getSimpleInputMapping(FlowGraphBlockNames.Log),\n    \"math/log2\": getSimpleInputMapping(FlowGraphBlockNames.Log2),\n    \"math/log10\": getSimpleInputMapping(FlowGraphBlockNames.Log10),\n    \"math/sqrt\": getSimpleInputMapping(FlowGraphBlockNames.SquareRoot),\n    \"math/cbrt\": getSimpleInputMapping(FlowGraphBlockNames.CubeRoot),\n    \"math/pow\": getSimpleInputMapping(FlowGraphBlockNames.Power, [\"a\", \"b\"]),\n    \"math/length\": getSimpleInputMapping(FlowGraphBlockNames.Length),\n    \"math/normalize\": getSimpleInputMapping(FlowGraphBlockNames.Normalize),\n    \"math/dot\": getSimpleInputMapping(FlowGraphBlockNames.Dot, [\"a\", \"b\"]),\n    \"math/cross\": getSimpleInputMapping(FlowGraphBlockNames.Cross, [\"a\", \"b\"]),\n    \"math/rotate2d\": getSimpleInputMapping(FlowGraphBlockNames.Rotate2D, [\"a\", \"b\"]),\n    \"math/rotate3d\": getSimpleInputMapping(FlowGraphBlockNames.Rotate3D, [\"a\", \"b\", \"c\"]),\n    \"math/transform\": {\n        // glTF transform is vectorN with matrixN\n        blocks: [FlowGraphBlockNames.TransformVector],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine2\": {\n        blocks: [FlowGraphBlockNames.CombineVector2],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine3\": {\n        blocks: [FlowGraphBlockNames.CombineVector3],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine4\": {\n        blocks: [FlowGraphBlockNames.CombineVector4],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    // one input, N outputs! outputs named using numbers.\n    \"math/extract2\": {\n        blocks: [FlowGraphBlockNames.ExtractVector2],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n            },\n        },\n    },\n    \"math/extract3\": {\n        blocks: [FlowGraphBlockNames.ExtractVector3],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n            },\n        },\n    },\n    \"math/extract4\": {\n        blocks: [FlowGraphBlockNames.ExtractVector4],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/transpose\": getSimpleInputMapping(FlowGraphBlockNames.Transpose),\n    \"math/determinant\": getSimpleInputMapping(FlowGraphBlockNames.Determinant),\n    \"math/inverse\": getSimpleInputMapping(FlowGraphBlockNames.InvertMatrix),\n    \"math/matmul\": getSimpleInputMapping(FlowGraphBlockNames.MatrixMultiplication, [\"a\", \"b\"]),\n    \"math/matCompose\": {\n        blocks: [FlowGraphBlockNames.MatrixCompose],\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            const d = serializedObjects[0].dataInputs.find((input) => input.name === \"rotationQuaternion\");\n            if (!d) {\n                throw new Error(\"Rotation quaternion input not found\");\n            }\n            // if value is defined, set the type to quaternion\n            if (context._connectionValues[d.uniqueId]) {\n                context._connectionValues[d.uniqueId].type = FlowGraphTypes.Quaternion;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/matDecompose\": {\n        blocks: [FlowGraphBlockNames.MatrixDecompose],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/combine2x2\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract2x2\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float2x2\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/combine3x3\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract3x3\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float3x3\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n            },\n        },\n    },\n    \"math/combine4x4\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n                j: { name: \"input_9\", gltfType: \"number\" },\n                k: { name: \"input_10\", gltfType: \"number\" },\n                l: { name: \"input_11\", gltfType: \"number\" },\n                m: { name: \"input_12\", gltfType: \"number\" },\n                n: { name: \"input_13\", gltfType: \"number\" },\n                o: { name: \"input_14\", gltfType: \"number\" },\n                p: { name: \"input_15\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract4x4\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n                \"9\": { name: \"output_9\" },\n                \"10\": { name: \"output_10\" },\n                \"11\": { name: \"output_11\" },\n                \"12\": { name: \"output_12\" },\n                \"13\": { name: \"output_13\" },\n                \"14\": { name: \"output_14\" },\n                \"15\": { name: \"output_15\" },\n            },\n        },\n    },\n    \"math/compose\": {\n        blocks: [FlowGraphBlockNames.MatrixCompose],\n        configuration: {},\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/decompose\": {\n        blocks: [FlowGraphBlockNames.MatrixDecompose],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/not\": {\n        blocks: [FlowGraphBlockNames.BitwiseNot],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            // try to infer the type or fallback to Integer\n            const socketIn = serializedObjects[0].dataInputs[0];\n            serializedObjects[0].config.valueType = context._connectionValues[socketIn.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/and\": {\n        blocks: [FlowGraphBlockNames.BitwiseAnd],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/or\": {\n        blocks: [FlowGraphBlockNames.BitwiseOr],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/xor\": {\n        blocks: [FlowGraphBlockNames.BitwiseXor],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config = serializedObjects[0].config || {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/asr\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseRightShift, [\"a\", \"b\"]),\n    \"math/lsl\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseLeftShift, [\"a\", \"b\"]),\n    \"math/clz\": getSimpleInputMapping(FlowGraphBlockNames.LeadingZeros),\n    \"math/ctz\": getSimpleInputMapping(FlowGraphBlockNames.TrailingZeros),\n    \"math/popcnt\": getSimpleInputMapping(FlowGraphBlockNames.OneBitsCounter),\n    \"math/rad\": getSimpleInputMapping(FlowGraphBlockNames.DegToRad),\n    \"math/deg\": getSimpleInputMapping(FlowGraphBlockNames.RadToDeg),\n    \"type/boolToInt\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToInt),\n    \"type/boolToFloat\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToFloat),\n    \"type/intToBool\": getSimpleInputMapping(FlowGraphBlockNames.IntToBoolean),\n    \"type/intToFloat\": getSimpleInputMapping(FlowGraphBlockNames.IntToFloat),\n    \"type/floatToInt\": getSimpleInputMapping(FlowGraphBlockNames.FloatToInt),\n    \"type/floatToBool\": getSimpleInputMapping(FlowGraphBlockNames.FloatToBoolean),\n\n    // flows\n    \"flow/sequence\": {\n        blocks: [FlowGraphBlockNames.Sequence],\n        extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows || []).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/branch\": {\n        blocks: [FlowGraphBlockNames.Branch],\n        outputs: {\n            flows: {\n                true: { name: \"onTrue\" },\n                false: { name: \"onFalse\" },\n            },\n        },\n    },\n    \"flow/switch\": {\n        blocks: [FlowGraphBlockNames.Switch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return true;\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return true;\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            // convert all names of output flow to out_$1 apart from \"default\"\n            if (declaration.op !== \"flow/switch\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"Switch should have a single configuration object, the cases array\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.signalOutputs.forEach((output) => {\n                if (output.name !== \"default\") {\n                    output.name = \"out_\" + output.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/while\": {\n        blocks: [FlowGraphBlockNames.WhileLoop],\n        outputs: {\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/for\": {\n        blocks: [FlowGraphBlockNames.ForLoop],\n        configuration: {\n            initialIndex: { name: \"initialIndex\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            values: {\n                startIndex: { name: \"startIndex\", gltfType: \"number\" },\n                endIndex: { name: \"endIndex\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                index: { name: \"index\" },\n            },\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/doN\": {\n        blocks: [FlowGraphBlockNames.DoN],\n        configuration: {},\n        inputs: {\n            values: {\n                n: { name: \"maxExecutions\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                currentCount: { name: \"executionCount\" },\n            },\n        },\n    },\n    \"flow/multiGate\": {\n        blocks: [FlowGraphBlockNames.MultiGate],\n        configuration: {\n            isRandom: { name: \"isRandom\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n            isLoop: { name: \"isLoop\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            if (declaration.op !== \"flow/multiGate\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"MultiGate should have a single configuration object, the number of output flows\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/waitAll\": {\n        blocks: [FlowGraphBlockNames.WaitAll],\n        configuration: {\n            inputFlows: { name: \"inputSignalCount\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            flows: {\n                \"[segment]\": { name: \"in_$1\" },\n            },\n        },\n        validation(gltfBlock) {\n            // check that the configuration value is an integer\n            if (typeof gltfBlock.configuration?.inputFlows?.value[0] !== \"number\") {\n                gltfBlock.configuration = gltfBlock.configuration || {\n                    inputFlows: { value: [0] },\n                };\n                gltfBlock.configuration.inputFlows.value = [0];\n            }\n            return true;\n        },\n    },\n    \"flow/throttle\": {\n        blocks: [FlowGraphBlockNames.Throttle],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/setDelay\": {\n        blocks: [FlowGraphBlockNames.SetDelay],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/cancelDelay\": {\n        blocks: [FlowGraphBlockNames.CancelDelay],\n    },\n    \"variable/get\": {\n        blocks: [FlowGraphBlockNames.GetVariable],\n        validation(gltfBlock) {\n            if (!gltfBlock.configuration?.variable?.value) {\n                Logger.Error(\"Variable get block should have a variable configuration\");\n                return false;\n            }\n            return true;\n        },\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/set\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index: number[], parser): string[] {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/setMultiple\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variables: {\n                name: \"variables\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                dataTransformer(index: number[][], parser): string[][] {\n                    return [index[0].map((i) => parser.getVariableName(i))];\n                },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[0];\n            serializedGetVariable.dataInputs.forEach((input) => {\n                input.name = parser.getVariableName(+input.name);\n            });\n\n            return serializedObjects;\n        },\n    },\n    \"variable/interpolate\": {\n        blocks: [\n            FlowGraphBlockNames.ValueInterpolation,\n            FlowGraphBlockNames.Context,\n            FlowGraphBlockNames.PlayAnimation,\n            FlowGraphBlockNames.BezierCurveEasing,\n            FlowGraphBlockNames.GetVariable,\n        ],\n        configuration: {\n            variable: {\n                name: \"propertyName\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n            useSlerp: {\n                name: \"animationType\",\n                inOptions: true,\n                defaultValue: false,\n                dataTransformer: (value) => {\n                    if (value[0] === true) {\n                        return [FlowGraphTypes.Quaternion];\n                    } else {\n                        return [undefined];\n                    }\n                },\n            },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                duration: { name: \"duration_1\", gltfType: \"number\" },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"userVariables\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 4,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // is useSlerp is used, animationType should be set to be quaternion!\n            const serializedValueInterpolation = serializedObjects[0];\n            const propertyIndex = gltfBlock.configuration?.variable.value[0];\n            if (typeof propertyIndex !== \"number\") {\n                Logger.Error(\"Variable index is not defined for variable interpolation block\");\n                throw new Error(\"Variable index is not defined for variable interpolation block\");\n            }\n            const variable = parser.arrays.staticVariables[propertyIndex];\n            // if not set by useSlerp\n            if (typeof serializedValueInterpolation.config.animationType.value === \"undefined\") {\n                // get the value type\n                parser.arrays.staticVariables;\n                serializedValueInterpolation.config.animationType.value = getAnimationTypeByFlowGraphType(variable.type);\n            }\n\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[4];\n            serializedGetVariable.config ||= {};\n            serializedGetVariable.config.variable ||= {};\n            serializedGetVariable.config.variable.value = parser.getVariableName(propertyIndex);\n\n            // get the control points from the easing block\n            serializedObjects[3].config ||= {};\n\n            return serializedObjects;\n        },\n    },\n    \"pointer/get\": {\n        blocks: [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customGetFunction\",\n                output: \"getFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/set\": {\n        blocks: [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                // must be defined due to the array taking over\n                value: { name: \"value\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customSetFunction\",\n                output: \"setFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/interpolate\": {\n        // interpolate, parse the pointer and play the animation generated. 3 blocks!\n        blocks: [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n                duration: { name: \"duration_1\", gltfType: \"number\" /*, inOptions: true */ },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.Easing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.Easing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customBuildAnimation\",\n                output: \"generateAnimationsFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                } else if (serializedObject.className === FlowGraphBlockNames.ValueInterpolation) {\n                    serializedObject.config ||= {};\n                    Object.keys(gltfBlock.values || []).forEach((key) => {\n                        const value = gltfBlock.values?.[key];\n                        if (key === \"value\" && value) {\n                            // get the type of the value\n                            const type = value.type;\n                            if (type !== undefined) {\n                                serializedObject.config.animationType = parser.arrays.types[type].flowGraphType;\n                            }\n                        }\n                    });\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"animation/start\": {\n        blocks: [FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                speed: { name: \"speed\", gltfType: \"number\" },\n                // 60 is a const from the glTF loader\n                startTime: { name: \"from\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._loader.parent.targetFps] },\n                endTime: { name: \"to\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._loader.parent.targetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stop\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stopAt\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        configuration: {},\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                stopTime: { name: \"stopAtFrame\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._loader.parent.targetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"math/switch\": {\n        blocks: [FlowGraphBlockNames.DataSwitch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return true;\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return true;\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.dataInputs.forEach((input) => {\n                if (input.name !== \"default\" && input.name !== \"case\") {\n                    input.name = \"in_\" + input.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"debug/log\": {\n        blocks: [FlowGraphBlockNames.ConsoleLog],\n        configuration: {\n            message: { name: \"messageTemplate\", inOptions: true },\n        },\n    },\n};\n\nfunction getSimpleInputMapping(type: FlowGraphBlockNames, inputs: string[] = [\"a\"], inferType?: boolean): IGLTFToFlowGraphMapping {\n    return {\n        blocks: [type],\n        inputs: {\n            values: inputs.reduce(\n                (acc, input) => {\n                    acc[input] = { name: input };\n                    return acc;\n                },\n                {} as { [key: string]: { name: string } }\n            ),\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            if (inferType) {\n                // configure it to work the way glTF specifies\n                serializedObjects[0].config = serializedObjects[0].config || {};\n                // try to infer the type or fallback to Integer\n                // check the gltf block for the inputs, see if they have a type\n                let type = -1;\n                Object.keys(_gltfBlock.values || {}).find((value) => {\n                    if (_gltfBlock.values?.[value].type !== undefined) {\n                        type = _gltfBlock.values[value].type;\n                        return true;\n                    }\n                    return false;\n                });\n                if (type !== -1) {\n                    serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n                }\n            }\n            return serializedObjects;\n        },\n    };\n}\n\nexport function getAllSupportedNativeNodeTypes(): string[] {\n    return Object.keys(gltfToFlowGraphMapping);\n}\n\n/**\n * \n * These are the nodes from the specs:\n\n### Math Nodes\n1. **Constants**\n   - E (`math/e`) FlowGraphBlockNames.E\n   - Pi (`math/pi`) FlowGraphBlockNames.PI\n   - Infinity (`math/inf`) FlowGraphBlockNames.Inf\n   - Not a Number (`math/nan`) FlowGraphBlockNames.NaN\n2. **Arithmetic Nodes**\n   - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n   - Sign (`math/sign`) FlowGraphBlockNames.Sign\n   - Truncate (`math/trunc`) FlowGraphBlockNames.Trunc\n   - Floor (`math/floor`) FlowGraphBlockNames.Floor\n   - Ceil (`math/ceil`) FlowGraphBlockNames.Ceil\n   - Round (`math/round`)  FlowGraphBlockNames.Round\n   - Fraction (`math/fract`) FlowGraphBlockNames.Fract\n   - Negation (`math/neg`) FlowGraphBlockNames.Negation\n   - Addition (`math/add`) FlowGraphBlockNames.Add\n   - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n   - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n   - Division (`math/div`) FlowGraphBlockNames.Divide\n   - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n   - Minimum (`math/min`) FlowGraphBlockNames.Min\n   - Maximum (`math/max`) FlowGraphBlockNames.Max\n   - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n   - Saturate (`math/saturate`) FlowGraphBlockNames.Saturate\n   - Interpolate (`math/mix`) FlowGraphBlockNames.MathInterpolation\n3. **Comparison Nodes**\n   - Equality (`math/eq`) FlowGraphBlockNames.Equality\n   - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n   - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n   - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n   - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n4. **Special Nodes**\n   - Is Not a Number (`math/isnan`) FlowGraphBlockNames.IsNaN\n   - Is Infinity (`math/isinf`) FlowGraphBlockNames.IsInfinity\n   - Select (`math/select`) FlowGraphBlockNames.Conditional\n   - Random (`math/random`) FlowGraphBlockNames.Random\n5. **Angle and Trigonometry Nodes**\n   - Degrees-To-Radians (`math/rad`) FlowGraphBlockNames.DegToRad\n   - Radians-To-Degrees (`math/deg`) FlowGraphBlockNames.RadToDeg\n   - Sine (`math/sin`)  FlowGraphBlockNames.Sin\n   - Cosine (`math/cos`) FlowGraphBlockNames.Cos\n   - Tangent (`math/tan`) FlowGraphBlockNames.Tan\n   - Arcsine (`math/asin`) FlowGraphBlockNames.Asin\n   - Arccosine (`math/acos`) FlowGraphBlockNames.Acos\n   - Arctangent (`math/atan`) FlowGraphBlockNames.Atan\n   - Arctangent 2 (`math/atan2`) FlowGraphBlockNames.Atan2\n6. **Hyperbolic Nodes**\n   - Hyperbolic Sine (`math/sinh`) FlowGraphBlockNames.Sinh\n   - Hyperbolic Cosine (`math/cosh`) FlowGraphBlockNames.Cosh\n   - Hyperbolic Tangent (`math/tanh`) FlowGraphBlockNames.Tanh\n   - Inverse Hyperbolic Sine (`math/asinh`) FlowGraphBlockNames.Asinh\n   - Inverse Hyperbolic Cosine (`math/acosh`) FlowGraphBlockNames.Acosh\n   - Inverse Hyperbolic Tangent (`math/atanh`) FlowGraphBlockNames.Atanh\n7. **Exponential Nodes**\n   - Exponent (`math/exp`) FlowGraphBlockNames.Exponential\n   - Natural Logarithm (`math/log`) FlowGraphBlockNames.Log\n   - Base-2 Logarithm (`math/log2`) FlowGraphBlockNames.Log2\n   - Base-10 Logarithm (`math/log10`) FlowGraphBlockNames.Log10\n   - Square Root (`math/sqrt`) FlowGraphBlockNames.SquareRoot\n   - Cube Root (`math/cbrt`) FlowGraphBlockNames.CubeRoot\n   - Power (`math/pow`) FlowGraphBlockNames.Power\n8. **Vector Nodes**\n   - Length (`math/length`) FlowGraphBlockNames.Length\n   - Normalize (`math/normalize`) FlowGraphBlockNames.Normalize\n   - Dot Product (`math/dot`) FlowGraphBlockNames.Dot\n   - Cross Product (`math/cross`) FlowGraphBlockNames.Cross\n   - Rotate 2D (`math/rotate2d`) FlowGraphBlockNames.Rotate2D\n   - Rotate 3D (`math/rotate3d`) FlowGraphBlockNames.Rotate3D\n   - Transform (`math/transform`) FlowGraphBlockNames.TransformVector\n9. **Matrix Nodes**\n   - Transpose (`math/transpose`) FlowGraphBlockNames.Transpose\n   - Determinant (`math/determinant`) FlowGraphBlockNames.Determinant\n   - Inverse (`math/inverse`) FlowGraphBlockNames.InvertMatrix\n   - Multiplication (`math/matmul`) FlowGraphBlockNames.MatrixMultiplication\n10. **Swizzle Nodes**\n    - Combine (`math/combine2`, `math/combine3`, `math/combine4`, `math/combine2x2`, `math/combine3x3`, `math/combine4x4`)\n        FlowGraphBlockNames.CombineVector2, FlowGraphBlockNames.CombineVector3, FlowGraphBlockNames.CombineVector4\n        FlowGraphBlockNames.CombineMatrix2D, FlowGraphBlockNames.CombineMatrix3D, FlowGraphBlockNames.CombineMatrix\n    - Extract (`math/extract2`, `math/extract3`, `math/extract4`, `math/extract2x2`, `math/extract3x3`, `math/extract4x4`)\n        FlowGraphBlockNames.ExtractVector2, FlowGraphBlockNames.ExtractVector3, FlowGraphBlockNames.ExtractVector4\n        FlowGraphBlockNames.ExtractMatrix2D, FlowGraphBlockNames.ExtractMatrix3D, FlowGraphBlockNames.ExtractMatrix\n11. **Integer Arithmetic Nodes**\n    - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n    - Sign (`math/sign`) FlowGraphBlockNames.Sign\n    - Negation (`math/neg`) FlowGraphBlockNames.Negation\n    - Addition (`math/add`) FlowGraphBlockNames.Add\n    - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n    - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n    - Division (`math/div`) FlowGraphBlockNames.Divide\n    - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n    - Minimum (`math/min`) FlowGraphBlockNames.Min\n    - Maximum (`math/max`) FlowGraphBlockNames.Max\n    - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n12. **Integer Comparison Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n    - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n    - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n    - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n13. **Integer Bitwise Nodes**\n    - Bitwise NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Bitwise AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Bitwise OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Bitwise XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n    - Right Shift (`math/asr`) FlowGraphBlockNames.BitwiseRightShift\n    - Left Shift (`math/lsl`) FlowGraphBlockNames.BitwiseLeftShift\n    - Count Leading Zeros (`math/clz`) FlowGraphBlockNames.LeadingZeros\n    - Count Trailing Zeros (`math/ctz`) FlowGraphBlockNames.TrailingZeros\n    - Count One Bits (`math/popcnt`) FlowGraphBlockNames.OneBitsCounter\n14. **Boolean Arithmetic Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Boolean NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Boolean AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Boolean OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Boolean XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n\n### Type Conversion Nodes\n1. **Boolean Conversion Nodes**\n   - Boolean to Integer (`type/boolToInt`) FlowGraphBlockNames.BooleanToInt\n   - Boolean to Float (`type/boolToFloat`) FlowGraphBlockNames.BooleanToFloat\n2. **Integer Conversion Nodes**\n   - Integer to Boolean (`type/intToBool`) FlowGraphBlockNames.IntToBoolean\n   - Integer to Float (`type/intToFloat`) FlowGraphBlockNames.IntToFloat\n3. **Float Conversion Nodes**\n   - Float to Boolean (`type/floatToBool`) FlowGraphBlockNames.FloatToBoolean\n   - Float to Integer (`type/floatToInt`) FlowGraphBlockNames.FloatToInt\n\n### Control Flow Nodes\n1. **Sync Nodes**\n   - Sequence (`flow/sequence`) FlowGraphBlockNames.Sequence\n   - Branch (`flow/branch`) FlowGraphBlockNames.Branch\n   - Switch (`flow/switch`) FlowGraphBlockNames.Switch\n   - While Loop (`flow/while`) FlowGraphBlockNames.WhileLoop\n   - For Loop (`flow/for`) FlowGraphBlockNames.ForLoop\n   - Do N (`flow/doN`) FlowGraphBlockNames.DoN\n   - Multi Gate (`flow/multiGate`) FlowGraphBlockNames.MultiGate\n   - Wait All (`flow/waitAll`) FlowGraphBlockNames.WaitAll\n   - Throttle (`flow/throttle`) FlowGraphBlockNames.Throttle\n2. **Delay Nodes**\n   - Set Delay (`flow/setDelay`) FlowGraphBlockNames.SetDelay\n   - Cancel Delay (`flow/cancelDelay`) FlowGraphBlockNames.CancelDelay\n\n### State Manipulation Nodes\n1. **Custom Variable Access**\n   - Variable Get (`variable/get`) FlowGraphBlockNames.GetVariable\n   - Variable Set (`variable/set`) FlowGraphBlockNames.SetVariable\n   - Variable Interpolate (`variable/interpolate`)\n2. **Object Model Access** // TODO fully test this!!!\n   - JSON Pointer Template Parsing (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Effective JSON Pointer Generation (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Get (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Set (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Interpolate (`pointer/interpolate`) [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing]\n\n### Animation Control Nodes\n1. **Animation Play** (`animation/start`) FlowGraphBlockNames.PlayAnimation\n2. **Animation Stop** (`animation/stop`) FlowGraphBlockNames.StopAnimation \n3. **Animation Stop At** (`animation/stopAt`) FlowGraphBlockNames.StopAnimation \n\n### Event Nodes\n1. **Lifecycle Event Nodes**\n   - On Start (`event/onStart`) FlowGraphBlockNames.SceneReadyEvent\n   - On Tick (`event/onTick`) FlowGraphBlockNames.SceneTickEvent\n2. **Custom Event Nodes**\n   - Receive (`event/receive`) FlowGraphBlockNames.ReceiveCustomEvent\n   - Send (`event/send`) FlowGraphBlockNames.SendCustomEvent\n\n */\n","import type { IKHRInteractivity_Graph, IKHRInteractivity_Node, IKHRInteractivity_OutputSocketReference, IKHRInteractivity_Variable } from \"babylonjs-gltf2interface\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport type { IGLTFToFlowGraphMapping } from \"./declarationMapper\";\nimport { getMappingForDeclaration, getMappingForFullOperationName } from \"./declarationMapper\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { ISerializedFlowGraph, ISerializedFlowGraphBlock, ISerializedFlowGraphConnection, ISerializedFlowGraphContext } from \"core/FlowGraph/typeDefinitions\";\nimport { RandomGUID } from \"core/Misc/guid\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport { FlowGraphConnectionType } from \"core/FlowGraph/flowGraphConnection\";\nimport { FlowGraphTypes } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { GLTFLoader } from \"../../glTFLoader\";\n\nexport interface InteractivityEvent {\n    eventId: string;\n    eventData?: {\n        eventData: boolean;\n        id: string;\n        type: string;\n        value?: any;\n    }[];\n}\nexport const gltfTypeToBabylonType: {\n    [key: string]: { length: number; flowGraphType: FlowGraphTypes; elementType: \"number\" | \"boolean\" };\n} = {\n    float: { length: 1, flowGraphType: FlowGraphTypes.Number, elementType: \"number\" },\n    bool: { length: 1, flowGraphType: FlowGraphTypes.Boolean, elementType: \"boolean\" },\n    float2: { length: 2, flowGraphType: FlowGraphTypes.Vector2, elementType: \"number\" },\n    float3: { length: 3, flowGraphType: FlowGraphTypes.Vector3, elementType: \"number\" },\n    float4: { length: 4, flowGraphType: FlowGraphTypes.Vector4, elementType: \"number\" },\n    float4x4: { length: 16, flowGraphType: FlowGraphTypes.Matrix, elementType: \"number\" },\n    float2x2: { length: 4, flowGraphType: FlowGraphTypes.Matrix2D, elementType: \"number\" },\n    float3x3: { length: 9, flowGraphType: FlowGraphTypes.Matrix3D, elementType: \"number\" },\n    int: { length: 1, flowGraphType: FlowGraphTypes.Integer, elementType: \"number\" },\n};\n\nexport class InteractivityGraphToFlowGraphParser {\n    /**\n     * Note - the graph should be rejected if the same type is defined twice.\n     * We currently don't validate that.\n     */\n    private _types: { length: number; flowGraphType: FlowGraphTypes; elementType: \"number\" | \"boolean\" }[] = [];\n    private _mappings: { flowGraphMapping: IGLTFToFlowGraphMapping; fullOperationName: string }[] = [];\n    private _staticVariables: { type: FlowGraphTypes; value: any[] }[] = [];\n    private _events: InteractivityEvent[] = [];\n    private _internalEventsCounter: number = 0;\n    private _nodes: { blocks: ISerializedFlowGraphBlock[]; fullOperationName: string }[] = [];\n\n    constructor(\n        private _interactivityGraph: IKHRInteractivity_Graph,\n        private _gltf: IGLTF,\n        public _loader: GLTFLoader\n    ) {\n        // start with types\n        this._parseTypes();\n        // continue with declarations\n        this._parseDeclarations();\n        this._parseVariables();\n        this._parseEvents();\n        this._parseNodes();\n    }\n\n    public get arrays() {\n        return {\n            types: this._types,\n            mappings: this._mappings,\n            staticVariables: this._staticVariables,\n            events: this._events,\n            nodes: this._nodes,\n        };\n    }\n\n    private _parseTypes() {\n        if (!this._interactivityGraph.types) {\n            return;\n        }\n        for (const type of this._interactivityGraph.types) {\n            this._types.push(gltfTypeToBabylonType[type.signature]);\n        }\n    }\n\n    private _parseDeclarations() {\n        if (!this._interactivityGraph.declarations) {\n            return;\n        }\n        for (const declaration of this._interactivityGraph.declarations) {\n            // make sure we have the mapping for this operation\n            const mapping = getMappingForDeclaration(declaration);\n            // mapping is defined, because we generate an empty mapping if it's not found\n            if (!mapping) {\n                Logger.Error([\"No mapping found for declaration\", declaration]);\n                throw new Error(\"Error parsing declarations\");\n            }\n            this._mappings.push({\n                flowGraphMapping: mapping,\n                fullOperationName: declaration.extension ? declaration.op + \":\" + declaration.extension : declaration.op,\n            });\n        }\n    }\n\n    private _parseVariables() {\n        if (!this._interactivityGraph.variables) {\n            return;\n        }\n        for (const variable of this._interactivityGraph.variables) {\n            const parsed = this._parseVariable(variable);\n            // set the default values here\n            this._staticVariables.push(parsed);\n        }\n    }\n\n    private _parseVariable(variable: IKHRInteractivity_Variable, dataTransform?: (value: any, parser: InteractivityGraphToFlowGraphParser) => any) {\n        const type = this._types[variable.type];\n        if (!type) {\n            Logger.Error([\"No type found for variable\", variable]);\n            throw new Error(\"Error parsing variables\");\n        }\n        if (variable.value) {\n            if (variable.value.length !== type.length) {\n                Logger.Error([\"Invalid value length for variable\", variable, type]);\n                throw new Error(\"Error parsing variables\");\n            }\n        }\n        const value = variable.value || [];\n        if (!value.length) {\n            switch (type.flowGraphType) {\n                case FlowGraphTypes.Boolean:\n                    value.push(false);\n                    break;\n                case FlowGraphTypes.Integer:\n                    value.push(0);\n                    break;\n                case FlowGraphTypes.Number:\n                    value.push(NaN);\n                    break;\n                case FlowGraphTypes.Vector2:\n                    value.push(NaN, NaN);\n                    break;\n                case FlowGraphTypes.Vector3:\n                    value.push(NaN, NaN, NaN);\n                    break;\n                case FlowGraphTypes.Vector4:\n                case FlowGraphTypes.Matrix2D:\n                case FlowGraphTypes.Quaternion:\n                    value.fill(NaN, 0, 4);\n                    break;\n                case FlowGraphTypes.Matrix:\n                    value.fill(NaN, 0, 16);\n                    break;\n                case FlowGraphTypes.Matrix3D:\n                    value.fill(NaN, 0, 9);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return { type: type.flowGraphType, value: dataTransform ? dataTransform(value, this) : value };\n    }\n\n    private _parseEvents() {\n        if (!this._interactivityGraph.events) {\n            return;\n        }\n        for (const event of this._interactivityGraph.events) {\n            const converted: InteractivityEvent = {\n                eventId: event.id || \"internalEvent_\" + this._internalEventsCounter++,\n            };\n            if (event.values) {\n                converted.eventData = Object.keys(event.values).map((key) => {\n                    const eventValue = event.values?.[key];\n                    if (!eventValue) {\n                        Logger.Error([\"No value found for event key\", key]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const type = this._types[eventValue.type];\n                    if (!type) {\n                        Logger.Error([\"No type found for event value\", eventValue]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const value = typeof eventValue.value !== \"undefined\" ? this._parseVariable(eventValue) : undefined;\n                    return {\n                        id: key,\n                        type: type.flowGraphType,\n                        eventData: true,\n                        value,\n                    };\n                });\n            }\n            this._events.push(converted);\n        }\n    }\n\n    private _parseNodes() {\n        if (!this._interactivityGraph.nodes) {\n            return;\n        }\n        for (const node of this._interactivityGraph.nodes) {\n            // some validation\n            if (typeof node.declaration !== \"number\") {\n                Logger.Error([\"No declaration found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            const mapping = this._mappings[node.declaration];\n            if (!mapping) {\n                Logger.Error([\"No mapping found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            if (mapping.flowGraphMapping.validation) {\n                if (!mapping.flowGraphMapping.validation(node, this._interactivityGraph, this._gltf)) {\n                    throw new Error(`Error validating interactivity node ${node}`);\n                }\n            }\n            const blocks: ISerializedFlowGraphBlock[] = [];\n            // create block(s) for this node using the mapping\n            for (const blockType of mapping.flowGraphMapping.blocks) {\n                const block = this._getEmptyBlock(blockType, mapping.fullOperationName);\n                this._parseNodeConfiguration(node, block, mapping.flowGraphMapping, blockType);\n                blocks.push(block);\n            }\n            this._nodes.push({ blocks, fullOperationName: mapping.fullOperationName });\n        }\n    }\n\n    private _getEmptyBlock(className: string, type: string): ISerializedFlowGraphBlock {\n        const uniqueId = RandomGUID();\n        const dataInputs: ISerializedFlowGraphConnection[] = [];\n        const dataOutputs: ISerializedFlowGraphConnection[] = [];\n        const signalInputs: ISerializedFlowGraphConnection[] = [];\n        const signalOutputs: ISerializedFlowGraphConnection[] = [];\n        const config: IFlowGraphBlockConfiguration = {};\n        const metadata = {};\n        return {\n            uniqueId,\n            className,\n            dataInputs,\n            dataOutputs,\n            signalInputs,\n            signalOutputs,\n            config,\n            type,\n            metadata,\n        };\n    }\n\n    private _parseNodeConfiguration(node: IKHRInteractivity_Node, block: ISerializedFlowGraphBlock, nodeMapping: IGLTFToFlowGraphMapping, blockType: FlowGraphBlockNames | string) {\n        const configuration = block.config;\n        if (node.configuration) {\n            Object.keys(node.configuration).forEach((key) => {\n                const value = node.configuration?.[key];\n                // value is always an array, never a number or string\n                if (!value) {\n                    Logger.Error([\"No value found for node configuration\", key]);\n                    throw new Error(\"Error parsing node configuration\");\n                }\n                const configMapping = nodeMapping.configuration?.[key];\n                const belongsToBlock = configMapping && configMapping.toBlock ? configMapping.toBlock === blockType : nodeMapping.blocks.indexOf(blockType) === 0;\n                if (belongsToBlock) {\n                    // get the right name for the configuration key\n                    const configKey = configMapping?.name || key;\n                    if ((!value || typeof value.value === \"undefined\") && typeof configMapping?.defaultValue !== \"undefined\") {\n                        configuration[configKey] = {\n                            value: configMapping.defaultValue,\n                        };\n                    } else if (value.value.length >= 1) {\n                        // supporting int[] and int/boolean/string\n                        configuration[configKey] = {\n                            value: value.value.length === 1 ? value.value[0] : value.value,\n                        };\n                    } else {\n                        Logger.Warn([\"Invalid value for node configuration\", value]);\n                    }\n                    // make sure we transform the data if needed\n                    if (configMapping && configMapping.dataTransformer) {\n                        configuration[configKey].value = configMapping.dataTransformer([configuration[configKey].value], this)[0];\n                    }\n                }\n            });\n        }\n    }\n\n    private _parseNodeConnections(context: ISerializedFlowGraphContext) {\n        for (let i = 0; i < this._nodes.length; i++) {\n            // get the corresponding gltf node\n            const gltfNode = this._interactivityGraph.nodes?.[i];\n            if (!gltfNode) {\n                // should never happen but let's still check\n                Logger.Error([\"No node found for interactivity node\", this._nodes[i]]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowGraphBlocks = this._nodes[i];\n            const outputMapper = this._mappings[gltfNode.declaration];\n            // validate\n            if (!outputMapper) {\n                Logger.Error([\"No mapping found for node\", gltfNode]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowsFromGLTF = gltfNode.flows || {};\n            const flowsKeys = Object.keys(flowsFromGLTF).sort(); // sorting as some operations require sorted keys\n            // connect the flows\n            for (const flowKey of flowsKeys) {\n                const flow = flowsFromGLTF[flowKey];\n                const flowMapping = outputMapper.flowGraphMapping.outputs?.flows?.[flowKey];\n                const socketOutName = flowMapping?.name || flowKey;\n                // create a serialized socket\n                const socketOut = this._createNewSocketConnection(socketOutName, true);\n                const block = (flowMapping && flowMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === flowMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.signalOutputs.push(socketOut);\n                // get the input node of this block\n                const inputNodeId = flow.node;\n                const nodeIn = this._nodes[inputNodeId];\n                if (!nodeIn) {\n                    Logger.Error([\"No node found for input node id\", inputNodeId]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                // get the mapper for the input node - in case it mapped to multiple blocks\n                const inputMapper = getMappingForFullOperationName(nodeIn.fullOperationName);\n                if (!inputMapper) {\n                    Logger.Error([\"No mapping found for input node\", nodeIn]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                let flowInMapping = inputMapper.inputs?.flows?.[flow.socket || \"in\"];\n                let arrayMapping = false;\n                if (!flowInMapping) {\n                    for (const key in inputMapper.inputs?.flows) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            flowInMapping = inputMapper.inputs?.flows?.[key];\n                        }\n                    }\n                }\n                const nodeInSocketName = flowInMapping ? (arrayMapping ? flowInMapping.name.replace(\"$1\", flow.socket || \"\") : flowInMapping.name) : flow.socket || \"in\";\n                const inputBlock = (flowInMapping && flowInMapping.toBlock && nodeIn.blocks.find((b) => b.className === flowInMapping.toBlock)) || nodeIn.blocks[0];\n                // in all of the flow graph input connections, find the one with the same name as the socket\n                let socketIn = inputBlock.signalInputs.find((s) => s.name === nodeInSocketName);\n                // if the socket doesn't exist, create the input socket for the connection\n                if (!socketIn) {\n                    socketIn = this._createNewSocketConnection(nodeInSocketName);\n                    inputBlock.signalInputs.push(socketIn);\n                }\n                // connect the sockets\n                socketIn.connectedPointIds.push(socketOut.uniqueId);\n                socketOut.connectedPointIds.push(socketIn.uniqueId);\n            }\n            // connect the values\n            const valuesFromGLTF = gltfNode.values || {};\n            const valuesKeys = Object.keys(valuesFromGLTF);\n            for (const valueKey of valuesKeys) {\n                const value = valuesFromGLTF[valueKey];\n                let valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[valueKey];\n                let arrayMapping = false;\n                if (!valueMapping) {\n                    for (const key in outputMapper.flowGraphMapping.inputs?.values) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[key];\n                        }\n                    }\n                }\n                const socketInName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", valueKey) : valueMapping.name) : valueKey;\n                // create a serialized socket\n                const socketIn = this._createNewSocketConnection(socketInName);\n                const block = (valueMapping && valueMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === valueMapping!.toBlock)) || flowGraphBlocks.blocks[0];\n                block.dataInputs.push(socketIn);\n                if ((value as IKHRInteractivity_Variable).value !== undefined) {\n                    const convertedValue = this._parseVariable(value as IKHRInteractivity_Variable, valueMapping && valueMapping.dataTransformer);\n                    context._connectionValues[socketIn.uniqueId] = convertedValue;\n                } else if (typeof (value as IKHRInteractivity_OutputSocketReference).node !== \"undefined\") {\n                    const nodeOutId = (value as IKHRInteractivity_OutputSocketReference).node;\n                    const nodeOutSocketName = (value as IKHRInteractivity_OutputSocketReference).socket || \"value\";\n                    const nodeOut = this._nodes[nodeOutId];\n                    if (!nodeOut) {\n                        Logger.Error([\"No node found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    const outputMapper = getMappingForFullOperationName(nodeOut.fullOperationName);\n                    if (!outputMapper) {\n                        Logger.Error([\"No mapping found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    let valueMapping = outputMapper.outputs?.values?.[nodeOutSocketName];\n                    let arrayMapping = false;\n                    // check if there is an array mapping defined\n                    if (!valueMapping) {\n                        // search for a value mapping that has an array mapping\n                        for (const key in outputMapper.outputs?.values) {\n                            if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                                arrayMapping = true;\n                                valueMapping = outputMapper.outputs?.values?.[key];\n                            }\n                        }\n                    }\n                    const socketOutName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", nodeOutSocketName) : valueMapping?.name) : nodeOutSocketName;\n                    const outBlock = (valueMapping && valueMapping.toBlock && nodeOut.blocks.find((b) => b.className === valueMapping!.toBlock)) || nodeOut.blocks[0];\n                    let socketOut = outBlock.dataOutputs.find((s) => s.name === socketOutName);\n                    // if the socket doesn't exist, create it\n                    if (!socketOut) {\n                        socketOut = this._createNewSocketConnection(socketOutName, true);\n                        outBlock.dataOutputs.push(socketOut);\n                    }\n                    // connect the sockets\n                    socketIn.connectedPointIds.push(socketOut.uniqueId);\n                    socketOut.connectedPointIds.push(socketIn.uniqueId);\n                } else {\n                    Logger.Error([\"Invalid value for value connection\", value]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n            }\n\n            // inter block connections\n            if (outputMapper.flowGraphMapping.interBlockConnectors) {\n                for (const connector of outputMapper.flowGraphMapping.interBlockConnectors) {\n                    const input = connector.input;\n                    const output = connector.output;\n                    const isVariable = connector.isVariable;\n                    this._connectFlowGraphNodes(input, output, flowGraphBlocks.blocks[connector.inputBlockIndex], flowGraphBlocks.blocks[connector.outputBlockIndex], isVariable);\n                }\n            }\n\n            if (outputMapper.flowGraphMapping.extraProcessor) {\n                const declaration = this._interactivityGraph.declarations?.[gltfNode.declaration];\n                if (!declaration) {\n                    Logger.Error([\"No declaration found for extra processor\", gltfNode]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                flowGraphBlocks.blocks = outputMapper.flowGraphMapping.extraProcessor(\n                    gltfNode,\n                    declaration,\n                    outputMapper.flowGraphMapping,\n                    this,\n                    flowGraphBlocks.blocks,\n                    context,\n                    this._gltf\n                );\n            }\n        }\n    }\n\n    private _createNewSocketConnection(name: string, isOutput?: boolean): ISerializedFlowGraphConnection {\n        return {\n            uniqueId: RandomGUID(),\n            name,\n            _connectionType: isOutput ? FlowGraphConnectionType.Output : FlowGraphConnectionType.Input,\n            connectedPointIds: [],\n        };\n    }\n\n    private _connectFlowGraphNodes(input: string, output: string, serializedInput: ISerializedFlowGraphBlock, serializedOutput: ISerializedFlowGraphBlock, isVariable?: boolean) {\n        const inputArray = isVariable ? serializedInput.dataInputs : serializedInput.signalInputs;\n        const outputArray = isVariable ? serializedOutput.dataOutputs : serializedOutput.signalOutputs;\n        const inputConnection = inputArray.find((s) => s.name === input) || this._createNewSocketConnection(input);\n        const outputConnection = outputArray.find((s) => s.name === output) || this._createNewSocketConnection(output, true);\n        // of not found add it to the array\n        if (!inputArray.find((s) => s.name === input)) {\n            inputArray.push(inputConnection);\n        }\n        if (!outputArray.find((s) => s.name === output)) {\n            outputArray.push(outputConnection);\n        }\n        // connect the sockets\n        inputConnection.connectedPointIds.push(outputConnection.uniqueId);\n        outputConnection.connectedPointIds.push(inputConnection.uniqueId);\n    }\n\n    public getVariableName(index: number) {\n        return \"staticVariable_\" + index;\n    }\n\n    public serializeToFlowGraph(): ISerializedFlowGraph {\n        const context: ISerializedFlowGraphContext = {\n            uniqueId: RandomGUID(),\n            _userVariables: {},\n            _connectionValues: {},\n        };\n        this._parseNodeConnections(context);\n        for (let i = 0; i < this._staticVariables.length; i++) {\n            const variable = this._staticVariables[i];\n            context._userVariables[this.getVariableName(i)] = variable;\n        }\n\n        const allBlocks = this._nodes.reduce((acc, val) => acc.concat(val.blocks), [] as ISerializedFlowGraphBlock[]);\n\n        return {\n            rightHanded: true,\n            allBlocks,\n            executionContexts: [context],\n        };\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IKHRInteractivity } from \"babylonjs-gltf2interface\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { FlowGraphCoordinator } from \"core/FlowGraph/flowGraphCoordinator\";\r\nimport { ParseFlowGraphAsync } from \"core/FlowGraph/flowGraphParser\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport type { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\r\nimport { AddObjectAccessorToKey, GetPathToObjectConverter } from \"./objectModelMapping\";\r\nimport { InteractivityGraphToFlowGraphParser } from \"./KHR_interactivity/interactivityGraphParser\";\r\nimport { addToBlockFactory } from \"core/FlowGraph/Blocks/flowGraphBlockFactory\";\r\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IAnimation } from \"../glTFLoaderInterfaces\";\r\n\r\nconst NAME = \"KHR_interactivity\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_interactivity extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_interactivity\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * Loader extension for KHR_interactivity\r\n */\r\nexport class KHR_interactivity implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _pathConverter?: GLTFPathToObjectConverter<any, any, any>;\r\n\r\n    /**\r\n     * @internal\r\n     * @param _loader\r\n     */\r\n    constructor(private _loader: GLTFLoader) {\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        this._pathConverter = GetPathToObjectConverter(this._loader.gltf);\r\n        // avoid starting animations automatically.\r\n        _loader._skipStartAnimationStep = true;\r\n\r\n        // Update object model with new pointers\r\n\r\n        const scene = _loader.babylonScene;\r\n        if (scene) {\r\n            _AddInteractivityObjectModel(scene);\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._pathConverter;\r\n    }\r\n\r\n    public async onReady(): Promise<void> {\r\n        if (!this._loader.babylonScene || !this._pathConverter) {\r\n            return;\r\n        }\r\n        const scene = this._loader.babylonScene;\r\n        const interactivityDefinition = this._loader.gltf.extensions?.KHR_interactivity as IKHRInteractivity;\r\n        if (!interactivityDefinition) {\r\n            // This can technically throw, but it's not a critical error\r\n            return;\r\n        }\r\n\r\n        const coordinator = new FlowGraphCoordinator({ scene });\r\n        const graphs = interactivityDefinition.graphs.map((graph) => {\r\n            const parser = new InteractivityGraphToFlowGraphParser(graph, this._loader.gltf, this._loader);\r\n            return parser.serializeToFlowGraph();\r\n        });\r\n        // parse each graph async\r\n        await Promise.all(graphs.map((graph) => ParseFlowGraphAsync(graph, { coordinator, pathConverter: this._pathConverter })));\r\n\r\n        coordinator.start();\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n * populates the object model with the interactivity extension\r\n */\r\nexport function _AddInteractivityObjectModel(scene: Scene) {\r\n    // Note - all of those are read-only, as per the specs!\r\n\r\n    // active camera rotation\r\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/rotation\", {\r\n        get: () => {\r\n            if (!scene.activeCamera) {\r\n                return new Quaternion(NaN, NaN, NaN, NaN);\r\n            }\r\n            return Quaternion.FromRotationMatrix(scene.activeCamera.getWorldMatrix()).normalize();\r\n        },\r\n        type: \"Quaternion\",\r\n        getTarget: () => scene.activeCamera,\r\n    });\r\n    // activeCamera position\r\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/position\", {\r\n        get: () => {\r\n            if (!scene.activeCamera) {\r\n                return new Vector3(NaN, NaN, NaN);\r\n            }\r\n            return scene.activeCamera.position; // not global position\r\n        },\r\n        type: \"Vector3\",\r\n        getTarget: () => scene.activeCamera,\r\n    });\r\n\r\n    // /animations/{} pointers:\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/isPlaying\", {\r\n        get: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup?.isPlaying ?? false;\r\n        },\r\n        type: \"boolean\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/minTime\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.from ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/maxTime\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.to ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    // playhead\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/playhead\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    //virtualPlayhead - TODO, do we support this property in our animations? getCurrentFrame  is the only method we have for this.\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/virtualPlayhead\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n}\r\n\r\n// Register flow graph blocks. Do it here so they are available when the extension is enabled.\r\naddToBlockFactory(NAME, \"FlowGraphGLTFDataProvider\", async () => {\r\n    return (await import(\"./KHR_interactivity/flowGraphGLTFDataProvider\")).FlowGraphGLTFDataProvider;\r\n});\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_interactivity(loader));\r\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_visibility\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_node_visibility extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_visibility\"]: {};\n    }\n}\n\n// object model extension for visibility\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_visibility/visible\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.isVisible !== undefined) {\n            return tn.isVisible;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.inheritVisibility = true;\n        });\n        if (node._babylonTransformNode) {\n            (node._babylonTransformNode as AbstractMesh).isVisible = value;\n        }\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isVisible = value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"isVisible\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_node_visibility\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_visibility implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            node._primitiveBabylonMeshes?.forEach((mesh) => {\n                mesh.inheritVisibility = true;\n            });\n            // When the JSON Pointer is used we need to change both the transform node and the primitive meshes to the new value.\n            if (node.extensions?.KHR_node_visibility) {\n                if (node.extensions?.KHR_node_visibility.visible === false) {\n                    if (node._babylonTransformNode) {\n                        (node._babylonTransformNode as AbstractMesh).isVisible = false;\n                    }\n                    node._primitiveBabylonMeshes?.forEach((mesh) => {\n                        mesh.isVisible = false;\n                    });\n                }\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_visibility(loader));\n","import { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_selectability\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_selectability extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_selectability\"]: {};\n    }\n}\n\n// add the interactivity mapping for the onSelect event\naddNewInteractivityFlowGraphMapping(\"event/onSelect\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.MeshPickEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [\"pickedMesh_\" + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            selectedNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n            selectionPoint: { name: \"pickedPoint\" },\n            selectionRayOrigin: { name: \"pickOrigin\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"asset\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"pickedMesh\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = \"pickedMesh_\" + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\n// object model extension for selectable\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_selectability/selectable\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.isPickable !== undefined) {\n            return tn.isPickable;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isPickable = value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"isPickable\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_selectability\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_selectability implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            if (node.extensions?.KHR_node_selectability && node.extensions?.KHR_node_selectability.selectable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.isPickable = false;\n                });\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_selectability(loader));\n","import { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_hoverability\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_node_hoverability extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_hoverability\"]: {};\n    }\n}\n\n// interactivity\nconst meshPointerOverPrefix = \"targetMeshPointerOver_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverIn\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.PointerOverEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [meshPointerOverPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshUnderPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = meshPointerOverPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\nconst meshPointerOutPrefix = \"targetMeshPointerOut_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverOut\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.PointerOutEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [meshPointerOutPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshOutOfPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = meshPointerOutPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_hoverability/hoverable\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.pointerOverDisableMeshTesting !== undefined) {\n            return tn.pointerOverDisableMeshTesting;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.pointerOverDisableMeshTesting = !value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"pointerOverDisableMeshTesting\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_node_hoverability\n * @see https://github.com/KhronosGroup/glTF/pull/2426\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_hoverability implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            // default is true, so only apply if false\n            if (node.extensions?.KHR_node_hoverability && node.extensions?.KHR_node_hoverability.hoverable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.pointerOverDisableMeshTesting = true;\n                });\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_hoverability(loader));\n","import type { Nullable } from \"core/types\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport type { INode, ICamera, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"ExtrasAsMetadata\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the ExtrasAsMetadata extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"ExtrasAsMetadata\"]: {};\r\n    }\r\n}\r\n\r\ninterface ObjectWithMetadata {\r\n    metadata: any;\r\n}\r\n\r\n/**\r\n * Store glTF extras (if present) in BJS objects' metadata\r\n */\r\nexport class ExtrasAsMetadata implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _assignExtras(babylonObject: ObjectWithMetadata, gltfProp: IProperty): void {\r\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\r\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\r\n            const gltf = (metadata.gltf = metadata.gltf || {});\r\n            gltf.extras = gltfProp.extras;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._loader.loadNodeAsync(context, node, (babylonTransformNode): void => {\r\n            this._assignExtras(babylonTransformNode, node);\r\n            assign(babylonTransformNode);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._loader.loadCameraAsync(context, camera, (babylonCamera): void => {\r\n            this._assignExtras(babylonCamera, camera);\r\n            assign(babylonCamera);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\r\n        this._assignExtras(babylonMaterial, material);\r\n        return babylonMaterial;\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, false, (loader) => new ExtrasAsMetadata(loader));\r\n","import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n/**\r\n * Class reading and parsing the MTL file bundled with the obj file.\r\n */\r\nexport class MTLFileLoader {\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static INVERT_TEXTURE_Y = true;\r\n\r\n    /**\r\n     * All material loaded from the mtl will be set here\r\n     */\r\n    public materials: StandardMaterial[] = [];\r\n\r\n    /**\r\n     * This function will read the mtl file and create each material described inside\r\n     * This function could be improve by adding :\r\n     * -some component missing (Ni, Tf...)\r\n     * -including the specific options available\r\n     *\r\n     * @param scene defines the scene the material will be created in\r\n     * @param data defines the mtl data to parse\r\n     * @param rootUrl defines the rooturl to use in order to load relative dependencies\r\n     * @param assetContainer defines the asset container to store the material in (can be null)\r\n     */\r\n    public parseMTL(scene: Scene, data: string | ArrayBuffer, rootUrl: string, assetContainer: Nullable<AssetContainer>): void {\r\n        if (data instanceof ArrayBuffer) {\r\n            return;\r\n        }\r\n\r\n        //Split the lines from the file\r\n        const lines = data.split(\"\\n\");\r\n        // whitespace char ie: [ \\t\\r\\n\\f]\r\n        const delimiter_pattern = /\\s+/;\r\n        //Array with RGB colors\r\n        let color: number[];\r\n        //New material\r\n        let material: Nullable<StandardMaterial> = null;\r\n\r\n        //Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim();\r\n\r\n            // Blank line or comment\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            }\r\n\r\n            //Get the first parameter (keyword)\r\n            const pos = line.indexOf(\" \");\r\n            let key = pos >= 0 ? line.substring(0, pos) : line;\r\n            key = key.toLowerCase();\r\n\r\n            //Get the data following the key\r\n            const value: string = pos >= 0 ? line.substring(pos + 1).trim() : \"\";\r\n\r\n            //This mtl keyword will create the new material\r\n            if (key === \"newmtl\") {\r\n                //Check if it is the first material.\r\n                // Materials specifications are described after this keyword.\r\n                if (material) {\r\n                    //Add the previous material in the material array.\r\n                    this.materials.push(material);\r\n                }\r\n                //Create a new material.\r\n                // value is the name of the material read in the mtl file\r\n\r\n                scene._blockEntityCollection = !!assetContainer;\r\n                material = new StandardMaterial(value, scene);\r\n                material._parentContainer = assetContainer;\r\n                scene._blockEntityCollection = false;\r\n            } else if (key === \"kd\" && material) {\r\n                // Diffuse color (color under white light) using RGB values\r\n\r\n                //value  = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.diffuseColor = Color3.FromArray(color);\r\n            } else if (key === \"ka\" && material) {\r\n                // Ambient color (color under shadow) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.ambientColor = Color3.FromArray(color);\r\n            } else if (key === \"ks\" && material) {\r\n                // Specular color (color when light is reflected from shiny surface) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set the color into the material\r\n                material.specularColor = Color3.FromArray(color);\r\n            } else if (key === \"ke\" && material) {\r\n                // Emissive color using RGB values\r\n                color = value.split(delimiter_pattern, 3).map(parseFloat);\r\n                material.emissiveColor = Color3.FromArray(color);\r\n            } else if (key === \"ns\" && material) {\r\n                //value = \"Integer\"\r\n                material.specularPower = parseFloat(value);\r\n            } else if (key === \"d\" && material) {\r\n                //d is dissolve for current material. It mean alpha for BABYLON\r\n                material.alpha = parseFloat(value);\r\n\r\n                //Texture\r\n                //This part can be improved by adding the possible options of texture\r\n            } else if (key === \"map_ka\" && material) {\r\n                // ambient texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.ambientTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_kd\" && material) {\r\n                // Diffuse texture map with a loaded image\r\n                material.diffuseTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ks\" && material) {\r\n                // Specular texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.specularTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ns\") {\r\n                //Specular\r\n                //Specular highlight component\r\n                //We must first get the folder of the image\r\n                //\r\n                //Not supported by BABYLON\r\n                //\r\n                //    continue;\r\n            } else if (key === \"map_bump\" && material) {\r\n                //The bump texture\r\n                const values = value.split(delimiter_pattern);\r\n                const bumpMultiplierIndex = values.indexOf(\"-bm\");\r\n                let bumpMultiplier: Nullable<string> = null;\r\n\r\n                if (bumpMultiplierIndex >= 0) {\r\n                    bumpMultiplier = values[bumpMultiplierIndex + 1];\r\n                    values.splice(bumpMultiplierIndex, 2); // remove\r\n                }\r\n\r\n                material.bumpTexture = MTLFileLoader._GetTexture(rootUrl, values.join(\" \"), scene);\r\n                if (material.bumpTexture && bumpMultiplier !== null) {\r\n                    material.bumpTexture.level = parseFloat(bumpMultiplier);\r\n                }\r\n            } else if (key === \"map_d\" && material) {\r\n                // The dissolve of the material\r\n                material.opacityTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n\r\n                //Options for illumination\r\n            } else if (key === \"illum\") {\r\n                //Illumination\r\n                if (value === \"0\") {\r\n                    //That mean Kd == Kd\r\n                } else if (value === \"1\") {\r\n                    //Color on and Ambient on\r\n                } else if (value === \"2\") {\r\n                    //Highlight on\r\n                } else if (value === \"3\") {\r\n                    //Reflection on and Ray trace on\r\n                } else if (value === \"4\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace on\r\n                } else if (value === \"5\") {\r\n                    //Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"6\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel off and Ray trace on\r\n                } else if (value === \"7\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"8\") {\r\n                    //Reflection on and Ray trace off\r\n                } else if (value === \"9\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace off\r\n                } else if (value === \"10\") {\r\n                    //Casts shadows onto invisible surfaces\r\n                }\r\n            } else {\r\n                // console.log(\"Unhandled expression at line : \" + i +'\\n' + \"with value : \" + line);\r\n            }\r\n        }\r\n        //At the end of the file, add the last material\r\n        if (material) {\r\n            this.materials.push(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture for the material.\r\n     *\r\n     * If the material is imported from input file,\r\n     * We sanitize the url to ensure it takes the texture from aside the material.\r\n     *\r\n     * @param rootUrl The root url to load from\r\n     * @param value The value stored in the mtl\r\n     * @param scene\r\n     * @returns The Texture\r\n     */\r\n    private static _GetTexture(rootUrl: string, value: string, scene: Scene): Nullable<Texture> {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n\r\n        let url = rootUrl;\r\n        // Load from input file.\r\n        if (rootUrl === \"file:\") {\r\n            let lastDelimiter = value.lastIndexOf(\"\\\\\");\r\n            if (lastDelimiter === -1) {\r\n                lastDelimiter = value.lastIndexOf(\"/\");\r\n            }\r\n\r\n            if (lastDelimiter > -1) {\r\n                url += value.substring(lastDelimiter + 1);\r\n            } else {\r\n                url += value;\r\n            }\r\n        }\r\n        // Not from input file.\r\n        else {\r\n            url += value;\r\n        }\r\n\r\n        return new Texture(url, scene, false, MTLFileLoader.INVERT_TEXTURE_Y);\r\n    }\r\n}\r\n","import type { AssetContainer } from \"core/assetContainer\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ntype MeshObject = {\r\n    name: string;\r\n    indices: Nullable<Array<number>>;\r\n    positions: Nullable<Array<number>>;\r\n    normals: Nullable<Array<number>>;\r\n    colors: Nullable<Array<number>>;\r\n    uvs: Nullable<Array<number>>;\r\n    materialName: string;\r\n    directMaterial?: Nullable<Material>;\r\n    isObject: boolean; // If the entity is defined as an object (\"o\"), or group (\"g\")\r\n    _babylonMesh?: AbstractMesh; // The corresponding Babylon mesh\r\n    hasLines?: boolean; // If the mesh has lines\r\n};\r\n\r\n/**\r\n * Class used to load mesh data from OBJ content\r\n */\r\nexport class SolidParser {\r\n    // Descriptor\r\n    /** Object descriptor */\r\n    public static ObjectDescriptor = /^o/;\r\n    /** Group descriptor */\r\n    public static GroupDescriptor = /^g/;\r\n    /** Material lib descriptor */\r\n    public static MtlLibGroupDescriptor = /^mtllib /;\r\n    /** Use a material descriptor */\r\n    public static UseMtlDescriptor = /^usemtl /;\r\n    /** Smooth descriptor */\r\n    public static SmoothDescriptor = /^s /;\r\n\r\n    // Patterns\r\n    /** Pattern used to detect a vertex */\r\n    public static VertexPattern = /^v(\\s+[\\d|.|+|\\-|e|E]+){3,7}/;\r\n    /** Pattern used to detect a normal */\r\n    public static NormalPattern = /^vn(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a UV set */\r\n    public static UVPattern = /^vt(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a first kind of face (f vertex vertex vertex) */\r\n    public static FacePattern1 = /^f\\s+(([\\d]{1,}[\\s]?){3,})+/;\r\n    /** Pattern used to detect a second kind of face (f vertex/uvs vertex/uvs vertex/uvs) */\r\n    public static FacePattern2 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a third kind of face (f vertex/uvs/normal vertex/uvs/normal vertex/uvs/normal) */\r\n    public static FacePattern3 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fourth kind of face (f vertex//normal vertex//normal vertex//normal)*/\r\n    public static FacePattern4 = /^f\\s+((([\\d]{1,}\\/\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fifth kind of face (f -vertex/-uvs/-normal -vertex/-uvs/-normal -vertex/-uvs/-normal) */\r\n    public static FacePattern5 = /^f\\s+(((-[\\d]{1,}\\/-[\\d]{1,}\\/-[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a line(l vertex vertex) */\r\n    public static LinePattern1 = /^l\\s+(([\\d]{1,}[\\s]?){2,})+/;\r\n    /** Pattern used to detect a second kind of line (l vertex/uvs vertex/uvs) */\r\n    public static LinePattern2 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n    /** Pattern used to detect a third kind of line (l vertex/uvs/normal vertex/uvs/normal) */\r\n    public static LinePattern3 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n    private _positions: Array<Vector3> = []; //values for the positions of vertices\r\n    private _normals: Array<Vector3> = []; //Values for the normals\r\n    private _uvs: Array<Vector2> = []; //Values for the textures\r\n    private _colors: Array<Color4> = [];\r\n    private _extColors: Array<Color4> = []; //Extension color\r\n    private _meshesFromObj: Array<MeshObject> = []; //[mesh] Contains all the obj meshes\r\n    private _handledMesh: MeshObject; //The current mesh of meshes array\r\n    private _indicesForBabylon: Array<number> = []; //The list of indices for VertexData\r\n    private _wrappedPositionForBabylon: Array<Vector3> = []; //The list of position in vectors\r\n    private _wrappedUvsForBabylon: Array<Vector2> = []; //Array with all value of uvs to match with the indices\r\n    private _wrappedColorsForBabylon: Array<Color4> = []; // Array with all color values to match with the indices\r\n    private _wrappedNormalsForBabylon: Array<Vector3> = []; //Array with all value of normals to match with the indices\r\n    private _tuplePosNorm: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }> = []; //Create a tuple with indice of Position, Normal, UV  [pos, norm, uvs]\r\n    private _curPositionInIndices = 0;\r\n    private _hasMeshes: Boolean = false; //Meshes are defined in the file\r\n    private _unwrappedPositionsForBabylon: Array<number> = []; //Value of positionForBabylon w/o Vector3() [x,y,z]\r\n    private _unwrappedColorsForBabylon: Array<number> = []; // Value of colorForBabylon w/o Color4() [r,g,b,a]\r\n    private _unwrappedNormalsForBabylon: Array<number> = []; //Value of normalsForBabylon w/o Vector3()  [x,y,z]\r\n    private _unwrappedUVForBabylon: Array<number> = []; //Value of uvsForBabylon w/o Vector3()      [x,y,z]\r\n    private _triangles: Array<string> = []; //Indices from new triangles coming from polygons\r\n    private _materialNameFromObj: string = \"\"; //The name of the current material\r\n    private _objMeshName: string = \"\"; //The name of the current obj mesh\r\n    private _increment: number = 1; //Id for meshes created by the multimaterial\r\n    private _isFirstMaterial: boolean = true;\r\n    private _grayColor = new Color4(0.5, 0.5, 0.5, 1);\r\n    private _materialToUse: string[];\r\n    private _babylonMeshesArray: Array<Mesh>;\r\n    private _pushTriangle: (faces: Array<string>, faceIndex: number) => void;\r\n    private _handednessSign: number;\r\n    private _hasLineData: boolean = false; //If this mesh has line segment(l) data\r\n\r\n    /**\r\n     * Creates a new SolidParser\r\n     * @param materialToUse defines the array to fill with the list of materials to use (it will be filled by the parse function)\r\n     * @param babylonMeshesArray defines the array to fill with the list of loaded meshes (it will be filled by the parse function)\r\n     * @param loadingOptions defines the loading options to use\r\n     */\r\n    public constructor(materialToUse: string[], babylonMeshesArray: Array<Mesh>, loadingOptions: OBJLoadingOptions) {\r\n        this._materialToUse = materialToUse;\r\n        this._babylonMeshesArray = babylonMeshesArray;\r\n        this._loadingOptions = loadingOptions;\r\n    }\r\n\r\n    /**\r\n     * Search for obj in the given array.\r\n     * This function is called to check if a couple of data already exists in an array.\r\n     *\r\n     * If found, returns the index of the founded tuple index. Returns -1 if not found\r\n     * @param arr Array<{ normals: Array<number>, idx: Array<number> }>\r\n     * @param obj Array<number>\r\n     * @returns {boolean}\r\n     */\r\n    private _isInArray(arr: Array<{ normals: Array<number>; idx: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        return idx === -1 ? -1 : arr[obj[0]].idx[idx];\r\n    }\r\n\r\n    private _isInArrayUV(arr: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [], uv: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        if (idx != 1 && obj[2] === arr[obj[0]].uv[idx]) {\r\n            return arr[obj[0]].idx[idx];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * This function set the data for each triangle.\r\n     * Data are position, normals and uvs\r\n     * If a tuple of (position, normal) is not set, add the data into the corresponding array\r\n     * If the tuple already exist, add only their indice\r\n     *\r\n     * @param indicePositionFromObj Integer The index in positions array\r\n     * @param indiceUvsFromObj Integer The index in uvs array\r\n     * @param indiceNormalFromObj Integer The index in normals array\r\n     * @param positionVectorFromOBJ Vector3 The value of position at index objIndice\r\n     * @param textureVectorFromOBJ Vector3 The value of uvs\r\n     * @param normalsVectorFromOBJ Vector3 The value of normals at index objNormale\r\n     * @param positionColorsFromOBJ\r\n     */\r\n    private _setData(\r\n        indicePositionFromObj: number,\r\n        indiceUvsFromObj: number,\r\n        indiceNormalFromObj: number,\r\n        positionVectorFromOBJ: Vector3,\r\n        textureVectorFromOBJ: Vector2,\r\n        normalsVectorFromOBJ: Vector3,\r\n        positionColorsFromOBJ?: Color4\r\n    ) {\r\n        //Check if this tuple already exists in the list of tuples\r\n        let _index: number;\r\n        if (this._loadingOptions.optimizeWithUV) {\r\n            _index = this._isInArrayUV(this._tuplePosNorm, [indicePositionFromObj, indiceNormalFromObj, indiceUvsFromObj]);\r\n        } else {\r\n            _index = this._isInArray(this._tuplePosNorm, [indicePositionFromObj, indiceNormalFromObj]);\r\n        }\r\n\r\n        //If it not exists\r\n        if (_index === -1) {\r\n            //Add an new indice.\r\n            //The array of indices is only an array with his length equal to the number of triangles - 1.\r\n            //We add vertices data in this order\r\n            this._indicesForBabylon.push(this._wrappedPositionForBabylon.length);\r\n            //Push the position of vertice for Babylon\r\n            //Each element is a Vector3(x,y,z)\r\n            this._wrappedPositionForBabylon.push(positionVectorFromOBJ);\r\n            //Push the uvs for Babylon\r\n            //Each element is a Vector2(u,v)\r\n            //If the UVs are missing, set (u,v)=(0,0)\r\n            textureVectorFromOBJ = textureVectorFromOBJ ?? new Vector2(0, 0);\r\n            this._wrappedUvsForBabylon.push(textureVectorFromOBJ);\r\n            //Push the normals for Babylon\r\n            //Each element is a Vector3(x,y,z)\r\n            this._wrappedNormalsForBabylon.push(normalsVectorFromOBJ);\r\n\r\n            if (positionColorsFromOBJ !== undefined) {\r\n                //Push the colors for Babylon\r\n                //Each element is a BABYLON.Color4(r,g,b,a)\r\n                this._wrappedColorsForBabylon.push(positionColorsFromOBJ);\r\n            }\r\n\r\n            //Add the tuple in the comparison list\r\n            this._tuplePosNorm[indicePositionFromObj].normals.push(indiceNormalFromObj);\r\n            this._tuplePosNorm[indicePositionFromObj].idx.push(this._curPositionInIndices++);\r\n            if (this._loadingOptions.optimizeWithUV) {\r\n                this._tuplePosNorm[indicePositionFromObj].uv.push(indiceUvsFromObj);\r\n            }\r\n        } else {\r\n            //The tuple already exists\r\n            //Add the index of the already existing tuple\r\n            //At this index we can get the value of position, normal, color and uvs of vertex\r\n            this._indicesForBabylon.push(_index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform Vector() and BABYLON.Color() objects into numbers in an array\r\n     */\r\n    private _unwrapData() {\r\n        try {\r\n            //Every array has the same length\r\n            for (let l = 0; l < this._wrappedPositionForBabylon.length; l++) {\r\n                //Push the x, y, z values of each element in the unwrapped array\r\n                this._unwrappedPositionsForBabylon.push(\r\n                    this._wrappedPositionForBabylon[l].x * this._handednessSign,\r\n                    this._wrappedPositionForBabylon[l].y,\r\n                    this._wrappedPositionForBabylon[l].z\r\n                );\r\n                this._unwrappedNormalsForBabylon.push(\r\n                    this._wrappedNormalsForBabylon[l].x * this._handednessSign,\r\n                    this._wrappedNormalsForBabylon[l].y,\r\n                    this._wrappedNormalsForBabylon[l].z\r\n                );\r\n\r\n                this._unwrappedUVForBabylon.push(this._wrappedUvsForBabylon[l].x, this._wrappedUvsForBabylon[l].y); //z is an optional value not supported by BABYLON\r\n                if (this._loadingOptions.importVertexColors) {\r\n                    //Push the r, g, b, a values of each element in the unwrapped array\r\n                    this._unwrappedColorsForBabylon.push(\r\n                        this._wrappedColorsForBabylon[l].r,\r\n                        this._wrappedColorsForBabylon[l].g,\r\n                        this._wrappedColorsForBabylon[l].b,\r\n                        this._wrappedColorsForBabylon[l].a\r\n                    );\r\n                }\r\n            }\r\n            // Reset arrays for the next new meshes\r\n            this._wrappedPositionForBabylon.length = 0;\r\n            this._wrappedNormalsForBabylon.length = 0;\r\n            this._wrappedUvsForBabylon.length = 0;\r\n            this._wrappedColorsForBabylon.length = 0;\r\n            this._tuplePosNorm.length = 0;\r\n            this._curPositionInIndices = 0;\r\n        } catch (e) {\r\n            throw new Error(\"Unable to unwrap data while parsing OBJ data.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create triangles from polygons\r\n     * It is important to notice that a triangle is a polygon\r\n     * We get 5 patterns of face defined in OBJ File :\r\n     * facePattern1 = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]\r\n     * facePattern2 = [\"1/1\",\"2/2\",\"3/3\",\"4/4\",\"5/5\",\"6/6\"]\r\n     * facePattern3 = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"4/4/4\",\"5/5/5\",\"6/6/6\"]\r\n     * facePattern4 = [\"1//1\",\"2//2\",\"3//3\",\"4//4\",\"5//5\",\"6//6\"]\r\n     * facePattern5 = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-4/-4/-4\",\"-5/-5/-5\",\"-6/-6/-6\"]\r\n     * Each pattern is divided by the same method\r\n     * @param faces Array[String] The indices of elements\r\n     * @param v Integer The variable to increment\r\n     */\r\n    private _getTriangles(faces: Array<string>, v: number) {\r\n        //Work for each element of the array\r\n        for (let faceIndex = v; faceIndex < faces.length - 1; faceIndex++) {\r\n            //Add on the triangle variable the indexes to obtain triangles\r\n            this._pushTriangle(faces, faceIndex);\r\n        }\r\n\r\n        //Result obtained after 2 iterations:\r\n        //Pattern1 => triangle = [\"1\",\"2\",\"3\",\"1\",\"3\",\"4\"];\r\n        //Pattern2 => triangle = [\"1/1\",\"2/2\",\"3/3\",\"1/1\",\"3/3\",\"4/4\"];\r\n        //Pattern3 => triangle = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"1/1/1\",\"3/3/3\",\"4/4/4\"];\r\n        //Pattern4 => triangle = [\"1//1\",\"2//2\",\"3//3\",\"1//1\",\"3//3\",\"4//4\"];\r\n        //Pattern5 => triangle = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-1/-1/-1\",\"-3/-3/-3\",\"-4/-4/-4\"];\r\n    }\r\n\r\n    /**\r\n     * To get color between color and extension color\r\n     * @param index Integer The index of the element in the array\r\n     * @returns value of target color\r\n     */\r\n    private _getColor(index: number) {\r\n        if (this._loadingOptions.importVertexColors) {\r\n            return this._extColors[index] ?? this._colors[index];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 1\r\n     * In this pattern we get vertice positions\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern1(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        //For each element in the triangles array.\r\n        //This var could contains 1 to an infinity of triangles\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(this._triangles[k]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                0,\r\n                0, // In the pattern 1, normals and uvs are not defined\r\n                this._positions[indicePositionFromObj], // Get the vectors data\r\n                Vector2.Zero(),\r\n                Vector3.Up(), // Create default vectors\r\n                this._getColor(indicePositionFromObj)\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 2\r\n     * In this pattern we get vertice positions and uvs\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern2(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1\"\r\n            //Split the data for getting position and uv\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\"]\r\n            //Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            //Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                0, //Default value for normals\r\n                this._positions[indicePositionFromObj], //Get the values for each element\r\n                this._uvs[indiceUvsFromObj] ?? Vector2.Zero(),\r\n                Vector3.Up(), //Default value for normals\r\n                this._getColor(indicePositionFromObj)\r\n            );\r\n        }\r\n\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern3(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1/1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\", \"1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            // Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n            // Set normal indice\r\n            const indiceNormalFromObj = parseInt(point[2]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj],\r\n                this._uvs[indiceUvsFromObj] ?? Vector2.Zero(),\r\n                this._normals[indiceNormalFromObj] ?? Vector3.Up() //Set the vector for each component\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 4\r\n     * In this pattern we get vertice positions and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern4(face: Array<string>, v: number) {\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1//1\"\r\n            //Split the data for getting position and normals\r\n            const point = this._triangles[k].split(\"//\"); // [\"1\", \"1\"]\r\n            // We check indices, and normals\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            const indiceNormalFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                1, //Default value for uv\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj], //Get each vector of data\r\n                Vector2.Zero(),\r\n                this._normals[indiceNormalFromObj],\r\n                this._getColor(indicePositionFromObj)\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /*\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern5(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"-1/-1/-1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"-1\", \"-1\", \"-1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = this._positions.length + parseInt(point[0]);\r\n            // Set uv indice\r\n            const indiceUvsFromObj = this._uvs.length + parseInt(point[1]);\r\n            // Set normal indice\r\n            const indiceNormalFromObj = this._normals.length + parseInt(point[2]);\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj],\r\n                this._uvs[indiceUvsFromObj],\r\n                this._normals[indiceNormalFromObj], //Set the vector for each component\r\n                this._getColor(indicePositionFromObj)\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    private _addPreviousObjMesh() {\r\n        //Check if it is not the first mesh. Otherwise we don't have data.\r\n        if (this._meshesFromObj.length > 0) {\r\n            //Get the previous mesh for applying the data about the faces\r\n            //=> in obj file, faces definition append after the name of the mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            //Set the data into Array for the mesh\r\n            this._unwrapData();\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                // Reverse tab. Otherwise face are displayed in the wrong sens\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Set the information for the mesh\r\n            //Slice the array to avoid rewriting because of the fact this is the same var which be rewrited\r\n            this._handledMesh.indices = this._indicesForBabylon.slice();\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon.slice();\r\n            this._handledMesh.normals = this._unwrappedNormalsForBabylon.slice();\r\n            this._handledMesh.uvs = this._unwrappedUVForBabylon.slice();\r\n            this._handledMesh.hasLines = this._hasLineData;\r\n\r\n            if (this._loadingOptions.importVertexColors) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon.slice();\r\n            }\r\n\r\n            //Reset the array for the next mesh\r\n            this._indicesForBabylon.length = 0;\r\n            this._unwrappedPositionsForBabylon.length = 0;\r\n            this._unwrappedColorsForBabylon.length = 0;\r\n            this._unwrappedNormalsForBabylon.length = 0;\r\n            this._unwrappedUVForBabylon.length = 0;\r\n            this._hasLineData = false;\r\n        }\r\n    }\r\n\r\n    private _optimizeNormals(mesh: AbstractMesh): void {\r\n        const positions = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const normals = mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const mapVertices: { [key: string]: number[] } = {};\r\n\r\n        if (!positions || !normals) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < positions.length / 3; i++) {\r\n            const x = positions[i * 3 + 0];\r\n            const y = positions[i * 3 + 1];\r\n            const z = positions[i * 3 + 2];\r\n            const key = x + \"_\" + y + \"_\" + z;\r\n\r\n            let lst = mapVertices[key];\r\n            if (!lst) {\r\n                lst = [];\r\n                mapVertices[key] = lst;\r\n            }\r\n            lst.push(i);\r\n        }\r\n\r\n        const normal = new Vector3();\r\n        for (const key in mapVertices) {\r\n            const lst = mapVertices[key];\r\n            if (lst.length < 2) {\r\n                continue;\r\n            }\r\n\r\n            const v0Idx = lst[0];\r\n            for (let i = 1; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[v0Idx * 3 + 0] += normals[vIdx * 3 + 0];\r\n                normals[v0Idx * 3 + 1] += normals[vIdx * 3 + 1];\r\n                normals[v0Idx * 3 + 2] += normals[vIdx * 3 + 2];\r\n            }\r\n\r\n            normal.copyFromFloats(normals[v0Idx * 3 + 0], normals[v0Idx * 3 + 1], normals[v0Idx * 3 + 2]);\r\n            normal.normalize();\r\n\r\n            for (let i = 0; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[vIdx * 3 + 0] = normal.x;\r\n                normals[vIdx * 3 + 1] = normal.y;\r\n                normals[vIdx * 3 + 2] = normal.z;\r\n            }\r\n        }\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n    }\r\n\r\n    private static _IsLineElement(line: string) {\r\n        return line.startsWith(\"l\");\r\n    }\r\n\r\n    private static _IsObjectElement(line: string) {\r\n        return line.startsWith(\"o\");\r\n    }\r\n\r\n    private static _IsGroupElement(line: string) {\r\n        return line.startsWith(\"g\");\r\n    }\r\n\r\n    private static _GetZbrushMRGB(line: string, notParse: boolean) {\r\n        if (!line.startsWith(\"mrgb\")) return null;\r\n        line = line.replace(\"mrgb\", \"\").trim();\r\n        // if include vertex color , not load mrgb anymore\r\n        if (notParse) return [];\r\n        const regex = /[a-z0-9]/g;\r\n        const regArray = line.match(regex);\r\n        if (!regArray || regArray.length % 8 !== 0) {\r\n            return [];\r\n        }\r\n        const array: Color4[] = [];\r\n        for (let regIndex = 0; regIndex < regArray.length / 8; regIndex++) {\r\n            //each item is MMRRGGBB, m is material index\r\n            // const m = regArray[regIndex * 8 + 0] + regArray[regIndex * 8 + 1];\r\n            const r = regArray[regIndex * 8 + 2] + regArray[regIndex * 8 + 3];\r\n            const g = regArray[regIndex * 8 + 4] + regArray[regIndex * 8 + 5];\r\n            const b = regArray[regIndex * 8 + 6] + regArray[regIndex * 8 + 7];\r\n            array.push(new Color4(parseInt(r, 16) / 255, parseInt(g, 16) / 255, parseInt(b, 16) / 255, 1));\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Function used to parse an OBJ string\r\n     * @param meshesNames defines the list of meshes to load (all if not defined)\r\n     * @param data defines the OBJ string\r\n     * @param scene defines the hosting scene\r\n     * @param assetContainer defines the asset container to load data in\r\n     * @param onFileToLoadFound defines a callback that will be called if a MTL file is found\r\n     */\r\n    public parse(meshesNames: any, data: string, scene: Scene, assetContainer: Nullable<AssetContainer>, onFileToLoadFound: (fileToLoad: string) => void): void {\r\n        //Move Santitize here to forbid delete zbrush data\r\n        // Sanitize data\r\n        data = data.replace(/#MRGB/g, \"mrgb\");\r\n        data = data.replace(/#.*$/gm, \"\").trim();\r\n        if (this._loadingOptions.useLegacyBehavior) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = 1;\r\n        } else if (scene.useRightHandedSystem) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex + 1], faces[faceIndex]);\r\n            this._handednessSign = 1;\r\n        } else {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = -1;\r\n        }\r\n\r\n        // Split the file into lines\r\n        // Preprocess line data\r\n        const linesOBJ = data.split(\"\\n\");\r\n        const lineLines: string[][] = [];\r\n        let currentGroup: string[] = [];\r\n\r\n        lineLines.push(currentGroup);\r\n\r\n        for (let i = 0; i < linesOBJ.length; i++) {\r\n            const line = linesOBJ[i].trim().replace(/\\s\\s/g, \" \");\r\n\r\n            // Comment or newLine\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            }\r\n\r\n            if (SolidParser._IsGroupElement(line) || SolidParser._IsObjectElement(line)) {\r\n                currentGroup = [];\r\n                lineLines.push(currentGroup);\r\n            }\r\n\r\n            if (SolidParser._IsLineElement(line)) {\r\n                const lineValues = line.split(\" \");\r\n                // create line elements with two vertices only\r\n                for (let i = 1; i < lineValues.length - 1; i++) {\r\n                    currentGroup.push(`l ${lineValues[i]} ${lineValues[i + 1]}`);\r\n                }\r\n            } else {\r\n                currentGroup.push(line);\r\n            }\r\n        }\r\n\r\n        const lines = lineLines.flat();\r\n        // Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim().replace(/\\s\\s/g, \" \");\r\n            let result;\r\n            // Comment or newLine\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            } else if (SolidParser.VertexPattern.test(line)) {\r\n                //Get information about one position possible for the vertices\r\n                result = line.match(/[^ ]+/g)!; // match will return non-null due to passing regex pattern\r\n\r\n                // Value of result with line: \"v 1.0 2.0 3.0\"\r\n                // [\"v\", \"1.0\", \"2.0\", \"3.0\"]\r\n                // Create a Vector3 with the position x, y, z\r\n                this._positions.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n\r\n                if (this._loadingOptions.importVertexColors) {\r\n                    if (result.length >= 7) {\r\n                        const r = parseFloat(result[4]);\r\n                        const g = parseFloat(result[5]);\r\n                        const b = parseFloat(result[6]);\r\n\r\n                        this._colors.push(\r\n                            new Color4(r > 1 ? r / 255 : r, g > 1 ? g / 255 : g, b > 1 ? b / 255 : b, result.length === 7 || result[7] === undefined ? 1 : parseFloat(result[7]))\r\n                        );\r\n                    } else {\r\n                        // TODO: maybe push NULL and if all are NULL to skip (and remove grayColor var).\r\n                        this._colors.push(this._grayColor);\r\n                    }\r\n                }\r\n            } else if ((result = SolidParser.NormalPattern.exec(line)) !== null) {\r\n                //Create a Vector3 with the normals x, y, z\r\n                //Value of result\r\n                // [\"vn 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\r\n                //Add the Vector in the list of normals\r\n                this._normals.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n            } else if ((result = SolidParser.UVPattern.exec(line)) !== null) {\r\n                //Create a Vector2 with the normals u, v\r\n                //Value of result\r\n                // [\"vt 0.1 0.2 0.3\", \"0.1\", \"0.2\"]\r\n                //Add the Vector in the list of uvs\r\n                this._uvs.push(new Vector2(parseFloat(result[1]) * this._loadingOptions.UVScaling.x, parseFloat(result[2]) * this._loadingOptions.UVScaling.y));\r\n\r\n                //Identify patterns of faces\r\n                //Face could be defined in different type of pattern\r\n            } else if ((result = SolidParser.FacePattern3.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1/1 2/2/2 3/3/3\", \"1/1/1 2/2/2 3/3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\", \"3/3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern4.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1//1 2//2 3//3\", \"1//1 2//2 3//3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern4(\r\n                    result[1].trim().split(\" \"), // [\"1//1\", \"2//2\", \"3//3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern5.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f -1/-1/-1 -2/-2/-2 -3/-3/-3\", \"-1/-1/-1 -2/-2/-2 -3/-3/-3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern5(\r\n                    result[1].trim().split(\" \"), // [\"-1/-1/-1\", \"-2/-2/-2\", \"-3/-3/-3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern2.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1 2/2 3/3\", \"1/1 2/2 3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\", \"3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"f 1 2 3\", \"1 2 3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\", \"3\"]\r\n                    1\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1 2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern2.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1 2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser._GetZbrushMRGB(line, !this._loadingOptions.importVertexColors))) {\r\n                result.forEach((element) => {\r\n                    this._extColors.push(element);\r\n                });\r\n            } else if ((result = SolidParser.LinePattern3.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1/1 2/2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if (SolidParser.GroupDescriptor.test(line) || SolidParser.ObjectDescriptor.test(line)) {\r\n                // Create a new mesh corresponding to the name of the group.\r\n                // Definition of the mesh\r\n                const objMesh: MeshObject = {\r\n                    name: line.substring(2).trim(), //Set the name of the current obj mesh\r\n                    indices: null,\r\n                    positions: null,\r\n                    normals: null,\r\n                    uvs: null,\r\n                    colors: null,\r\n                    materialName: this._materialNameFromObj,\r\n                    isObject: SolidParser.ObjectDescriptor.test(line),\r\n                };\r\n                this._addPreviousObjMesh();\r\n\r\n                //Push the last mesh created with only the name\r\n                this._meshesFromObj.push(objMesh);\r\n\r\n                //Set this variable to indicate that now meshesFromObj has objects defined inside\r\n                this._hasMeshes = true;\r\n                this._isFirstMaterial = true;\r\n                this._increment = 1;\r\n                //Keyword for applying a material\r\n            } else if (SolidParser.UseMtlDescriptor.test(line)) {\r\n                //Get the name of the material\r\n                this._materialNameFromObj = line.substring(7).trim();\r\n\r\n                //If this new material is in the same mesh\r\n\r\n                if (!this._isFirstMaterial || !this._hasMeshes) {\r\n                    //Set the data for the previous mesh\r\n                    this._addPreviousObjMesh();\r\n                    //Create a new mesh\r\n                    const objMesh: MeshObject =\r\n                        //Set the name of the current obj mesh\r\n                        {\r\n                            name: (this._objMeshName || \"mesh\") + \"_mm\" + this._increment.toString(), //Set the name of the current obj mesh\r\n                            indices: null,\r\n                            positions: null,\r\n                            normals: null,\r\n                            uvs: null,\r\n                            colors: null,\r\n                            materialName: this._materialNameFromObj,\r\n                            isObject: false,\r\n                        };\r\n                    this._increment++;\r\n                    //If meshes are already defined\r\n                    this._meshesFromObj.push(objMesh);\r\n                    this._hasMeshes = true;\r\n                }\r\n                //Set the material name if the previous line define a mesh\r\n\r\n                if (this._hasMeshes && this._isFirstMaterial) {\r\n                    //Set the material name to the previous mesh (1 material per mesh)\r\n                    this._meshesFromObj[this._meshesFromObj.length - 1].materialName = this._materialNameFromObj;\r\n                    this._isFirstMaterial = false;\r\n                }\r\n                // Keyword for loading the mtl file\r\n            } else if (SolidParser.MtlLibGroupDescriptor.test(line)) {\r\n                // Get the name of mtl file\r\n                onFileToLoadFound(line.substring(7).trim());\r\n\r\n                // Apply smoothing\r\n            } else if (SolidParser.SmoothDescriptor.test(line)) {\r\n                // smooth shading => apply smoothing\r\n                // Today I don't know it work with babylon and with obj.\r\n                // With the obj file  an integer is set\r\n            } else {\r\n                //If there is another possibility\r\n                Logger.Log(\"Unhandled expression at line : \" + line);\r\n            }\r\n        }\r\n        // At the end of the file, add the last mesh into the meshesFromObj array\r\n        if (this._hasMeshes) {\r\n            // Set the data for the last mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                //Reverse indices for displaying faces in the good sense\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Get the good array\r\n            this._unwrapData();\r\n            //Set array\r\n            this._handledMesh.indices = this._indicesForBabylon;\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon;\r\n            this._handledMesh.normals = this._unwrappedNormalsForBabylon;\r\n            this._handledMesh.uvs = this._unwrappedUVForBabylon;\r\n            this._handledMesh.hasLines = this._hasLineData;\r\n            if (this._loadingOptions.importVertexColors) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon;\r\n            }\r\n        }\r\n\r\n        // If any o or g keyword not found, create a mesh with a random id\r\n        if (!this._hasMeshes) {\r\n            let newMaterial: Nullable<StandardMaterial> = null;\r\n            if (this._indicesForBabylon.length) {\r\n                if (this._loadingOptions.useLegacyBehavior) {\r\n                    // reverse tab of indices\r\n                    this._indicesForBabylon.reverse();\r\n                }\r\n\r\n                //Get positions normals uvs\r\n                this._unwrapData();\r\n            } else {\r\n                // There is no indices in the file. We will have to switch to point cloud rendering\r\n                for (const pos of this._positions) {\r\n                    this._unwrappedPositionsForBabylon.push(pos.x, pos.y, pos.z);\r\n                }\r\n\r\n                if (this._normals.length) {\r\n                    for (const normal of this._normals) {\r\n                        this._unwrappedNormalsForBabylon.push(normal.x, normal.y, normal.z);\r\n                    }\r\n                }\r\n\r\n                if (this._uvs.length) {\r\n                    for (const uv of this._uvs) {\r\n                        this._unwrappedUVForBabylon.push(uv.x, uv.y);\r\n                    }\r\n                }\r\n\r\n                if (this._extColors.length) {\r\n                    for (const color of this._extColors) {\r\n                        this._unwrappedColorsForBabylon.push(color.r, color.g, color.b, color.a);\r\n                    }\r\n                } else {\r\n                    if (this._colors.length) {\r\n                        for (const color of this._colors) {\r\n                            this._unwrappedColorsForBabylon.push(color.r, color.g, color.b, color.a);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!this._materialNameFromObj) {\r\n                    // Create a material with point cloud on\r\n                    newMaterial = new StandardMaterial(Geometry.RandomId(), scene);\r\n\r\n                    newMaterial.pointsCloud = true;\r\n\r\n                    this._materialNameFromObj = newMaterial.name;\r\n\r\n                    if (!this._normals.length) {\r\n                        newMaterial.disableLighting = true;\r\n                        newMaterial.emissiveColor = Color3.White();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Set data for one mesh\r\n            this._meshesFromObj.push({\r\n                name: Geometry.RandomId(),\r\n                indices: this._indicesForBabylon,\r\n                positions: this._unwrappedPositionsForBabylon,\r\n                colors: this._unwrappedColorsForBabylon,\r\n                normals: this._unwrappedNormalsForBabylon,\r\n                uvs: this._unwrappedUVForBabylon,\r\n                materialName: this._materialNameFromObj,\r\n                directMaterial: newMaterial,\r\n                isObject: true,\r\n                hasLines: this._hasLineData,\r\n            });\r\n        }\r\n\r\n        //Set data for each mesh\r\n        for (let j = 0; j < this._meshesFromObj.length; j++) {\r\n            //check meshesNames (stlFileLoader)\r\n            if (meshesNames && this._meshesFromObj[j].name) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (meshesNames.indexOf(this._meshesFromObj[j].name) === -1) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (this._meshesFromObj[j].name !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Get the current mesh\r\n            //Set the data with VertexBuffer for each mesh\r\n            this._handledMesh = this._meshesFromObj[j];\r\n            //Create a Mesh with the name of the obj mesh\r\n\r\n            scene._blockEntityCollection = !!assetContainer;\r\n            const babylonMesh = new Mesh(this._meshesFromObj[j].name, scene);\r\n            babylonMesh._parentContainer = assetContainer;\r\n            scene._blockEntityCollection = false;\r\n            this._handledMesh._babylonMesh = babylonMesh;\r\n            // If this is a group mesh, it should have an object mesh as a parent. So look for the first object mesh that appears before it.\r\n            if (!this._handledMesh.isObject) {\r\n                for (let k = j - 1; k >= 0; --k) {\r\n                    if (this._meshesFromObj[k].isObject && this._meshesFromObj[k]._babylonMesh) {\r\n                        babylonMesh.parent = this._meshesFromObj[k]._babylonMesh!;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Push the name of the material to an array\r\n            //This is indispensable for the importMesh function\r\n            this._materialToUse.push(this._meshesFromObj[j].materialName);\r\n            //If the mesh is a line mesh\r\n            if (this._handledMesh.hasLines) {\r\n                babylonMesh._internalMetadata ??= {};\r\n                babylonMesh._internalMetadata[\"_isLine\"] = true; //this is a line mesh\r\n            }\r\n\r\n            if (this._handledMesh.positions?.length === 0) {\r\n                //Push the mesh into an array\r\n                this._babylonMeshesArray.push(babylonMesh);\r\n                continue;\r\n            }\r\n\r\n            const vertexData: VertexData = new VertexData(); //The container for the values\r\n            //Set the data for the babylonMesh\r\n            vertexData.uvs = this._handledMesh.uvs;\r\n            vertexData.indices = this._handledMesh.indices;\r\n            vertexData.positions = this._handledMesh.positions;\r\n            if (this._loadingOptions.computeNormals) {\r\n                const normals: Array<number> = new Array<number>();\r\n                VertexData.ComputeNormals(this._handledMesh.positions, this._handledMesh.indices, normals);\r\n                vertexData.normals = normals;\r\n            } else {\r\n                vertexData.normals = this._handledMesh.normals;\r\n            }\r\n            if (this._loadingOptions.importVertexColors) {\r\n                vertexData.colors = this._handledMesh.colors;\r\n            }\r\n            //Set the data from the VertexBuffer to the current Mesh\r\n            vertexData.applyToMesh(babylonMesh);\r\n            if (this._loadingOptions.invertY) {\r\n                babylonMesh.scaling.y *= -1;\r\n            }\r\n            if (this._loadingOptions.optimizeNormals) {\r\n                this._optimizeNormals(babylonMesh);\r\n            }\r\n\r\n            //Push the mesh into an array\r\n            this._babylonMeshesArray.push(babylonMesh);\r\n\r\n            if (this._handledMesh.directMaterial) {\r\n                babylonMesh.material = this._handledMesh.directMaterial;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginAsync, ISceneLoaderPluginFactory, ISceneLoaderPlugin, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport { OBJFileLoaderMetadata } from \"./objFileLoader.metadata\";\r\nimport { MTLFileLoader } from \"./mtlFileLoader\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { SolidParser } from \"./solidParser\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the obj loader.\r\n         */\r\n        [OBJFileLoaderMetadata.name]: Partial<OBJLoadingOptions>;\r\n    }\r\n}\r\n\r\n/**\r\n * OBJ file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class OBJFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines if UVs are optimized by default during load.\r\n     */\r\n    public static OPTIMIZE_WITH_UV = true;\r\n    /**\r\n     * Invert model on y-axis (does a model scaling inversion)\r\n     */\r\n    public static INVERT_Y = false;\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static get INVERT_TEXTURE_Y() {\r\n        return MTLFileLoader.INVERT_TEXTURE_Y;\r\n    }\r\n\r\n    public static set INVERT_TEXTURE_Y(value: boolean) {\r\n        MTLFileLoader.INVERT_TEXTURE_Y = value;\r\n    }\r\n\r\n    /**\r\n     * Include in meshes the vertex colors available in some OBJ files.  This is not part of OBJ standard.\r\n     */\r\n    public static IMPORT_VERTEX_COLORS = false;\r\n    /**\r\n     * Compute the normals for the model, even if normals are present in the file.\r\n     */\r\n    public static COMPUTE_NORMALS = false;\r\n    /**\r\n     * Optimize the normals for the model. Lighting can be uneven if you use OptimizeWithUV = true because new vertices can be created for the same location if they pertain to different faces.\r\n     * Using OptimizehNormals = true will help smoothing the lighting by averaging the normals of those vertices.\r\n     */\r\n    public static OPTIMIZE_NORMALS = false;\r\n    /**\r\n     * Defines custom scaling of UV coordinates of loaded meshes.\r\n     */\r\n    public static UV_SCALING = new Vector2(1, 1);\r\n    /**\r\n     * Skip loading the materials even if defined in the OBJ file (materials are ignored).\r\n     */\r\n    public static SKIP_MATERIALS = false;\r\n\r\n    /**\r\n     * When a material fails to load OBJ loader will silently fail and onSuccess() callback will be triggered.\r\n     *\r\n     * Defaults to true for backwards compatibility.\r\n     */\r\n    public static MATERIAL_LOADING_FAILS_SILENTLY = true;\r\n\r\n    /**\r\n     * Loads assets without handedness conversions. This flag is for compatibility. Use it only if absolutely required. Defaults to false.\r\n     */\r\n    public static USE_LEGACY_BEHAVIOR = false;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public readonly name = OBJFileLoaderMetadata.name;\r\n    /**\r\n     * Defines the extension the plugin is able to load.\r\n     */\r\n    public readonly extensions = OBJFileLoaderMetadata.extensions;\r\n\r\n    private _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n\r\n    /**\r\n     * Creates loader for .OBJ files\r\n     *\r\n     * @param loadingOptions options for loading and parsing OBJ/MTL files.\r\n     */\r\n    constructor(loadingOptions?: Partial<Readonly<OBJLoadingOptions>>) {\r\n        this._loadingOptions = { ...OBJFileLoader._DefaultLoadingOptions, ...(loadingOptions ?? {}) };\r\n    }\r\n\r\n    private static get _DefaultLoadingOptions(): OBJLoadingOptions {\r\n        return {\r\n            computeNormals: OBJFileLoader.COMPUTE_NORMALS,\r\n            optimizeNormals: OBJFileLoader.OPTIMIZE_NORMALS,\r\n            importVertexColors: OBJFileLoader.IMPORT_VERTEX_COLORS,\r\n            invertY: OBJFileLoader.INVERT_Y,\r\n            invertTextureY: OBJFileLoader.INVERT_TEXTURE_Y,\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            UVScaling: OBJFileLoader.UV_SCALING,\r\n            materialLoadingFailsSilently: OBJFileLoader.MATERIAL_LOADING_FAILS_SILENTLY,\r\n            optimizeWithUV: OBJFileLoader.OPTIMIZE_WITH_UV,\r\n            skipMaterials: OBJFileLoader.SKIP_MATERIALS,\r\n            useLegacyBehavior: OBJFileLoader.USE_LEGACY_BEHAVIOR,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calls synchronously the MTL file attached to this obj.\r\n     * Load function or importMesh function don't enable to load 2 files in the same time asynchronously.\r\n     * Without this function materials are not displayed in the first frame (but displayed after).\r\n     * In consequence it is impossible to get material information in your HTML file\r\n     *\r\n     * @param url The URL of the MTL file\r\n     * @param rootUrl defines where to load data from\r\n     * @param onSuccess Callback function to be called when the MTL file is loaded\r\n     * @param onFailure\r\n     */\r\n    private _loadMTL(\r\n        url: string,\r\n        rootUrl: string,\r\n        onSuccess: (response: string | ArrayBuffer, responseUrl?: string) => any,\r\n        onFailure: (pathOfFile: string, exception?: any) => void\r\n    ) {\r\n        //The complete path to the mtl file\r\n        const pathOfFile = rootUrl + url;\r\n\r\n        // Loads through the babylon tools to allow fileInput search.\r\n        Tools.LoadFile(pathOfFile, onSuccess, undefined, undefined, false, (request?: WebRequest | undefined, exception?: any) => {\r\n            onFailure(pathOfFile, exception);\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\r\n        return new OBJFileLoader(options[OBJFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * If the data string can be loaded directly.\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    public canDirectLoad(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from the loaded OBJ data and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise containing the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public importMeshAsync(meshesNames: any, scene: Scene, data: any, rootUrl: string): Promise<ISceneLoaderAsyncResult> {\r\n        //get the meshes from OBJ file\r\n        return this._parseSolid(meshesNames, scene, data, rootUrl).then((meshes) => {\r\n            return {\r\n                meshes: meshes,\r\n                particleSystems: [],\r\n                skeletons: [],\r\n                animationGroups: [],\r\n                transformNodes: [],\r\n                geometries: [],\r\n                lights: [],\r\n                spriteManagers: [],\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from the loaded OBJ data and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\r\n        //Get the 3D model\r\n        return this.importMeshAsync(null, scene, data, rootUrl).then(() => {\r\n            // return void\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainerAsync(scene: Scene, data: string, rootUrl: string): Promise<AssetContainer> {\r\n        const container = new AssetContainer(scene);\r\n        this._assetContainer = container;\r\n\r\n        return this.importMeshAsync(null, scene, data, rootUrl)\r\n            .then((result) => {\r\n                result.meshes.forEach((mesh) => container.meshes.push(mesh));\r\n                result.meshes.forEach((mesh) => {\r\n                    const material = mesh.material;\r\n                    if (material) {\r\n                        // Materials\r\n                        if (container.materials.indexOf(material) == -1) {\r\n                            container.materials.push(material);\r\n\r\n                            // Textures\r\n                            const textures = material.getActiveTextures();\r\n                            textures.forEach((t) => {\r\n                                if (container.textures.indexOf(t) == -1) {\r\n                                    container.textures.push(t);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n                this._assetContainer = null;\r\n                return container;\r\n            })\r\n            .catch((ex) => {\r\n                this._assetContainer = null;\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Read the OBJ file and create an Array of meshes.\r\n     * Each mesh contains all information given by the OBJ and the MTL file.\r\n     * i.e. vertices positions and indices, optional normals values, optional UV values, optional material\r\n     * @param meshesNames defines a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene defines the scene where are displayed the data\r\n     * @param data defines the content of the obj file\r\n     * @param rootUrl defines the path to the folder\r\n     * @returns the list of loaded meshes\r\n     */\r\n    private _parseSolid(meshesNames: any, scene: Scene, data: string, rootUrl: string): Promise<Array<AbstractMesh>> {\r\n        let fileToLoad: string = \"\"; //The name of the mtlFile to load\r\n        const materialsFromMTLFile: MTLFileLoader = new MTLFileLoader();\r\n        const materialToUse: string[] = [];\r\n        const babylonMeshesArray: Array<Mesh> = []; //The mesh for babylon\r\n\r\n        // Sanitize data\r\n        data = data.replace(/#.*$/gm, \"\").trim();\r\n\r\n        // Main function\r\n        const solidParser = new SolidParser(materialToUse, babylonMeshesArray, this._loadingOptions);\r\n\r\n        solidParser.parse(meshesNames, data, scene, this._assetContainer, (fileName: string) => {\r\n            fileToLoad = fileName;\r\n        });\r\n\r\n        // load the materials\r\n        const mtlPromises: Array<Promise<void>> = [];\r\n        // Check if we have a file to load\r\n        if (fileToLoad !== \"\" && !this._loadingOptions.skipMaterials) {\r\n            //Load the file synchronously\r\n            mtlPromises.push(\r\n                new Promise((resolve, reject) => {\r\n                    this._loadMTL(\r\n                        fileToLoad,\r\n                        rootUrl,\r\n                        (dataLoaded) => {\r\n                            try {\r\n                                //Create materials thanks MTLLoader function\r\n                                materialsFromMTLFile.parseMTL(scene, dataLoaded, rootUrl, this._assetContainer);\r\n                                //Look at each material loaded in the mtl file\r\n                                for (let n = 0; n < materialsFromMTLFile.materials.length; n++) {\r\n                                    //Three variables to get all meshes with the same material\r\n                                    let startIndex = 0;\r\n                                    const _indices = [];\r\n                                    let _index;\r\n\r\n                                    //The material from MTL file is used in the meshes loaded\r\n                                    //Push the indice in an array\r\n                                    //Check if the material is not used for another mesh\r\n                                    while ((_index = materialToUse.indexOf(materialsFromMTLFile.materials[n].name, startIndex)) > -1) {\r\n                                        _indices.push(_index);\r\n                                        startIndex = _index + 1;\r\n                                    }\r\n                                    //If the material is not used dispose it\r\n                                    if (_index === -1 && _indices.length === 0) {\r\n                                        //If the material is not needed, remove it\r\n                                        materialsFromMTLFile.materials[n].dispose();\r\n                                    } else {\r\n                                        for (let o = 0; o < _indices.length; o++) {\r\n                                            //Apply the material to the Mesh for each mesh with the material\r\n                                            const mesh = babylonMeshesArray[_indices[o]];\r\n                                            const material = materialsFromMTLFile.materials[n];\r\n                                            mesh.material = material;\r\n\r\n                                            if (!mesh.getTotalIndices()) {\r\n                                                // No indices, we need to turn on point cloud\r\n                                                material.pointsCloud = true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                resolve();\r\n                            } catch (e) {\r\n                                Tools.Warn(`Error processing MTL file: '${fileToLoad}'`);\r\n                                if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                    resolve();\r\n                                } else {\r\n                                    reject(e);\r\n                                }\r\n                            }\r\n                        },\r\n                        (pathOfFile: string, exception?: any) => {\r\n                            Tools.Warn(`Error downloading MTL file: '${fileToLoad}'`);\r\n                            if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                resolve();\r\n                            } else {\r\n                                reject(exception);\r\n                            }\r\n                        }\r\n                    );\r\n                })\r\n            );\r\n        }\r\n        //Return an array with all Mesh\r\n        return Promise.all(mtlPromises).then(() => {\r\n            const isLine = (mesh: AbstractMesh) => Boolean(mesh._internalMetadata?.[\"_isLine\"] ?? false);\r\n\r\n            // Iterate over the mesh, determine if it is a line mesh, clone or modify the material to line rendering.\r\n            babylonMeshesArray.forEach((mesh) => {\r\n                if (isLine(mesh)) {\r\n                    let mat = mesh.material ?? new StandardMaterial(mesh.name + \"_line\", scene);\r\n                    // If another mesh is using this material and it is not a line then we need to clone it.\r\n                    const needClone = mat.getBindedMeshes().filter((e) => !isLine(e)).length > 0;\r\n                    if (needClone) {\r\n                        mat = mat.clone(mat.name + \"_line\") ?? mat;\r\n                    }\r\n                    mat.wireframe = true;\r\n                    mesh.material = mat;\r\n                    if (mesh._internalMetadata) {\r\n                        mesh._internalMetadata[\"_isLine\"] = undefined;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return babylonMeshesArray;\r\n        });\r\n    }\r\n}\r\n\r\n//Add this loader into the register plugin\r\nRegisterSceneLoaderPlugin(new OBJFileLoader());\r\n","// eslint-disable-next-line import/no-internal-modules\r\nimport type { ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const OBJFileLoaderMetadata = {\r\n    name: \"obj\",\r\n    extensions: \".obj\",\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n","// eslint-disable-next-line import/no-internal-modules\r\nimport type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const STLFileLoaderMetadata = {\r\n    name: \"stl\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".stl\": { isBinary: true },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { STLFileLoaderMetadata } from \"./stlFileLoader.metadata\";\r\nimport \"core/Materials/standardMaterial\";\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the stl loader.\r\n         */\r\n        [STLFileLoaderMetadata.name]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public readonly name = STLFileLoaderMetadata.name;\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public readonly extensions = STLFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            data = new TextDecoder().decode(new Uint8Array(data));\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshNameFromEnd && meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new STLFileLoader());\r\n","// eslint-disable-next-line import/no-internal-modules\r\nimport type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const SPLATFileLoaderMetadata = {\r\n    name: \"splat\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".splat\": { isBinary: true },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".ply\": { isBinary: true },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".spz\": { isBinary: true },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n","import type { ISceneLoaderPluginAsync, ISceneLoaderPluginFactory, ISceneLoaderAsyncResult, ISceneLoaderProgressEvent, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { SPLATFileLoaderMetadata } from \"./splatFileLoader.metadata\";\r\nimport { GaussianSplattingMesh } from \"core/Meshes/GaussianSplatting/gaussianSplattingMesh\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointsCloudSystem } from \"core/Particles/pointsCloudSystem\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { SPLATLoadingOptions } from \"./splatLoadingOptions\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the splat loader.\r\n         */\r\n        [SPLATFileLoaderMetadata.name]: Partial<SPLATLoadingOptions>;\r\n    }\r\n}\r\n\r\n/**\r\n * Indicator of the parsed ply buffer. A standard ready to use splat or an array of positions for a point cloud\r\n */\r\nconst enum Mode {\r\n    Splat = 0,\r\n    PointCloud = 1,\r\n    Mesh = 2,\r\n    Reject = 3,\r\n}\r\n\r\n/**\r\n * A parsed buffer and how to use it\r\n */\r\ninterface ParsedPLY {\r\n    data: ArrayBuffer;\r\n    mode: Mode;\r\n    faces?: number[];\r\n    hasVertexColors?: boolean;\r\n    sh?: Uint8Array[];\r\n}\r\n\r\n/**\r\n * @experimental\r\n * SPLAT file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class SPLATFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public readonly name = SPLATFileLoaderMetadata.name;\r\n\r\n    private _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    private readonly _loadingOptions: Readonly<SPLATLoadingOptions>;\r\n    /**\r\n     * Defines the extensions the splat loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     */\r\n    public readonly extensions = SPLATFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Creates loader for gaussian splatting files\r\n     * @param loadingOptions options for loading and parsing splat and PLY files.\r\n     */\r\n    constructor(loadingOptions: Partial<Readonly<SPLATLoadingOptions>> = SPLATFileLoader._DefaultLoadingOptions) {\r\n        this._loadingOptions = loadingOptions;\r\n    }\r\n\r\n    private static readonly _DefaultLoadingOptions = {\r\n        keepInRam: false,\r\n        flipY: false,\r\n    } as const satisfies SPLATLoadingOptions;\r\n\r\n    /** @internal */\r\n    createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\r\n        return new SPLATFileLoader(options[SPLATFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * Imports  from the loaded gaussian splatting data and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param data the gaussian splatting data to load\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress callback called while file is loading\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns a promise containing the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public async importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: any,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return this._parse(meshesNames, scene, data, rootUrl).then((meshes) => {\r\n            return {\r\n                meshes: meshes,\r\n                particleSystems: [],\r\n                skeletons: [],\r\n                animationGroups: [],\r\n                transformNodes: [],\r\n                geometries: [],\r\n                lights: [],\r\n                spriteManagers: [],\r\n            };\r\n        });\r\n    }\r\n\r\n    private static _BuildPointCloud(pointcloud: PointsCloudSystem, data: ArrayBuffer): boolean {\r\n        if (!data.byteLength) {\r\n            return false;\r\n        }\r\n        const uBuffer = new Uint8Array(data);\r\n        const fBuffer = new Float32Array(data);\r\n\r\n        // parsed array contains room for position(3floats), normal(3floats), color (4b), quantized quaternion (4b)\r\n        const rowLength = 3 * 4 + 3 * 4 + 4 + 4;\r\n        const vertexCount = uBuffer.length / rowLength;\r\n\r\n        const pointcloudfunc = function (particle: any, i: number) {\r\n            const x = fBuffer[8 * i + 0];\r\n            const y = fBuffer[8 * i + 1];\r\n            const z = fBuffer[8 * i + 2];\r\n            particle.position = new Vector3(x, y, z);\r\n\r\n            const r = uBuffer[rowLength * i + 24 + 0] / 255;\r\n            const g = uBuffer[rowLength * i + 24 + 1] / 255;\r\n            const b = uBuffer[rowLength * i + 24 + 2] / 255;\r\n            particle.color = new Color4(r, g, b, 1);\r\n        };\r\n\r\n        pointcloud.addPoints(vertexCount, pointcloudfunc);\r\n        return true;\r\n    }\r\n\r\n    private static _BuildMesh(scene: Scene, parsedPLY: ParsedPLY): Mesh {\r\n        const mesh = new Mesh(\"PLYMesh\", scene);\r\n\r\n        const uBuffer = new Uint8Array(parsedPLY.data);\r\n        const fBuffer = new Float32Array(parsedPLY.data);\r\n\r\n        const rowLength = 3 * 4 + 3 * 4 + 4 + 4;\r\n        const vertexCount = uBuffer.length / rowLength;\r\n\r\n        const positions = [];\r\n\r\n        const vertexData = new VertexData();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const x = fBuffer[8 * i + 0];\r\n            const y = fBuffer[8 * i + 1];\r\n            const z = fBuffer[8 * i + 2];\r\n            positions.push(x, y, z);\r\n        }\r\n\r\n        if (parsedPLY.hasVertexColors) {\r\n            const colors = new Float32Array(vertexCount * 4);\r\n            for (let i = 0; i < vertexCount; i++) {\r\n                const r = uBuffer[rowLength * i + 24 + 0] / 255;\r\n                const g = uBuffer[rowLength * i + 24 + 1] / 255;\r\n                const b = uBuffer[rowLength * i + 24 + 2] / 255;\r\n                colors[i * 4 + 0] = r;\r\n                colors[i * 4 + 1] = g;\r\n                colors[i * 4 + 2] = b;\r\n                colors[i * 4 + 3] = 1;\r\n            }\r\n            vertexData.colors = colors;\r\n        }\r\n\r\n        vertexData.positions = positions;\r\n        vertexData.indices = parsedPLY.faces!;\r\n\r\n        vertexData.applyToMesh(mesh);\r\n        return mesh;\r\n    }\r\n\r\n    private _parseSPZ(data: ArrayBuffer, scene: Scene): Promise<ParsedPLY> {\r\n        const ubuf = new Uint8Array(data);\r\n        const ubufu32 = new Uint32Array(data);\r\n        // debug infos\r\n        const splatCount = ubufu32[2];\r\n\r\n        const shDegree = ubuf[12];\r\n        const fractionalBits = ubuf[13];\r\n        //const flags = ubuf[14];\r\n        const reserved = ubuf[15];\r\n\r\n        // check magic and version\r\n        if (reserved || ubufu32[0] != 0x5053474e || ubufu32[1] != 2) {\r\n            // reserved must be 0\r\n            return new Promise((resolve) => {\r\n                resolve({ mode: Mode.Reject, data: buffer, hasVertexColors: false });\r\n            });\r\n        }\r\n\r\n        const rowOutputLength = 3 * 4 + 3 * 4 + 4 + 4; // 32\r\n        const buffer = new ArrayBuffer(rowOutputLength * splatCount);\r\n\r\n        const positionScale = 1.0 / (1 << fractionalBits);\r\n\r\n        const int32View = new Int32Array(1);\r\n        const uint8View = new Uint8Array(int32View.buffer);\r\n        const read24bComponent = function (u8: Uint8Array, offset: number) {\r\n            uint8View[0] = u8[offset + 0];\r\n            uint8View[1] = u8[offset + 1];\r\n            uint8View[2] = u8[offset + 2];\r\n            uint8View[3] = u8[offset + 2] & 0x80 ? 0xff : 0x00;\r\n            return int32View[0] * positionScale;\r\n        };\r\n\r\n        let byteOffset = 16;\r\n\r\n        const position = new Float32Array(buffer);\r\n        const scale = new Float32Array(buffer);\r\n        const rgba = new Uint8ClampedArray(buffer);\r\n        const rot = new Uint8ClampedArray(buffer);\r\n\r\n        let coordinateSign = 1;\r\n        let quaternionOffset = 0;\r\n        if (!this._loadingOptions.flipY) {\r\n            coordinateSign = -1;\r\n            quaternionOffset = 255;\r\n        }\r\n        // positions\r\n        for (let i = 0; i < splatCount; i++) {\r\n            position[i * 8 + 0] = read24bComponent(ubuf, byteOffset + 0);\r\n            position[i * 8 + 1] = coordinateSign * read24bComponent(ubuf, byteOffset + 3);\r\n            position[i * 8 + 2] = coordinateSign * read24bComponent(ubuf, byteOffset + 6);\r\n            byteOffset += 9;\r\n        }\r\n\r\n        // colors\r\n        const SH_C0 = 0.282;\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let component = 0; component < 3; component++) {\r\n                const byteValue = ubuf[byteOffset + splatCount + i * 3 + component];\r\n                // 0.15 is hard coded value from spz\r\n                // Scale factor for DC color components. To convert to RGB, we should multiply by 0.282, but it can\r\n                // be useful to represent base colors that are out of range if the higher spherical harmonics bands\r\n                // bring them back into range so we multiply by a smaller value.\r\n                const value = (byteValue - 127.5) / (0.15 * 255);\r\n                rgba[i * 32 + 24 + component] = Scalar.Clamp((0.5 + SH_C0 * value) * 255, 0, 255);\r\n            }\r\n\r\n            rgba[i * 32 + 24 + 3] = ubuf[byteOffset + i];\r\n        }\r\n        byteOffset += splatCount * 4;\r\n\r\n        // scales\r\n        for (let i = 0; i < splatCount; i++) {\r\n            scale[i * 8 + 3 + 0] = Math.exp(ubuf[byteOffset + 0] / 16.0 - 10.0);\r\n            scale[i * 8 + 3 + 1] = Math.exp(ubuf[byteOffset + 1] / 16.0 - 10.0);\r\n            scale[i * 8 + 3 + 2] = Math.exp(ubuf[byteOffset + 2] / 16.0 - 10.0);\r\n            byteOffset += 3;\r\n        }\r\n\r\n        // convert quaternion\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const x = ubuf[byteOffset + 0];\r\n            const y = ubuf[byteOffset + 1] * coordinateSign + quaternionOffset;\r\n            const z = ubuf[byteOffset + 2] * coordinateSign + quaternionOffset;\r\n            const nx = x / 127.5 - 1;\r\n            const ny = y / 127.5 - 1;\r\n            const nz = z / 127.5 - 1;\r\n            rot[i * 32 + 28 + 1] = x;\r\n            rot[i * 32 + 28 + 2] = y;\r\n            rot[i * 32 + 28 + 3] = z;\r\n            const v = 1 - (nx * nx + ny * ny + nz * nz);\r\n            rot[i * 32 + 28 + 0] = 127.5 + Math.sqrt(v < 0 ? 0 : v) * 127.5;\r\n\r\n            byteOffset += 3;\r\n        }\r\n\r\n        //SH\r\n        if (shDegree) {\r\n            // shVectorCount is : 3 for dim = 1, 8 for dim = 2 and 15 for dim = 3\r\n            // number of vec3 vector needed per splat\r\n            const shVectorCount = (shDegree + 1) * (shDegree + 1) - 1; // minus 1 because sh0 is color\r\n            // number of component values : 3 per vector3 (45)\r\n            const shComponentCount = shVectorCount * 3;\r\n\r\n            const textureCount = Math.ceil(shComponentCount / 16); // 4 components can be stored per texture, 4 sh per component\r\n            let shIndexRead = byteOffset;\r\n\r\n            // sh is an array of uint8array that will be used to create sh textures\r\n            const sh: Uint8Array[] = [];\r\n\r\n            const engine = scene.getEngine();\r\n            const width = engine.getCaps().maxTextureSize;\r\n            const height = Math.ceil(splatCount / width);\r\n            // create array for the number of textures needed.\r\n            for (let textureIndex = 0; textureIndex < textureCount; textureIndex++) {\r\n                const texture = new Uint8Array(height * width * 4 * 4); // 4 components per texture, 4 sh per component\r\n                sh.push(texture);\r\n            }\r\n\r\n            for (let i = 0; i < splatCount; i++) {\r\n                for (let shIndexWrite = 0; shIndexWrite < shComponentCount; shIndexWrite++) {\r\n                    const shValue = ubuf[shIndexRead++];\r\n\r\n                    const textureIndex = Math.floor(shIndexWrite / 16);\r\n                    const shArray = sh[textureIndex];\r\n\r\n                    const byteIndexInTexture = shIndexWrite % 16; // [0..15]\r\n                    const offsetPerSplat = i * 16; // 16 sh values per texture per splat.\r\n                    shArray[byteIndexInTexture + offsetPerSplat] = shValue;\r\n                }\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n                resolve({ mode: Mode.Splat, data: buffer, hasVertexColors: false, sh: sh });\r\n            });\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            resolve({ mode: Mode.Splat, data: buffer, hasVertexColors: false });\r\n        });\r\n    }\r\n\r\n    private _parse(meshesNames: any, scene: Scene, data: any, rootUrl: string): Promise<Array<AbstractMesh>> {\r\n        const babylonMeshesArray: Array<Mesh> = []; //The mesh for babylon\r\n\r\n        const readableStream = new ReadableStream({\r\n            start(controller) {\r\n                controller.enqueue(new Uint8Array(data)); // Enqueue the ArrayBuffer as a Uint8Array\r\n                controller.close();\r\n            },\r\n        });\r\n\r\n        // Use GZip DecompressionStream\r\n        const decompressionStream = new DecompressionStream(\"gzip\");\r\n        const decompressedStream = readableStream.pipeThrough(decompressionStream);\r\n\r\n        return new Promise((resolve) => {\r\n            new Response(decompressedStream)\r\n                .arrayBuffer()\r\n                .then((buffer) => {\r\n                    this._parseSPZ(buffer, scene).then((parsedSPZ) => {\r\n                        scene._blockEntityCollection = !!this._assetContainer;\r\n                        const gaussianSplatting = new GaussianSplattingMesh(\"GaussianSplatting\", null, scene, this._loadingOptions.keepInRam);\r\n                        gaussianSplatting._parentContainer = this._assetContainer;\r\n                        babylonMeshesArray.push(gaussianSplatting);\r\n                        gaussianSplatting.updateData(parsedSPZ.data, parsedSPZ.sh);\r\n                        scene._blockEntityCollection = false;\r\n                        resolve(babylonMeshesArray);\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    // Catch any decompression errors\r\n                    SPLATFileLoader._ConvertPLYToSplat(data as ArrayBuffer).then(async (parsedPLY) => {\r\n                        scene._blockEntityCollection = !!this._assetContainer;\r\n                        switch (parsedPLY.mode) {\r\n                            case Mode.Splat:\r\n                                {\r\n                                    const gaussianSplatting = new GaussianSplattingMesh(\"GaussianSplatting\", null, scene, this._loadingOptions.keepInRam);\r\n                                    gaussianSplatting._parentContainer = this._assetContainer;\r\n                                    babylonMeshesArray.push(gaussianSplatting);\r\n                                    gaussianSplatting.updateData(parsedPLY.data);\r\n                                }\r\n                                break;\r\n                            case Mode.PointCloud:\r\n                                {\r\n                                    const pointcloud = new PointsCloudSystem(\"PointCloud\", 1, scene);\r\n                                    if (SPLATFileLoader._BuildPointCloud(pointcloud, parsedPLY.data)) {\r\n                                        await pointcloud.buildMeshAsync().then((mesh) => {\r\n                                            babylonMeshesArray.push(mesh);\r\n                                        });\r\n                                    } else {\r\n                                        pointcloud.dispose();\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case Mode.Mesh:\r\n                                {\r\n                                    if (parsedPLY.faces) {\r\n                                        babylonMeshesArray.push(SPLATFileLoader._BuildMesh(scene, parsedPLY));\r\n                                    } else {\r\n                                        throw new Error(\"PLY mesh doesn't contain face informations.\");\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                throw new Error(\"Unsupported Splat mode\");\r\n                        }\r\n                        scene._blockEntityCollection = false;\r\n                        resolve(babylonMeshesArray);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainerAsync(scene: Scene, data: string, rootUrl: string): Promise<AssetContainer> {\r\n        const container = new AssetContainer(scene);\r\n        this._assetContainer = container;\r\n\r\n        return this.importMeshAsync(null, scene, data, rootUrl)\r\n            .then((result) => {\r\n                result.meshes.forEach((mesh) => container.meshes.push(mesh));\r\n                // mesh material will be null before 1st rendered frame.\r\n                this._assetContainer = null;\r\n                return container;\r\n            })\r\n            .catch((ex) => {\r\n                this._assetContainer = null;\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from the loaded OBJ data and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\r\n        //Get the 3D model\r\n        return this.importMeshAsync(null, scene, data, rootUrl).then(() => {\r\n            // return void\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Code from https://github.com/dylanebert/gsplat.js/blob/main/src/loaders/PLYLoader.ts Under MIT license\r\n     * Converts a .ply data array buffer to splat\r\n     * if data array buffer is not ply, returns the original buffer\r\n     * @param data the .ply data to load\r\n     * @returns the loaded splat buffer\r\n     */\r\n    private static _ConvertPLYToSplat(data: ArrayBuffer): Promise<ParsedPLY> {\r\n        const ubuf = new Uint8Array(data);\r\n        const header = new TextDecoder().decode(ubuf.slice(0, 1024 * 10));\r\n        const headerEnd = \"end_header\\n\";\r\n        const headerEndIndex = header.indexOf(headerEnd);\r\n        if (headerEndIndex < 0 || !header) {\r\n            // standard splat\r\n            return new Promise((resolve) => {\r\n                resolve({ mode: Mode.Splat, data: data });\r\n            });\r\n        }\r\n\r\n        const vertexCount = parseInt(/element vertex (\\d+)\\n/.exec(header)![1]);\r\n        const faceElement = /element face (\\d+)\\n/.exec(header);\r\n        let faceCount = 0;\r\n        if (faceElement) {\r\n            faceCount = parseInt(faceElement[1]);\r\n        }\r\n        const chunkElement = /element chunk (\\d+)\\n/.exec(header);\r\n        let chunkCount = 0;\r\n        if (chunkElement) {\r\n            chunkCount = parseInt(chunkElement[1]);\r\n        }\r\n\r\n        let rowVertexOffset = 0;\r\n        let rowChunkOffset = 0;\r\n        const offsets: Record<string, number> = {\r\n            double: 8,\r\n            int: 4,\r\n            uint: 4,\r\n            float: 4,\r\n            short: 2,\r\n            ushort: 2,\r\n            uchar: 1,\r\n            list: 0,\r\n        };\r\n\r\n        type PlyProperty = {\r\n            name: string;\r\n            type: string;\r\n            offset: number;\r\n        };\r\n\r\n        const enum ElementMode {\r\n            Vertex = 0,\r\n            Chunk = 1,\r\n        }\r\n\r\n        let chunkMode = ElementMode.Chunk;\r\n        const vertexProperties: PlyProperty[] = [];\r\n        const chunkProperties: PlyProperty[] = [];\r\n        const filtered = header.slice(0, headerEndIndex).split(\"\\n\");\r\n        for (const prop of filtered) {\r\n            if (prop.startsWith(\"property \")) {\r\n                const [, type, name] = prop.split(\" \");\r\n\r\n                if (chunkMode == ElementMode.Chunk) {\r\n                    chunkProperties.push({ name, type, offset: rowChunkOffset });\r\n                    rowChunkOffset += offsets[type];\r\n                } else if (chunkMode == ElementMode.Vertex) {\r\n                    vertexProperties.push({ name, type, offset: rowVertexOffset });\r\n                    rowVertexOffset += offsets[type];\r\n                }\r\n\r\n                if (!offsets[type]) {\r\n                    Logger.Warn(`Unsupported property type: ${type}.`);\r\n                }\r\n            } else if (prop.startsWith(\"element \")) {\r\n                const [, type] = prop.split(\" \");\r\n                if (type == \"chunk\") {\r\n                    chunkMode = ElementMode.Chunk;\r\n                } else if (type == \"vertex\") {\r\n                    chunkMode = ElementMode.Vertex;\r\n                }\r\n            }\r\n        }\r\n\r\n        const rowVertexLength = rowVertexOffset;\r\n        const rowChunkLength = rowChunkOffset;\r\n\r\n        return (GaussianSplattingMesh.ConvertPLYWithSHToSplatAsync(data) as any).then((splatsData: any) => {\r\n            const dataView = new DataView(data, headerEndIndex + headerEnd.length);\r\n            let offset = rowChunkLength * chunkCount + rowVertexLength * vertexCount;\r\n            // faces\r\n            const faces: number[] = [];\r\n            if (faceCount) {\r\n                for (let i = 0; i < faceCount; i++) {\r\n                    const faceVertexCount = dataView.getUint8(offset);\r\n                    if (faceVertexCount != 3) {\r\n                        continue; // only support triangles\r\n                    }\r\n                    offset += 1;\r\n\r\n                    for (let j = 0; j < faceVertexCount; j++) {\r\n                        const vertexIndex = dataView.getUint32(offset + (2 - j) * 4, true); // change face winding\r\n                        faces.push(vertexIndex);\r\n                    }\r\n                    offset += 12;\r\n                }\r\n            }\r\n\r\n            // early exit for chunked/quantized ply\r\n            if (chunkCount) {\r\n                return new Promise((resolve) => {\r\n                    resolve({ mode: Mode.Splat, data: splatsData.buffer, sh: splatsData.sh, faces: faces, hasVertexColors: false });\r\n                });\r\n            }\r\n            // count available properties. if all necessary are present then it's a splat. Otherwise, it's a point cloud\r\n            // if faces are found, then it's a standard mesh\r\n            let propertyCount = 0;\r\n            let propertyColorCount = 0;\r\n            const splatProperties = [\"x\", \"y\", \"z\", \"scale_0\", \"scale_1\", \"scale_2\", \"opacity\", \"rot_0\", \"rot_1\", \"rot_2\", \"rot_3\"];\r\n            const splatColorProperties = [\"red\", \"green\", \"blue\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"];\r\n            for (let propertyIndex = 0; propertyIndex < vertexProperties.length; propertyIndex++) {\r\n                const property = vertexProperties[propertyIndex];\r\n                if (splatProperties.includes(property.name)) {\r\n                    propertyCount++;\r\n                }\r\n                if (splatColorProperties.includes(property.name)) {\r\n                    propertyColorCount++;\r\n                }\r\n            }\r\n            const hasMandatoryProperties = propertyCount == splatProperties.length && propertyColorCount == 3;\r\n            const currentMode = faceCount ? Mode.Mesh : hasMandatoryProperties ? Mode.Splat : Mode.PointCloud;\r\n            // parsed ready ready to be used as a splat\r\n            return new Promise((resolve) => {\r\n                resolve({ mode: currentMode, data: splatsData.buffer, sh: splatsData.sh, faces: faces, hasVertexColors: !!propertyColorCount });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Add this loader into the register plugin\r\nRegisterSceneLoaderPlugin(new SPLATFileLoader());\r\n","import * as FileLoader from \"loaders/glTF/glTFFileLoader\";\r\nimport * as Validation from \"loaders/glTF/glTFValidation\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (const key in FileLoader) {\r\n        (<any>globalObject).BABYLON[key] = (<any>FileLoader)[key];\r\n    }\r\n    for (const key in Validation) {\r\n        (<any>globalObject).BABYLON[key] = (<any>Validation)[key];\r\n    }\r\n}\r\n\r\nexport * from \"loaders/glTF/glTFFileLoader\";\r\nexport * from \"loaders/glTF/glTFValidation\";\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as GLTF1 from \"loaders/glTF/1.0/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GLTF1 = (<any>globalObject).BABYLON.GLTF1 || {};\r\n    for (const key in GLTF1) {\r\n        (<any>globalObject).BABYLON.GLTF1[key] = (<any>GLTF1)[key];\r\n    }\r\n}\r\n\r\nexport { GLTF1 };\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Extensions from \"loaders/glTF/2.0/Extensions/index\";\r\nimport * as Interfaces from \"loaders/glTF/2.0/glTFLoaderInterfaces\";\r\nimport * as GLTF2 from \"loaders/glTF/2.0/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    const BABYLON = (<any>globalObject).BABYLON;\r\n    BABYLON.GLTF2 = BABYLON.GLTF2 || {};\r\n    BABYLON.GLTF2.Loader = BABYLON.GLTF2.Loader || {};\r\n    BABYLON.GLTF2.Loader.Extensions = BABYLON.GLTF2.Loader.Extensions || {};\r\n\r\n    const keys = [];\r\n    for (const key in Extensions) {\r\n        BABYLON.GLTF2.Loader.Extensions[key] = (<any>Extensions)[key];\r\n        keys.push(key);\r\n    }\r\n    for (const key in Interfaces) {\r\n        BABYLON.GLTF2.Loader[key] = (<any>Interfaces)[key];\r\n        keys.push(key);\r\n    }\r\n\r\n    for (const key in GLTF2) {\r\n        // Prevent Reassignment.\r\n        if (keys.indexOf(key) > -1) {\r\n            continue;\r\n        }\r\n\r\n        BABYLON.GLTF2[key] = (<any>GLTF2)[key];\r\n    }\r\n}\r\n\r\nexport { GLTF2 };\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Loaders from \"loaders/OBJ/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (const key in Loaders) {\r\n        if (!(<any>globalObject).BABYLON[key]) {\r\n            (<any>globalObject).BABYLON[key] = (<any>Loaders)[key];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"loaders/OBJ/index\";\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Loaders from \"loaders/STL/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (const key in Loaders) {\r\n        if (!(<any>globalObject).BABYLON[key]) {\r\n            (<any>globalObject).BABYLON[key] = (<any>Loaders)[key];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"loaders/STL/index\";\r\n","import * as loaders from \"@lts/loaders/legacy/legacy\";\r\nexport { loaders };\r\nexport default loaders;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","leafPrototypes","getProto","config","glTF","animationGroups","animations","map","a","_babylonAnimationGroup","registerDataOutput","RichTypeAny","nodes","n","_babylonTransformNode","getClassName","FlowGraphBlock","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__assign","assign","t","s","i","arguments","length","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","g","Iterator","verb","Symbol","iterator","v","op","pop","push","SuppressedError","_gltf","_infoTree","convert","path","objectTree","infoTree","target","undefined","startsWith","Error","parts","split","shift","includes","ignoreObjectTree","part","isLength","__array__","__ignoreObjectTree__","__target__","object","info","_GetTexture","material","payload","textureType","textureInObject","babylonMaterial","_GetMaterial","_index","_data","fillMode","Constants","MATERIAL_TriangleFillMode","_GenerateTextureMap","offset","componentsCount","type","get","texture","Vector2","uOffset","vOffset","getTarget","set","x","getPropertyName","rotation","wAng","scale","uScale","vScale","index","objectModelMapping","cameras","orthographic","xmag","camera","_babylonCamera","orthoLeft","orthoRight","ymag","orthoBottom","orthoTop","zfar","maxZ","znear","minZ","perspective","aspectRatio","getEngine","getAspectRatio","isReadOnly","yfov","fov","node","translation","position","copyFrom","rotationQuaternion","scaling","weights","_numMorphTargets","_primitiveBabylonMeshes","morphTargetManager","influence","matrix","Matrix","Compose","globalMatrix","Identity","rootNode","parent","forceUpdate","_isDirty","rootMatrix","computeWorldMatrix","invert","multiplyToRef","extensions","EXT_lights_ies","multiplier","getChildren","child","SpotLight","intensity","light","color","diffuse","materials","emissiveFactor","emissiveColor","emissiveTexture","KHR_texture_transform","normalTexture","level","occlusionTexture","strength","ambientTextureStrength","mat","pbrMetallicRoughness","baseColorFactor","Color4","FromColor3","albedoColor","alpha","r","baseColorTexture","metallicFactor","metallic","roughnessFactor","roughness","metallicRoughnessTexture","KHR_materials_anisotropy","anisotropyStrength","anisotropy","anisotropyRotation","angle","anisotropyTexture","KHR_materials_clearcoat","clearcoatFactor","clearCoat","clearcoatRoughnessFactor","clearcoatTexture","clearcoatNormalTexture","bumpTexture","clearcoatRoughnessTexture","KHR_materials_dispersion","dispersion","subSurface","KHR_materials_emissive_strength","emissiveStrength","emissiveIntensity","KHR_materials_ior","ior","indexOfRefraction","KHR_materials_iridescence","iridescenceFactor","iridescence","iridescenceIor","iridescenceTexture","iridescenceThicknessMaximum","maximumThickness","iridescenceThicknessMinimum","minimumThickness","iridescenceThicknessTexture","KHR_materials_sheen","sheenColorFactor","sheen","sheenColorTexture","sheenRoughnessFactor","sheenRoughnessTexture","KHR_materials_specular","specularFactor","metallicF0Factor","specularColorFactor","metallicReflectanceColor","specularTexture","specularColorTexture","KHR_materials_transmission","transmissionFactor","refractionIntensity","transmissionTexture","KHR_materials_diffuse_transmission","diffuseTransmissionFactor","translucencyIntensity","diffuseTransmissionTexture","diffuseTransmissionColorFactor","translucencyColor","diffuseTransmissionColorTexture","KHR_materials_volume","attenuationColor","tintColor","attenuationDistance","tintColorAtDistance","thicknessFactor","thicknessTexture","KHR_lights_punctual","lights","_babylonLight","_lights","_light","range","spot","innerConeAngle","innerAngle","outerConeAngle","EXT_lights_image_based","_babylonTexture","Quaternion","FromRotationMatrix","getReflectionTextureMatrix","getScene","useRightHandedSystem","Inverse","FromQuaternionToRef","animation","meshes","mesh","primitives","_instanceData","babylonSourceMesh","GetPathToObjectConverter","gltf","GLTFPathToObjectConverter","GetMappingForKey","key","keyParts","replace","current","SetInterpolationForKey","interpolation","AddObjectAccessorToKey","accessor","getVector3","_target","source","Vector3","FromArray","scaleInPlace","getQuaternion","getWeights","name","getValue","getStride","_buildAnimation","fps","keys","babylonAnimation","Animation","setKeys","buildAnimations","babylonAnimations","babylonAnimatable","AnimationPropertyInfo","targetIndex","frame","inTangent","outTangent","babylonMesh","morphTarget","babylonAnimationClone","clone","TransformNodeAnimationPropertyInfo","ANIMATIONTYPE_VECTOR3","ANIMATIONTYPE_QUATERNION","WeightAnimationPropertyInfo","ANIMATIONTYPE_FLOAT","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","getPrototypeOf","obj","mode","ns","def","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","globalThis","Function","window","prop","toStringTag","validateAsync","data","rootUrl","fileName","getExternalResource","options","externalResourceFunction","uri","ArrayBuffer","isView","GLTFValidator","validateBytes","validateString","workerFunc","pendingExternalResources","onmessage","message","id","importScripts","url","postMessage","reason","GLTFLoaderCoordinateSystemMode","GLTFLoaderAnimationStartMode","GLTFLoaderState","ValidateAsync","Worker","workerContent","workerBlobUrl","URL","createObjectURL","Blob","worker","onError","error","removeEventListener","onMessage","buffer","terminate","addEventListener","Tools","GetBabylonScriptURL","Configuration","slicedData","slice","_LoadScriptPromise","LoadBabylonScriptAsync","_DefaultCdnUrl","GLTFMagicBase64Encoded","GLTFFileLoaderMetadata","isBinary","mimeType","readAsync","arrayBuffer","byteOffset","byteLength","Uint8Array","EComponentType","EShaderType","EParameterType","ETextureWrapMode","ETextureFilterType","ETextureFormat","ECullingType","EBlendingFunction","onParsedObservable","Observable","onMeshLoadedObservable","onSkinLoadedObservable","onTextureLoadedObservable","onMaterialLoadedObservable","onCameraLoadedObservable","onCompleteObservable","onErrorObservable","onDisposeObservable","onExtensionLoadedObservable","validate","onValidatedObservable","_loader","_state","_requests","onLoaderStateChangedObservable","_logIndentLevel","_loggingEnabled","_log","_logDisabled","_capturePerformanceCounters","_startPerformanceCounter","_startPerformanceCounterDisabled","_endPerformanceCounter","_endPerformanceCounterDisabled","callback","_onParsedObserver","remove","add","_onMeshLoadedObserver","_onSkinLoadedObserver","skinnedNode","_onTextureLoadedObserver","_onMaterialLoadedObserver","_onCameraLoadedObserver","_onCompleteObserver","_onErrorObserver","_onDisposeObserver","_onExtensionLoadedObserver","_logEnabled","_startPerformanceCounterEnabled","_endPerformanceCounterEnabled","_onValidatedObserver","dispose","abort","_progressCallback","preprocessUrlAsync","clear","notifyObservers","loadFile","scene","fileOrUrl","onSuccess","onProgress","useArrayBuffer","_loadBinary","GetFilename","useRangeRequests","Logger","Warn","dataBuffer","_loadFile","webRequest","setRequestHeader","_unpackBinaryAsync","DataReader","loaderData","_validate","json","_parseJson","arrayBufferView","RangeError","readViewAsync","importMeshAsync","meshesNames","_getLoader","loadAsync","loadAssetContainerAsync","container","AssetContainer","textures","morphTargetManagers","geometries","particleSystems","skeletons","transformNodes","canDirectLoad","directLoad","DecodeBase64UrlToBinary","createPlugin","GLTFFileLoader","whenCompleteAsync","addOnce","_setState","state","onOpened","request","event","_onProgress","_lengthComputable","_total","_loaded","lengthComputable","loaded","total","GLTFValidation","_loadFileAsync","asset","version","minVersion","_parseVersion","_compareVersion","major","minor","createLoader","_CreateGLTF1Loader","_CreateGLTF2Loader","parsed","JSON","parse","dataReader","magic","readUint32","RuntimeError","ErrorCodes","GLTFLoaderUnexpectedMagicError","loggingEnabled","unpacked","_unpackBinaryV1Async","_unpackBinaryV2Async","contentLength","contentFormat","bodyLength","readString","bin","ChunkFormat","chunkLength","skipBytes","match","parseInt","_logOpen","_logClose","spaces","_logSpaces","substring","Log","counterName","StartPerformanceCounter","EndPerformanceCounter","IncrementalLoading","HomogeneousCoordinates","coordinateSystemMode","AUTO","animationStartMode","FIRST","loadNodeAnimations","loadSkins","loadMorphTargets","compileMaterials","useClipPlane","compileShadowGenerators","transparencyAsCoverage","createInstances","alwaysComputeBoundingBox","loadAllMaterials","loadOnlyMaterials","skipMaterials","useSRGBBuffers","targetFps","alwaysComputeSkeletonRootNode","useGltfTextureNames","extensionOptions","onParsed","customRootNode","onMeshLoaded","onSkinLoaded","onTextureLoaded","onMaterialLoaded","onCameraLoaded","RegisterSceneLoaderPlugin","ETokenType","SetMatrix","parameter","uniformName","shaderMaterial","semantic","getWorldMatrix","getProjectionMatrix","getViewMatrix","Transpose","multiply","getTransformMatrix","FLOAT_MAT2","setMatrix2x2","GetAsMatrix2x2","FLOAT_MAT3","setMatrix3x3","GetAsMatrix3x3","FLOAT_MAT4","setMatrix","SetUniform","uniform","FLOAT","setFloat","FLOAT_VEC2","setVector2","FLOAT_VEC3","setVector3","FLOAT_VEC4","setVector4","Vector4","GetWrapMode","CLAMP_TO_EDGE","Texture","CLAMP_ADDRESSMODE","MIRRORED_REPEAT","MIRROR_ADDRESSMODE","REPEAT","WRAP_ADDRESSMODE","GetByteStrideFromType","GetTextureFilterMode","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","TRILINEAR_SAMPLINGMODE","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_SAMPLINGMODE","BILINEAR_SAMPLINGMODE","GetBufferFromBufferView","gltfRuntime","bufferView","componentType","loadedBufferView","loadedBufferViews","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","Uint16Array","Float32Array","GetBufferFromAccessor","bufferViews","count","GLTFUtils","DecodeBufferToText","view","fromCharCode","GetDefaultMaterial","_DefaultMaterial","Effect","ShadersStore","join","attributes","uniforms","samplers","needAlphaBlending","ShaderMaterial","vertex","fragment","setColor4","toParse","_pos","currentToken","UNKNOWN","currentIdentifier","currentString","isLetterOrDigitPattern","_toParse","_maxPos","getNextToken","isEnd","END_OF_INPUT","read","test","IDENTIFIER","peek","forward","glTFTransforms","babylonTransforms","glTFAnimationPaths","babylonAnimationPaths","parseObject","parsedObjects","runtimeProperty","parsedObject","normalizeUVs","getAttribute","attributeParameter","channel","Number","configureBoneTransformation","getParentBone","skins","jointName","newSkeleton","bones","nde","children","bone","Bone","getNodeToRoot","nodesToRoot","nodeToRoot","j","getJointNode","nodeIsInJoints","jointNames","importMesh","newMesh","_blockEntityCollection","assetContainer","Mesh","_parentContainer","babylonNode","subMaterials","vertexData","verticesStarts","verticesCounts","indexStarts","indexCounts","meshIndex","meshId","tempVertexData","VertexData","primitive","accessors","normals","positions","uvKind","VertexBuffer","UVKind","uvs","matricesIndices","matricesWeights","colors","indices","Int32Array","merge","getMaterialById","MultiMaterial","StandardMaterial","Geometry","subMeshes","SubMesh","AddToMesh","configureNode","newNode","importNode","lastNode","importOnlyMeshes","skin","importMeshesNames","skeleton","getLastSkeletonById","Skeleton","babylonSkeleton","nodesToRootToAdd","k","_parent","getNodesToRoot","jointNode","existingBone","getBoneById","foundBone","parentBone","joint","prepare","importSkeleton","orthoCamera","FreeCamera","Zero","Camera","ORTHOGRAPHIC_CAMERA","attachControl","perspectiveCamera","persCamera","getRenderWidth","getRenderHeight","ambienLight","hemiLight","HemisphericLight","Color3","directionalLight","dirLight","DirectionalLight","pointLight","ptLight","PointLight","spotLight","spLight","fallOfAngle","fallOffExponent","exponent","dummy","decompose","configureNodeFromMatrix","updateCache","traverseNodes","meshIncluded","postLoad","currentScene","thing","scenes","anim","channels","lastAnimation","sampler","inputData","outputData","parameters","input","output","bufferInput","bufferOutput","targetId","targetNode","getNodeById","getNodeByName","isBone","targetPath","targetPathIndex","animationType","ANIMATIONTYPE_MATRIX","arrayOffset","modifyKey","getKeys","ANIMATIONLOOPMODE_CYCLE","getBaseMatrix","stopAnimation","beginAnimation","loadAnimations","MAX_VALUE","parseShaderUniforms","tokenizer","technique","unTreatedUniforms","unif","uniformParameter","transformIndex","importMaterials","GLTFLoaderExtension","LoadMaterialAsync","CreateRuntime","parsedData","buffers","images","shaders","programs","techniques","extensionsUsed","buffersCount","shaderscount","loadedBufferCount","loadedShaderCount","dummyNodes","parsedBuffers","buf","parsedBuffer","parseBuffers","parsedShaders","sha","parsedShader","parseShaders","LoadBufferAsync","IsBase64","setTimeout","DecodeBase64","LoadFile","status","statusText","LoadTextureBufferAsync","babylonTexture","CreateTextureAsync","createMipMaps","minFilter","NEAREST_MIPMAP_LINEAR","samplingMode","blob","blobURL","revokeBlobURL","revokeObjectURL","newTexture","wrapS","wrapU","wrapT","wrapV","LoadShaderStringAsync","shader","shaderString","atob","defaultMaterial","diffuseColor","sideOrientation","Material","CounterClockWiseSideOrientation","program","states","vertexShader","pixelShader","fragmentShader","newVertexShader","newPixelShader","vertexTokenizer","Tokenizer","pixelTokenizer","SAMPLER_2D","attr","attribute","foundAttribute","shaderPath","enable","effect","onShaderCompileError","onCompiled","materialValues","values","techniqueUniforms","onLoadTexture","setTexture","LoadTextureAsync","prepareShaderMaterialUniforms","onBind","getEffect","onBindShaderMaterial","onShaderCompileSuccess","functions","cullFace","BACK","backFaceCulling","blendFunc","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","alphaMode","ALPHA_COMBINE","ZERO","ALPHA_ONEONE","ALPHA_ADD","ONE_MINUS_SRC_COLOR","ALPHA_SUBTRACT","DST_COLOR","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","RegisterExtension","extension","GLTFLoader","Extensions","_importMeshAsync","LoadRuntimeAsync","_createNodes","AbstractMesh","skl","_loadBuffersAsync","_loadShadersAsync","spriteManagers","_loadAsync","LoadRuntimeExtensionsAsync","onload","hasShaders","processShader","VERTEX","bind","onLoad","hasBuffers","processBuffer","_name","loadRuntimeAsync","loadRuntimeExtensionsAsync","loadBufferAsync","loadTextureBufferAsync","createTextureAsync","loadShaderStringAsync","loadMaterialAsync","_ApplyExtensions","loaderExtension","GLTFLoaderBase","_LoadTextureBufferAsync","_CreateTextureAsync","func","defaultFunc","extensionName","_bin","sourceExt","binaryExtensionShader","shaderBytes","GLTFBinaryExtension","ambientLight","ambient","point","directional","fallOffAngle","Math","PI","standardMaterial","disableLighting","doubleSided","transparency","specularPower","shininess","_loadTexture","ambientColor","emission","specular","specularColor","propertyPath","GLTFMaterialsCommonExtension","_registeredGLTFExtensions","Map","registeredGLTFExtensions","registerGLTFExtension","isGLTFExtension","unregisterGLTFExtension","delete","Get","context","array","TryGet","Assign","LoadBoundingInfoFromPositionAccessor","min","max","minArray","maxArray","minVector","TmpVectors","copyFromFloats","maxVector","normalized","divider","oneOverDivider","BoundingInfo","_completePromises","_assetContainer","_babylonLights","_disableInstancedMesh","_allMaterialsDirtyRequired","_skipStartAnimationStep","_extensions","_disposed","_rootUrl","_fileName","_uniqueRootUrl","_rootBabylonMesh","_defaultBabylonMaterialData","_postSceneLoadActions","UnregisterExtension","_babylonScene","_loadData","_getMeshes","_getSkeletons","_getAnimationGroups","_getTransformNodes","_getGeometries","resultFunc","Date","now","_loadExtensionsAsync","loadingToReadyCounterName","LOADING","READY","loadingToCompleteCounterName","COMPLETE","_extensionsOnLoading","promises","oldBlockMaterialDirtyMechanism","blockMaterialDirtyMechanism","loadSceneAsync","ArrayItem","m","babylonDrawMode","TriangleFillMode","_loadMaterialAsync","_forceBlockMaterialDirtyMechanism","_compileMaterialsAsync","_compileShadowGeneratorsAsync","resultPromise","all","setEnabled","maxSimultaneousLights","_extensionsOnReady","_startAnimations","SetImmediate","catch","_setupData","binaryBuffer","nodeParents","_createRootNode","parentIndex","extensionPromises","registeredExtension","enabled","isExtensionUsed","sort","order","extensionsRequired","some","rootMesh","_LoadTransform","FORCE_RIGHT_HANDED","extensionPromise","_extensionsLoadSceneAsync","logOpen","loadNodeAsync","action","_loadAnimationsAsync","logClose","_forEachPrimitive","geometry","_babylonTransformNodeForSkin","NONE","babylonAnimationGroups","start","ALL","_extensionsLoadNodeAsync","loadNode","babylonTransformNode","AddPointerMetadata","loadCameraAsync","babylonCamera","childNode","childBabylonMesh","hasMesh","hasSkin","nodeName","transformNode","TransformNode","_loadMeshAsync","babylonTransformNodeForSkin","metadata","deepMerge","_loadSkinAsync","parentNode","asMesh","isAnInstance","useBoundingInfoFromGeometry","_updateBoundingInfo","refreshBoundingInfo","_loadMeshPrimitiveAsync","_extensionsLoadMeshPrimitiveAsync","babylonAbstractMesh","promise","shouldInstance","targets","createInstance","ClockWiseSideOrientation","_createMorphTargets","_loadVertexDataAsync","babylonGeometry","_loadMorphTargetsAsync","applyToMesh","_GetDrawMode","_createDefaultMaterial","_extensionsLoadVertexDataAsync","isUnIndexed","_loadIndicesAccessorAsync","setIndices","loadAttribute","kind","_delayInfo","_loadVertexAccessorAsync","babylonVertexBuffer","getKind","PositionKind","babylonBoundingInfo","_boundingInfo","setVerticesBuffer","MatricesIndicesExtraKind","numBoneInfluencers","NormalKind","TangentKind","UV2Kind","UV3Kind","UV4Kind","UV5Kind","UV6Kind","MatricesIndicesKind","MatricesWeightsKind","MatricesWeightsExtraKind","ColorKind","hasVertexAlpha","targetNames","extras","MorphTargetManager","areUpdatesFrozen","weight","addTarget","MorphTarget","numTargets","babylonMorphTarget","_loadMorphTargetVertexDataAsync","setData","getVertexBuffer","_loadFloatAccessorAsync","setPositions","setNormals","tangents","dataIndex","setTangents","setUVs","setUV2s","componentSize","getSize","pixid","floor","setColors","One","_extensionsLoadSkinAsync","skeletonId","_loadBones","_loadSkinInverseBindMatricesDataAsync","inverseBindMatricesData","_updateBoneMatrices","_findSkeletonRootNode","joints","skeletonNode","isParent","babylonBones","_loadBone","paths","unshift","_isJoint","babylonBone","parentBabylonBone","boneIndex","_getNodeMatrix","linkTransformNode","inverseBindMatrices","baseMatrix","FromArrayToRef","invertToRef","babylonParentBone","getParent","getAbsoluteInverseBindMatrix","updateMatrix","_updateAbsoluteBindMatrices","_extensionsLoadCameraAsync","ignoreParentScaling","loadAnimationAsync","animationGroup","targetedAnimations","_extensionsLoadAnimationAsync","AnimationGroup","babylonAnimationGroup","_loadAnimationChannelAsync","babylonTarget","addTargetedAnimation","normalize","animationContext","_extensionsLoadAnimationChannelAsync","channelTargetPath","pathIsWeights","properties","targetInfo","_loadAnimationChannelFromTargetInfoAsync","invfps","_loadAnimationSamplerAsync","numAnimations","propertyInfo","stride","outputOffset","inputAccessor","outputAccessor","_extensionsLoadBufferAsync","loadUriAsync","loadBufferViewAsync","_extensionsLoadBufferViewAsync","_loadAccessorAsync","numComponents","_GetNumComponents","byteStride","GetTypeByteLength","ForEach","_GetTypedArray","sparse","typedArray","indicesBufferView","valuesBufferView","indicesData","valuesData","sparseLength","sparseData","valuesIndex","indicesIndex","componentIndex","_GetTypedArrayConstructor","_loadVertexBufferViewAsync","_babylonBuffer","engine","Buffer","_babylonVertexBuffer","babylonBuffer","_loadMaterialMetallicRoughnessPropertiesAsync","PBRMaterial","White","loadTextureInfoAsync","albedoTexture","nonColorData","metallicTexture","useMetallnessFromMetallicTextureBlue","useRoughnessFromMetallicTextureGreen","useRoughnessFromMetallicTextureAlpha","_extensionsLoadMaterialAsync","babylonData","createMaterial","babylonMeshes","loadMaterialPropertiesAsync","splice","enableSpecularAntiAliasing","useRadianceOverAlpha","useSpecularOverAlpha","transparencyMode","PBRMATERIAL_OPAQUE","_extensionsCreateMaterial","_extensionsLoadMaterialPropertiesAsync","loadMaterialBasePropertiesAsync","loadMaterialAlphaProperties","twoSidedLighting","invertNormalMapX","invertNormalMapY","forceIrradianceInFragment","ambientTexture","useAmbientInGrayScale","PBRMATERIAL_ALPHATEST","alphaCutOff","alphaCutoff","hasAlpha","PBRMATERIAL_ALPHABLEND","useAlphaFromAlbedoTexture","textureInfo","_extensionsLoadTextureInfoAsync","texCoord","_textureInfo","_loadTextureAsync","coordinatesIndex","_extensionsLoadTextureAsync","DefaultSampler","image","_createTextureAsync","textureLoaderOptions","useSRGBBuffer","samplerData","_loadSampler","deferred","Deferred","textureCreationOptions","noMipmap","noMipMaps","invertY","exception","loaderOptions","loadImageAsync","dataUrl","updateURL","internalTexture","getInternalTexture","_GetTextureSamplingMode","_GetTextureWrapMode","property","_extensionsLoadUriAsync","_ValidateUri","IsBase64DataUrl","log","LoadFileError","babylonObject","pointer","_internalMetadata","pointers","magFilter","LINEAR_NEAREST","LINEAR_LINEAR","LINEAR_NEAREST_MIPNEAREST","LINEAR_LINEAR_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","LINEAR_LINEAR_MIPLINEAR","NEAREST_NEAREST","NEAREST_LINEAR","NEAREST_NEAREST_MIPNEAREST","NEAREST_LINEAR_MIPNEAREST","NEAREST_NEAREST_MIPLINEAR","NEAREST_LINEAR_MIPLINEAR","GetTypedArrayConstructor","componentTypeLength","PointListDrawMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","forceCompilationAsync","useInstances","clipPlane","getShadowGenerator","_forEachExtensions","_applyExtensions","functionName","actionAsync","loaderProperty","_activeLoaderExtensionFunctions","activeLoaderExtensionFunctions","onLoading","onReady","_loadUriAsync","LoadExtensionAsync","LoadExtraAsync","extra","startPerformanceCounter","endPerformanceCounter","NAME","loader","extensionContext","_loadLightAsync","babylonScene","environmentTexture","specularImages","mipmap","faces","face","specularImageContext","RawCubeTexture","specularImageSize","irradianceCoefficients","sphericalHarmonics","SphericalHarmonics","convertIrradianceToLambertianRadiance","sphericalPolynomial","SphericalPolynomial","FromHarmonics","lodGenerationScale","log2","updateRGBDAsync","instanceCount","translationBuffer","rotationBuffer","scaleBuffer","matrices","ComposeToRef","copyToArray","thinInstanceSetBuffer","EXT_mesh_gpu_instancing","bufferViewMeshopt","_meshOptData","MeshoptCompression","Default","decodeGltfBufferAsync","filter","EXT_meshopt_compression","EXT_texture_webp","EXT_texture_avif","babylonSpotLight","Backward","falloffType","Light","FALLOFF_GLTF","bufferData","iesProfileTexture","useNormalizedFlagFromAccessor","DracoDecoder","DefaultAvailable","dracoDecoder","uniqueId","_dracoBabylonGeometry","positionAccessor","_decodeMeshToGeometryForGltfAsync","KHR_draco_mesh_compression","babylonLight","babylonDirectionalLight","setAll","KHR_lights","_loadSpecularGlossinessPropertiesAsync","diffuseFactor","reflectivityColor","microSurface","glossinessFactor","diffuseTexture","specularGlossinessTexture","reflectivityTexture","useMicroSurfaceFromReflectivityMapAlpha","KHR_materials_pbrSpecularGlossiness","_loadUnlitPropertiesAsync","unlit","KHR_materials_unlit","_loadClearCoatPropertiesAsync","isEnabled","useRoughnessFromMainTexture","remapF0OnInterfaceChange","textureRoughness","_loadIridescencePropertiesAsync","iridescenceIOR","_loadEmissiveProperties","_loadSheenPropertiesAsync","Black","albedoScaling","_loadSpecularPropertiesAsync","metallicReflectanceTexture","useOnlyMetallicFromMetallicReflectanceTexture","reflectanceTexture","_loadIorPropertiesAsync","_DEFAULT_IOR","GetAvailableVariants","extensionMetadata","_GetExtensionMetadata","variants","getAvailableVariants","KHR_materials_variants","SelectVariant","variantName","select","entries","entry","lastSelected","selectVariant","Reset","original","reset","GetLastSelectedVariant","getLastSelectedVariant","_variants","rootBabylonMesh","defaultVariant","onLoaded","selectedVariant","lastSelectedVariant","isArray","mappingIndex","mapping","mappings","mappingVariantIndex","variantIndex","variant","onClonedObservable","newOne","newRoot","variantEntry","_opaqueRenderTarget","_opaqueMeshesCache","_transparentMeshesCache","_materialObservers","_options","TransmissionHelper","_GetDefaultOptions","_scene","_transmissionHelper","_parseScene","_setupRenderTargets","renderSize","samples","lodGenerationOffset","renderTargetTextureType","TEXTURETYPE_HALF_FLOAT","generateMipmaps","updateOptions","newValues","newOptions","oldOptions","getOpaqueTarget","_shouldRenderAsTransmission","isRefractionEnabled","_addMesh","onMaterialChangedObservable","_onMeshMaterialChanged","refractionTexture","_removeMesh","idx","onNewMeshAddedObservable","onMeshRemovedObservable","transparentIdx","opaqueIdx","_isRenderTargetValid","saveSceneEnvIntensity","RenderTargetTexture","ignoreCameraViewport","renderList","clearColor","gammaSpace","renderSprites","renderParticles","renderInLinearSpace","onBeforeBindObservable","opaqueRenderTarget","environmentIntensity","toLinearSpaceToRef","useExactSrgbConversions","onAfterUnbindObservable","_loadTransparentPropertiesAsync","pbrMaterial","volumeIndexOfRefraction","useAlbedoToTintRefraction","refractionIntensityTexture","useGltfStyleTextures","_loadTranslucentPropertiesAsync","isTranslucencyEnabled","useAlbedoToTintTranslucency","translucencyIntensityTexture","translucencyColorTexture","_loadVolumePropertiesAsync","useThicknessAsDepth","_loadDispersionPropertiesAsync","isDispersionEnabled","KHR_mesh_quantization","useRGBAIfASTCBC7NotAvailableWhenUASTC","KHR_texture_basisu","uRotationCenter","vRotationCenter","xmp_gltf","KHR_xmp_json_ld","xmp_node","packet","packets","xmp","getColor3","getFloat","getMinusFloat","getNextFloat","getFloatBy2","getTextureTransformTree","textureName","MaterialAnimationPropertyInfo","CameraAnimationPropertyInfo","ANIMATIONTYPE_COLOR3","baseColorTextureInterpolation","metallicRoughnessTextureInterpolation","normalTextureInterpolation","occlusionTextureInterpolation","emissiveTextureInterpolation","anisotropyTextureInterpolation","clearcoatTextureInterpolation","clearcoatNormalTextureInterpolation","clearcoatRoughnessTextureInterpolation","iridescenceTextureInterpolation","iridescenceThicknessTextureInterpolation","sheenTextureInterpolation","sheenRoughnessTextureInterpolation","specularTextureInterpolation","specularColorTextureInterpolation","transmissionTextureInterpolation","thicknessTextureInterpolation","diffuseTransmissionTextureInterpolation","diffuseTransmissionColorTextureInterpolation","LightAnimationPropertyInfo","_pathToObjectConverter","KHR_animation_pointer","_clips","_emitters","clips","emitters","emitterIndex","emitter","refDistance","maxDistance","rolloffFactor","distanceModel","outerAngle","_loadEmitterAsync","_babylonSounds","sound","attachToMesh","setLocalDirectionToMesh","Forward","setDirectionalCone","ToDegrees","events","_loadAnimationEventAsync","_loadClipAsync","clip","_objectURL","_babylonData","clipPromises","loop","autoplay","volume","clipContext","objectURL","Sound","weightedSound","WeightedSound","directionalConeInnerAngle","directionalConeOuterAngle","_getEventAction","time","startOffset","currentFrame","frameOffset","play","stop","pause","babylonAnimationEvent","AnimationEvent","addEvent","onAnimationGroupEndObservable","onAnimationGroupPauseObservable","MSFT_audio_emitter","maxLODsToLoad","onNodeLODsLoadedObservable","onMaterialLODsLoadedObservable","_bufferLODs","_nodeIndexLOD","_nodeSignalLODs","_nodePromiseLODs","_nodeBufferLODs","_materialIndexLOD","_materialSignalLODs","_materialPromiseLODs","_materialBufferLODs","indexLOD","_loadBufferLOD","firstPromise","nodeLODs","_getLODs","ids","nodeLOD","previousNodeLOD","_disposeTransformNode","materialLODs","materialLOD","previousDataLOD","_disposeMaterials","previousIndexLOD","bufferLODs","end","bufferLOD","babylonMaterials","getChildMeshes","babylonMaterialsToDispose","every","babylonTextures","getActiveTextures","hasTexture","MSFT_lod","extraContext","forceDepthWrite","separateCullingPass","MSFT_minecraftMesh","getMappingForFullOperationName","fullOperationName","getMappingForDeclaration","declaration","returnNoOpIfNotAvailable","gltfExtensionsToFlowGraphMapping","gltfToFlowGraphMapping","inputs","flows","inputValueSockets","outputValueSockets","blocks","outputs","addNewInteractivityFlowGraphMapping","MSFT_sRGBFactors","BABYLON","out","timeSinceLastTick","gltfType","extraProcessor","gltfBlock","_mapping","parser","serializedObjects","configuration","eventId","arrays","serializedObject","eventData","validation","interactivityGraph","eventConfiguration","getSimpleInputMapping","roundHalfAwayFromZero","_gltfBlock","_declaration","_parser","useMatrixPerComponent","find","types","flowGraphType","condition","c","dataInputs","_connectionValues","inputIsColumnMajor","h","l","socketIn","valueType","socketInA","socketInB","_arrays","outputSignalCount","signalOutputs","true","false","cases","inOptions","defaultValue","selection","caseValue","toString","uniqueCases","Set","from","loopBody","initialIndex","startIndex","endIndex","currentCount","isRandom","isLoop","inputFlows","err","variable","isVariable","dataTransformer","getVariableName","variables","useSlerp","duration","p1","toBlock","p2","in","interBlockConnectors","inputBlockIndex","outputBlockIndex","serializedValueInterpolation","propertyIndex","staticVariables","getAnimationTypeByFlowGraphType","serializedGetVariable","className","outputValue","speed","startTime","endTime","_context","globalGLTF","stopTime","inferType","reduce","acc","getAllSupportedNativeNodeTypes","gltfTypeToBabylonType","float","elementType","bool","float2","float3","float4","float4x4","float2x2","float3x3","int","_interactivityGraph","_types","_mappings","_staticVariables","_events","_internalEventsCounter","_nodes","_parseTypes","_parseDeclarations","_parseVariables","_parseEvents","_parseNodes","signature","declarations","flowGraphMapping","_parseVariable","dataTransform","NaN","fill","converted","eventValue","blockType","block","_getEmptyBlock","_parseNodeConfiguration","RandomGUID","dataOutputs","signalInputs","nodeMapping","configMapping","configKey","_parseNodeConnections","gltfNode","flowGraphBlocks","outputMapper","flowsFromGLTF","flowsKeys","flowKey","flow","flowMapping","socketOutName","socketOut","_createNewSocketConnection","inputNodeId","nodeIn","inputMapper","flowInMapping","socket","arrayMapping","endsWith","nodeInSocketName","inputBlock","connectedPointIds","valuesFromGLTF","valuesKeys","valueKey","valueMapping","socketInName","convertedValue","nodeOutId","nodeOutSocketName","nodeOut","outBlock","connector","_connectFlowGraphNodes","isOutput","_connectionType","serializedInput","serializedOutput","inputArray","outputArray","inputConnection","outputConnection","serializeToFlowGraph","_userVariables","rightHanded","allBlocks","val","concat","executionContexts","_pathConverter","_AddInteractivityObjectModel","interactivityDefinition","KHR_interactivity","coordinator","FlowGraphCoordinator","graphs","graph","InteractivityGraphToFlowGraphParser","ParseFlowGraphAsync","pathConverter","activeCamera","isPlaying","to","getCurrentFrame","addToBlockFactory","FlowGraphGLTFDataProvider","tn","isVisible","inheritVisibility","KHR_node_visibility","visible","stopPropagation","nodeIndex","selectedNodeIndex","controllerIndex","selectionPoint","selectionRayOrigin","variableName","isPickable","KHR_node_selectability","selectable","meshPointerOverPrefix","hoverNodeIndex","meshPointerOutPrefix","pointerOverDisableMeshTesting","KHR_node_hoverability","hoverable","_assignExtras","gltfProp","ExtrasAsMetadata","parseMTL","lines","delimiter_pattern","line","trim","charAt","pos","toLowerCase","parseFloat","MTLFileLoader","bumpMultiplierIndex","bumpMultiplier","opacityTexture","lastDelimiter","lastIndexOf","INVERT_TEXTURE_Y","materialToUse","babylonMeshesArray","loadingOptions","_positions","_normals","_uvs","_colors","_extColors","_meshesFromObj","_indicesForBabylon","_wrappedPositionForBabylon","_wrappedUvsForBabylon","_wrappedColorsForBabylon","_wrappedNormalsForBabylon","_tuplePosNorm","_curPositionInIndices","_hasMeshes","_unwrappedPositionsForBabylon","_unwrappedColorsForBabylon","_unwrappedNormalsForBabylon","_unwrappedUVForBabylon","_triangles","_materialNameFromObj","_objMeshName","_increment","_isFirstMaterial","_grayColor","_hasLineData","_materialToUse","_babylonMeshesArray","_loadingOptions","_isInArray","arr","_isInArrayUV","uv","_setData","indicePositionFromObj","indiceUvsFromObj","indiceNormalFromObj","positionVectorFromOBJ","textureVectorFromOBJ","normalsVectorFromOBJ","positionColorsFromOBJ","optimizeWithUV","_unwrapData","_handednessSign","z","importVertexColors","_getTriangles","faceIndex","_pushTriangle","_getColor","_setDataForCurrentFaceWithPattern1","Up","_setDataForCurrentFaceWithPattern2","_setDataForCurrentFaceWithPattern3","_setDataForCurrentFaceWithPattern4","_setDataForCurrentFaceWithPattern5","_addPreviousObjMesh","_handledMesh","useLegacyBehavior","reverse","hasLines","_optimizeNormals","getVerticesData","mapVertices","lst","normal","v0Idx","vIdx","setVerticesData","_IsLineElement","_IsObjectElement","_IsGroupElement","_GetZbrushMRGB","notParse","regArray","regIndex","onFileToLoadFound","linesOBJ","lineLines","currentGroup","SolidParser","lineValues","flat","VertexPattern","NormalPattern","exec","UVPattern","UVScaling","FacePattern3","FacePattern4","FacePattern5","FacePattern2","FacePattern1","LinePattern1","LinePattern2","element","LinePattern3","GroupDescriptor","ObjectDescriptor","objMesh","materialName","isObject","UseMtlDescriptor","MtlLibGroupDescriptor","SmoothDescriptor","newMaterial","RandomId","pointsCloud","directMaterial","_babylonMesh","computeNormals","ComputeNormals","optimizeNormals","OBJFileLoader","_DefaultLoadingOptions","COMPUTE_NORMALS","OPTIMIZE_NORMALS","IMPORT_VERTEX_COLORS","INVERT_Y","invertTextureY","UV_SCALING","materialLoadingFailsSilently","MATERIAL_LOADING_FAILS_SILENTLY","OPTIMIZE_WITH_UV","SKIP_MATERIALS","USE_LEGACY_BEHAVIOR","_loadMTL","onFailure","pathOfFile","_parseSolid","ex","fileToLoad","materialsFromMTLFile","mtlPromises","dataLoaded","_indices","getTotalIndices","isLine","Boolean","getBindedMeshes","wireframe","STLFileLoaderMetadata","solidPattern","facetsPattern","normalPattern","vertexPattern","matches","_isBinary","_parseBinary","TextDecoder","decode","meshName","meshNameFromEnd","_parseASCII","load","loadAssetContainer","reader","DataView","getUint32","ascii","off","getUint8","Uint32Array","indicesCount","normalX","getFloat32","normalY","normalZ","vertexstart","STLFileLoader","DO_NOT_ALTER_FILE_COORDINATES","solidData","facet","normalMatches","lastIndex","vertexMatch","Mode","SPLATFileLoaderMetadata","SPLATFileLoader","_parse","_BuildPointCloud","pointcloud","uBuffer","fBuffer","vertexCount","addPoints","particle","_BuildMesh","parsedPLY","hasVertexColors","_parseSPZ","ubuf","ubufu32","splatCount","shDegree","fractionalBits","positionScale","int32View","uint8View","read24bComponent","u8","rgba","Uint8ClampedArray","rot","coordinateSign","quaternionOffset","flipY","component","Scalar","Clamp","exp","nx","ny","nz","sqrt","shComponentCount","textureCount","ceil","shIndexRead","width","getCaps","maxTextureSize","height","textureIndex","shIndexWrite","shValue","sh","readableStream","ReadableStream","controller","enqueue","close","decompressionStream","DecompressionStream","decompressedStream","pipeThrough","Response","parsedSPZ","gaussianSplatting","GaussianSplattingMesh","keepInRam","updateData","_ConvertPLYToSplat","PointsCloudSystem","buildMeshAsync","header","headerEndIndex","faceElement","faceCount","chunkElement","chunkCount","ElementMode","rowVertexOffset","rowChunkOffset","offsets","double","uint","short","ushort","uchar","list","chunkMode","vertexProperties","chunkProperties","rowVertexLength","rowChunkLength","ConvertPLYWithSHToSplatAsync","splatsData","dataView","headerEnd","faceVertexCount","vertexIndex","propertyCount","propertyColorCount","splatProperties","splatColorProperties","hasMandatoryProperties","currentMode","globalObject","GLTF1","GLTF2","Loader"],"sourceRoot":""}